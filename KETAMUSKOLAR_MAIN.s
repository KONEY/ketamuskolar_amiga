;*** MiniStartup by Photon ***
	INCDIR	"NAS:AMIGA/CODE/ketamuskolar_amiga/"
	SECTION	"Code",CODE
	INCLUDE	"custom-registers.i"
	INCLUDE	"PhotonsMiniWrapper1.04.s"
	INCLUDE	"med/med_feature_control.i"		; MED CFGs
;********** Constants **********
w_real	EQU 320
w	EQU 320		; screen width
h	EQU 234		; screen height
bpls	EQU 4		; depth
bpl	EQU w/16*2		; byte-width of 1 bitplane line (40bytes)
bwid	EQU bpls*bpl		; byte-width of 1 pixel line (all bpls)
blitsize	EQU h*64+w/16	; size of blitter operation
hband	EQU 10		; lines reserved for textscroller
hblit	EQU h/2		;-hband	; size of blitter op without textscroller
wblit	EQU w/2/16*2
bpl_real	EQU w/16*2
vbarwbpl	EQU w/10/16
X_SPLIT_SLICE	EQU 18
X_SPLIT2X_SLICE	EQU 13
TXT_FRMSKIP 	EQU 4
;*************
;CLR.W	$100		; DEBUG | w 0 100 2
;********** Demo **********		; Demo-specific non-startup code below.
Demo:					; a4=VBR, a6=Custom Registers Base addr
	;*--- init ---*
	MOVE.L	#VBint,$6C(A4)
	MOVE.W	#%1110000000100000,INTENA
	MOVE.W	#%1000001111100000,DMACON	; BIT10=BLIT NASTY
	;MOVE.W	MODSTART_POS,D3
	;CMP.W	#0,D3
	;BEQ.S	.dontDisableBlitterNasty	; IF START > 0 DISABLE BLIT NASTY NOW
	;MOVE.W	#%0000010000000000,DMACON	; BIT10=BLIT NASTY DISABLED
	;.dontDisableBlitterNasty:
	;*--- clear screens ---*
	;LEA	SCREEN1,A1
	;BSR.W	ClearScreen
	;LEA	SCREEN2,A1
	;BSR.W	ClearScreen
	BSR	WaitBlitter

	;## SUPER FAST LINES DRAWING ##
	LEA	FOOTER,A0
	SUB.L	#bpl,A0		; =END OF HEADER :)
	MOVE.W	#20-1,D0
	.drawLine:
	MOVE.L	#$FFFFFFFF,(A0)+
	DBRA	D0,.drawLine
	;## SUPER FAST LINES DRAWING ##

	MOVEQ	#0,D0
	;########################
	LEA	HEADER,A0
	LEA	COPPER\.BplPtrs+2,A1
	MOVEQ	#0,D1
	BSR.W	PokePtrs
	LEA	HEADER,A0
	MOVEQ	#0,D1
	BSR.W	PokePtrs
	LEA	HEADER,A0
	MOVEQ	#0,D1
	BSR.W	PokePtrs
	LEA	HEADER,A0
	MOVEQ	#0,D1
	BSR.W	PokePtrs
	;########################
	MOVEM.L	BGPLANE0,A0
	LEA	COPPER\.BplPtrs2+2,A1
	MOVEQ	#0,D1
	BSR.W	PokePtrs
	MOVEM.L	BGPLANE1,A0
	MOVEQ	#0,D1
	BSR.W	PokePtrs
	MOVEM.L	BGPLANE0,A0
	ADD.L	#bpl,A0
	MOVEQ	#0,D1
	BSR.W	PokePtrs
	MOVEM.L	BGPLANE3,A0
	MOVEQ	#0,D1
	BSR.W	PokePtrs
	;########################
	LEA	FOOTER,A0
	LEA	COPPER\.BplPtrs3+2,A1
	MOVEQ	#0,D1
	BSR.W	PokePtrs
	LEA	FOOTER,A0
	MOVEQ	#0,D1
	BSR.W	PokePtrs
	LEA	FOOTER,A0
	MOVEQ	#0,D1
	BSR.W	PokePtrs
	LEA	FOOTER,A0
	MOVEQ	#0,D1
	BSR.W	PokePtrs

	; #### CPU INTENSIVE TASKS BEFORE STARTING MUSIC
	;JSR	__CREATESCROLLSPACE

	MOVE.W	BLIT_Y_MASK,BLTAFWM	; THEY'LL NEVER
	MOVE.W	BLIT_X_MASK,BLTALWM	; CHANGE

	MOVE.L	DITHERPLANE,SCROLL_DEST	; FILLS A PLANE
	BSR.W	__DITHER_PLANE		; WITH DITHERING

	MOVE.L	#HEADER,SCROLL_DEST
	BSR.W	__DBLBMP

	;BRA.W	.pointCopper
	MOVE.W	#0,X_SHIFT
	MOVE.L	GLITCHGOOD,SCROLL_SRC
	;MOVE.L	DITHERPLANE,SCROLL_SRC
	MOVE.L	BGPLANE0,SCROLL_DEST
	MOVE.B	#1,X_DIR
	BSR.W	__SCROLL_X
	MOVE.B	#0,X_DIR
	BSR.W	__SCROLL_X

	;MOVE.L	DITHERPLANE,SCROLL_SRC
	;MOVE.L	BGPLANE3,SCROLL_DEST
	;MOVE.B	#1,X_DIR
	;BSR.W	__SCROLL_X
	;MOVE.B	#0,X_DIR
	;BSR.W	__SCROLL_X

	MOVE.L	GLITCHRESET,SCROLL_SRC
	MOVE.L	BGPLANE1,SCROLL_DEST
	MOVE.B	#1,X_DIR
	BSR.W	__SCROLL_X
	MOVE.B	#0,X_DIR
	BSR.W	__SCROLL_X

	; #### CPU INTENSIVE TASKS BEFORE STARTING MUSIC

	.pointCopper:
	MOVE.W	#7,MED_START_POS		; skip to pos# after first block
	JSR	_startmusic
	;*--- start copper ---*
	MOVE.L	#COPPER,$80(A6)
;********************  main loop  ********************
MainLoop:
	;BSR.W	__COPCOL_EDIT	; EDITS COPPER COLORS
	move.w	#$12c,d0		; No buffering, so wait until raster
	bsr.w	WaitRaster	; is below the Display Window.
	;*--- swap buffers ---*
	;movem.l	DrawBuffer(PC),a2-a3
	;exg	a2,a3
	;movem.l	a2-a3,DrawBuffer	;draw into a2, show a3
	;*--- show one... ---*
	;move.l	a3,a0
	;move.l	#bpl*h,d0
	;lea	COPPER\.BplPtrs+2,a1
	;moveq	#bpls-1,d1
	;bsr.w	PokePtrs
	;*--- ...draw into the other(a2) ---*
	;move.l	a2,a1
	; do stuff here :)
	; **** JOYSTICK TEST ****

	BSR.W	__SET_MED_VALUES
	
	BRA.W	.SkipJoyActions
	MOVEM.W	$DFF00C,D0	; FROM EAB
	ANDI.W	#$0303,D0
	MOVE.W	D0,D1
	ADD.W	D1,D1
	ADDI.W	#$0101,D0
	ADD.W	D1,D0

	BTST	#9,D0		; 9 LEFT
	BEQ.S	.notLeft
	NOP
	.notLeft:
	BTST	#1,D0		; 1 RIGHT
	BEQ.S	.notRight
	NOP
	.notRight:
	BTST	#2,D0		; 10 UP
	BEQ.S	.notDown
	NOP
	.notDown:
	BTST	#10,D0		; 2 DOWN
	BEQ.S	.notUp
	NOP
	.notUp:
	BTST	#$07,$BFE001	; FIRE
	BNE.W	.notFire
	NOP
	.notFire:
	.SkipJoyActions:
	; **** JOYSTICK TEST ****

	SONG_BLOCKS_EVENTS:
	;* FOR TIMED EVENTS ON BLOCK ****
	MOVE.L	#$FFFFFFFF,BLTAFWM	; THEY'LL NEVER
	;MOVE.W	#$FFFF,BLTALWM		; CHANGE
	MOVE.W	MED_MODULE+mmd_pseqnum,D5
	LEA	TIMELINE,A3
	LSL.W	#2,D5		; CALCULATES OFFSET (OPTIMIZED)
	MOVE.L	(A3,D5),A4	; THANKS HEDGEHOG!!
	JSR	(A4)		; EXECUTE SUBROUTINE BLOCK#
	;*--- main loop end ---*

	BSR.W	__FILLANDSCROLLTXT
	;MOVE.W	$DFF006,$DFF180	; show rastertime left down to $12c
	ENDING_CODE:
	BTST	#6,$BFE001
	BNE.S	.DontShowRasterTime
	;MOVE.W	$DFF006,$DFF180	; show rastertime left down to $12c
	MOVE.B	X_DIR,D5
	NEG.B	D5
	MOVE.B	D5,X_DIR
	MOVE.B	X_PROGR_DIR,D5
	NEG.B	D5
	MOVE.B	D5,X_PROGR_DIR
	MOVE.B	X_PROGR_TYPE,D5
	NEG.B	D5
	MOVE.B	D5,X_PROGR_TYPE
	MOVE.B	X_FULL_DIR,D5
	NEG.B	D5
	MOVE.B	D5,X_FULL_DIR
	;MOVE.W	#-1,BLIT_A_MOD
	.DontShowRasterTime:

	BTST	#2,$DFF016	; POTINP - RMB pressed?
	BNE.W	MainLoop		; then loop
	;*--- exit ---*
	MOVEM.L	D0-A6,-(SP)
	JSR	_endmusic
	MOVEM.L	(SP)+,D0-A6
	RTS

;********** Demo Routines **********
PokePtrs:					; Generic, poke ptrs into copper list
	.bpll:	
	move.l	a0,d2
	swap	d2
	move.w	d2,(a1)			;high word of address
	move.w	a0,4(a1)			;low word of address
	addq.w	#8,a1			;skip two copper instructions
	add.l	d0,a0			;next ptr
	dbf	d1,.bpll
	rts

ClearScreen:				; a1=screen destination address to clear
	bsr	WaitBlitter
	clr.w	$66(a6)			; destination modulo
	move.l	#$01000000,$40(a6)		; set operation type in BLTCON0/1
	move.l	a1,$54(a6)		; destination address
	move.l	#blitsize*bpls,$58(a6)	;blitter operation size
	rts

VBint:					; Blank template VERTB interrupt
	movem.l	d0/a6,-(sp)		; Save used registers
	lea	$dff000,a6
	btst	#5,$1f(a6)		; check if it's our vertb int.
	beq.s	.notvb
	;*--- do stuff here ---*
	moveq	#$20,d0			; poll irq bit
	move.w	d0,$9c(a6)
	move.w	d0,$9c(a6)
	.notvb:	
	movem.l	(sp)+,d0/a6		; restore
	rte

__DBLBMP:
	LEA	KONEY,A1
	MOVE.L	SCROLL_DEST,A5
	MOVE.W	#$9,D6
	.DBLBMP:				; LOGICA PER RADDOPPIARE LA BITMAP
	MOVE.W	(A1)+,D0		
	;****************
	CLR.L	D1
	MOVE.W	#$F,D7
	.LOOP:	
	BTST	D7,D0
	BEQ.S	.NEXT
	MOVE.W	D7,D2
	ADD.W	D2,D2
	BSET	D2,D1
	ADDQ.W	#1,D2
	BSET	D2,D1
	.NEXT:	
	DBRA	D7,.LOOP
	;*****************
	ADD.W	#bpl,A5
	MOVE.L	D1,(A5)
	SUB.W	#bpl,A5
	MOVE.L	D1,(A5)+
	BTST	#0,D6
	BNE.S	.skip
	ADD.W	#bpl,A5
	ADD.W	#bpl-8,A5
	.skip:
	DBRA	D6,.DBLBMP
	RTS

__DITHER_PLANE:
	;ADD.L	#(h-1)*bpl,SCROLL_DEST
	MOVE.L	SCROLL_DEST,A4
	MOVE.W	#h-1,D4		; QUANTE LINEE
	MOVE.L	#$AAAAAAAA,D5
	.outerloop:		; NUOVA RIGA
	MOVE.W	#(bpl/4)-1,D6	; RESET D6
	NOT.L	D5
	.innerloop:		; LOOP KE CICLA LA BITMAP
	MOVE.L	D5,(A4)+
	DBRA	D6,.innerloop
	DBRA	D4,.outerloop
	RTS

__RANDOMIZE_PLANE:
	MOVE.L	SCROLL_DEST,A4
	MOVE.W	#bpl/2*h-1,D4	; QUANTE LINEE
	.innerloop:		; LOOP KE CICLA LA BITMAP
	BSR.S	_RandomWord
	ROL.W	D4,D5
	MOVE.W	D5,(A4)+
	DBRA	D4,.innerloop
	RTS

	_RandomWord:	
	bsr	_RandomByte
	rol.w	#8,d5
	_RandomByte:
	move.b	$dff007,d5	;$dff00a $dff00b for mouse pos
	move.b	$bfd800,d3
	eor.b	d3,d5
	rts

__SET_MED_VALUES:
	MOVE.W	MED_MODULE+mmd_pline,MED_BLOCK_LINE
	MOVE.W	MED_MODULE+mmd_pseqnum,MED_SONG_POS

	MOVE.W	MED_STEPSEQ_POS,D0	; UPDATE STEPSEQUENCER
	ANDI.W	#$F,D0			; POSITION (0-15 = 16 LEDS)
	MOVE.W	D0,MED_STEPSEQ_POS

	LEA	MED_TRK_0_COUNT(PC),A0
	;LEA	Copper\.LEVELWAITS+6,A1
	LEA	AUDIOCHLEV_0,A2
	LEA	MED_TRK_0_INST,A3
	MOVEQ	#3,D7
	.loop:
	MOVEQ	#$F,D0		; maxvalue
	SUB.W	(A0)+,D0		; -#frames/irqs since instrument trigger
	BPL.S	.ok		; below minvalue?
	MOVEQ	#$0,D0		; then set to minvalue
	MOVE.W	D0,(A3)		; RESET TWO BYTES (INST+NOTE)
	.ok:
	MOVE.W	D0,(A2)+		; LEVEL VALUE TO USE IN CODE
	;ROL.L	#$4,D0		; expand bits to green
	;ROL.L	#$4,D0		; expand bits to green
	;MOVE.W	D0,(A1)		; poke color
	;LEA	16(A1),A1
	LEA	2(A3),A3
	DBF	D7,.loop

	ADDQ.W	#$1,MED_TRK_0_COUNT	; inc elapsed #calls since last
	ADDQ.W	#$1,MED_TRK_1_COUNT
	ADDQ.W	#$1,MED_TRK_2_COUNT
	ADDQ.W	#$1,MED_TRK_3_COUNT

	RTS

__FILLANDSCROLLTXT:
	MOVE.L	#$0,D2
	MOVE.L	D2,D6
	MOVE.W	FRAMESINDEX,D7
	CMPI.W	#TXT_FRMSKIP,D7	; TXT_FRMSKIP
	BNE.W	.skip
	LEA	FOOTER,A4
	LEA	FONT,A5
	LEA	TEXT,A3
	ADD.W	#bpl*3+1,A4
	ADD.W	TEXTINDEX,A3
	CMP.L	#_TEXT-1,A3	; Siamo arrivati all'ultima word della TAB?
	BNE.S	.proceed
	MOVE.W	#$0,TEXTINDEX	; Riparti a puntare dalla prima word
	LEA	TEXT,A3		; FIX FOR GLITCH (I KNOW IT'S FUN... :)
	.proceed:
	MOVE.B	(A3),D2		; Prossimo carattere in d2
	SUBI.B	#$20,D2		; TOGLI 32 AL VALORE ASCII DEL CARATTERE, IN
	MULU.W	#$7,D2		; MOLTIPLICA PER 8 IL NUMERO PRECEDENTE,
	ADD.W	#$1,D2
	ADD.W	D2,A5
	MOVE.B	#$5,D6
	.loop:
	MOVE.B	(A5)+,(A4)+
	MOVE.B	#$0,(A4)+	; WRAPS MORE NICELY?
	ADD.W	#bpl*2-2,A4	; POSITIONING
	DBRA	D6,.loop
	.skip:
	SUBI.W	#$1,D7
	CMPI.W	#$0,D7
	BEQ.W	.RESET
	MOVE.W	D7,FRAMESINDEX
	BRA.S	.shifttext
	.reset:
	ADDI.W	#$1,TEXTINDEX
	MOVE.W	#TXT_FRMSKIP,D7
	MOVE.W	D7,FRAMESINDEX	; OTTIMIZZABILE

	.shifttext:
	;RTS
	LEA	FOOTER_END,A2
	LEA	FOOTER_END,A4
	SUB.W	#bpl*7,A2
	SUB.W	#bpl*7,A4
	BSR.W	WaitBlitter
	MOVE.W	#%0010100111110000,BLTCON0
	MOVE.W	#%0000000000000010,BLTCON1
	MOVE.L	#$FFFFFFFF,BLTAFWM
	MOVE.W	#$0,BLTAMOD
	MOVE.W	#$0,BLTDMOD
	MOVE.L	A2,BLTAPTH
	MOVE.L	A4,BLTDPTH
	MOVE.W	#6*64+(w*2+16)/16,BLTSIZE
	RTS

__BLIT_GLITCH_SLICE:
	MOVE.W	#%00001111111001010,D1
	MOVE.L	GLITCHGOOD,A3
	MOVE.L	SCROLL_DEST,A4

	.waitData:
	ADD.L	#bpl,A3			; GO TO NEXT
	TST.L	(A3)			; IF LINE EMPTY
	BEQ.S	.waitData			
	.dataOk:
	CMP.L	#_MED_MODULE-(bpl/2),A3	; LAST WORD OF DATA?
	BLS.S	.notEnd
	MOVE.L	GLITCHRESET,A3		; RELOAD
	.notEnd:

	bsr	WaitBlitter
	MOVE.W	D1,BLTCON0		; BLTCON0
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1 BIT 12 DESC MODE
	MOVE.W	#0,BLTAMOD		; BLTAMOD
	MOVE.W	#bpl-(16/16*2),BLTDMOD	; BLTDMOD

	MOVE.L	A3,BLTAPTH		; BLTAPT
	MOVE.L	A4,BLTDPTH
	MOVE.W	#h*64+16/16,BLTSIZE	; BLTSIZE
	MOVE.L	A3,GLITCHGOOD		; REMEMBER POSITION
	; ## MAIN BLIT ####
	RTS

__BLIT_GLITCH_BAND:
	;MOVE.L	#%1001111100001000,D1	; %1000100111110000 +ROL.W	#4,D1
	MOVE.L	GLITCHGOOD,A3
	MOVE.L	SCROLL_DEST,A4

	.waitData:
	ADD.L	#bpl,A3			; GO TO NEXT
	TST.L	(A3)			; IF LINE EMPTY
	BEQ.S	.waitData			
	.dataOk:
	CMP.L	#_MED_MODULE-(bpl/2),A3	; LAST WORD OF DATA?
	BLS.S	.notEnd
	MOVE.L	GLITCHRESET,A3		; RELOAD
	;MOVE.W	$DFF006,$DFF180		; show rastertime left down to $12c
	.notEnd:

	;ROR.W	#4,D1
	bsr	WaitBlitter
	MOVE.W	#%0000100111110000,BLTCON0	; BLTCON0
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1 BIT 12 DESC MODE
	MOVE.L	#$FFFFFFFF,BLTAFWM	; THEY'LL NEVER
	MOVE.W	BLIT_A_MOD,BLTAMOD	; BLTAMOD
	MOVE.W	BLIT_D_MOD,BLTDMOD	; BLTDMOD

	MOVE.L	A3,BLTAPTH		; BLTAPT
	MOVE.L	A4,BLTDPTH
	MOVE.W	BLIT_SIZE,BLTSIZE		; BLTSIZE
	MOVE.L	A3,GLITCHGOOD		; REMEMBER POSITION
	; ## MAIN BLIT ####
	RTS

__BLIT_GLITCH_TILE:
	;MOVE.W	#%00001111111001010,D1	; for texture?
	MOVE.L	GLITCHGOOD,A3
	MOVE.L	SCROLL_DEST,A4

	; ## MAIN BLIT ####
	.waitData:
	ADD.L	#bpl,A3			; GO TO NEXT
	TST.L	(A3)			; IF LINE EMPTY
	BEQ.S	.waitData			
	.dataOk:
	CMP.L	#_MED_MODULE-(bpl/2),A3	; LAST WORD OF DATA?
	BLS.S	.notEnd
	MOVE.L	GLITCHRESET,A3		; RELOAD
	.notEnd:

	ADD.L	#bpl*(h/2-32),A4		; CENTER!
	ADD.L	#bpl/2-4,A4		; CENTER!
	bsr	WaitBlitter
	MOVE.W	#%00001111111001010,BLTCON0	; BLTCON0
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1
	MOVE.W	#bpl-(64/16*2),BLTBMOD	; BLTAMOD
	MOVE.W	#0,BLTAMOD		; BLTBMOD =0 for texture
	MOVE.W	#bpl-(64/16*2),BLTCMOD	; BLTCMOD
	MOVE.W	#bpl-(64/16*2),BLTDMOD	; BLTDMOD 40-4=36

	MOVE.L	PATTERN_ACTUAL,BLTAPTH	; TEXTURE
	MOVE.L	A3,BLTBPTH		; BLTAPT
	MOVE.L	A4,BLTCPTH
	MOVE.L	A4,BLTDPTH
	MOVE.W	#64*64+64/16,BLTSIZE	; BLTSIZE
	; ## MAIN BLIT ####
	MOVE.L	A3,GLITCHGOOD		; REMEMBER POSITION
	RTS

__BLIT_DITHER_TILE:
	;MOVE.W	#%00001111111001010,D1	; for texture?
	; ## MAIN BLIT ####
	MOVE.L	SCROLL_SRC,A3
	MOVE.L	SCROLL_DEST,A4

	ADD.L	#bpl*(h/2-32),A4		; CENTER!
	ADD.L	#bpl/2-4,A4		; CENTER!
	bsr	WaitBlitter
	MOVE.W	#%00001111111001010,BLTCON0	; BLTCON0
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1
	MOVE.W	#0,BLTAMOD		; BLTAMOD =0 for texture
	MOVE.W	#bpl-(64/16*2),BLTBMOD	; BLTBMOD
	MOVE.W	#bpl-(64/16*2),BLTCMOD	; BLTCMOD
	MOVE.W	#bpl-(64/16*2),BLTDMOD	; BLTDMOD 40-4=36

	MOVE.L	PATTERN_ACTUAL,BLTAPTH	; TEXTURE
	MOVE.L	A3,BLTBPTH		; BLTAPT
	MOVE.L	A4,BLTCPTH
	MOVE.L	A4,BLTDPTH
	MOVE.W	#64*64+64/16,BLTSIZE	; BLTSIZE
	; ## MAIN BLIT ####
	RTS

__SCROLL_X:
	MOVE.B	X_DIR,D5
	MOVE.L	#%1001111100001000,D1	; %1000100111110000 +ROL.W	#4,D1
	;MOVE.W	#%0000110111011100,D1
	;CMP.B	#1,D5
	;BEQ.B	.mainBlit
	; ## MAIN BLIT ####
	;.mainBlit:
	MOVE.L	SCROLL_SRC,A3
	MOVE.L	SCROLL_DEST,A4

	MOVE.W	X_SHIFT,D0
	MOVE.B	D0,D1
	ROR.W	#4,D1
	bsr	WaitBlitter
	MOVE.W	D1,BLTCON0		; BLTCON0
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1 BIT 12 DESC MODE
	MOVE.L	#$FFFFFFFF,BLTAFWM	; THEY'LL NEVER
	MOVE.W	BLIT_A_MOD,BLTAMOD	; BLTAMOD
	MOVE.W	BLIT_D_MOD,BLTDMOD	; BLTDMOD

	CMP.B	#1,D5
	BEQ.B	.goBlitter			; FOR LEFT
	ADD.L	#bpl*h-1,A3
	ADD.L	#bpl*h-1,A4
	MOVE.W	#%0000000000000010,BLTCON1	; BLTCON1 BIT 12 DESC MODE

	.goBlitter:
	MOVE.L	A3,BLTAPTH		; BLTAPT
	MOVE.L	A4,BLTDPTH
	;MOVE.L	#DITHERPLANE,BLTBPTH	; TEXTURE
	MOVE.W	#h*64+w/2/16,BLTSIZE	; BLTSIZE
	; ## MAIN BLIT ####
	RTS

__SCROLL_Y:
	bsr	WaitBlitter
	MOVE.W	#%0000100111110000,BLTCON0

	MOVE.L	#0,D1
	MOVE.W	Y_SHIFT,D1
	MULU.W	#bpl,D1

	; ## MAIN BLIT ####
	MOVE.L	SCROLL_SRC,A3
	MOVE.L	SCROLL_DEST,A4
	MOVE.B	Y_DIR,D5
	TST.B	D5
	BEQ.S	.goUp
	MOVE.W	#%0000000000000010,BLTCON1	; BLTCON1 DESC MODE
	ADD.L	D1,A4			; POSITION Y
	ADD.L	#bpl*(h-1)-2,A3
	ADD.L	#bpl*(h-1)-2,A4
	BRA.S	.goBlit
	.goUp:
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1
	ADD.L	D1,A3			; POSITION Y
	.goBlit:

	MOVE.W	#bpl-wblit,BLTAMOD		; BLTAMOD
	MOVE.W	#bpl-wblit,BLTDMOD		; BLTDMOD

	MOVE.L	A3,BLTAPTH		; BLTAPT SRC
	MOVE.L	A4,BLTDPTH		; DESC
	MOVE.W	#(h-3)*64+(w/2)/16,BLTSIZE	; BLTSIZE
	; ## MAIN BLIT ####
	RTS

__SCROLL_X_HALF:
	MOVE.B	X_HALF_DIR,D5
	NOT.B	D5
	MOVE.B	D5,X_HALF_DIR

	MOVE.W	#%0000100111110000,D1

	ADD.L	#(w/2/16*2),SCROLL_DEST
	ADD.L	#(w/2/16*2),SCROLL_SRC

	CMP.B	#1,D5
	BEQ.B	.mainBlit
	; ## FOR LEFT ####
	SUB.L	#(w/2/16*2),SCROLL_DEST	; THIS IS...
	SUB.L	#(w/2/16*2),SCROLL_SRC	; ...UGLY...
	MOVE.L	SCROLL_SRC,A3
	MOVE.L	SCROLL_DEST,A4		; PATCH FIRST WORD COLUMN
	bsr	WaitBlitter
	MOVE.L	A3,BLTAPTH		; BLTAPT
	ADD.L	#bpl-2,A4			; POSITION FOR DESC
	MOVE.L	A4,BLTDPTH
	MOVE.W	D1,BLTCON0		; BLTCON0
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1 BIT 12 DESC MODE
	MOVE.W	#bpl-2,BLTAMOD		; BLTAMOD
	MOVE.W	#bpl-2,BLTDMOD		; BLTDMOD

	;MOVE.W	#(hblit<<6)+%000001,BLTSIZE	; BLTSIZE
	; ## FOR LEFT ####

	; ## MAIN BLIT ####
	.mainBlit:
	MOVE.L	SCROLL_SRC,A3
	MOVE.L	SCROLL_DEST,A4
	ROL.W	#4,D1
	MOVE.W	X_HALF_SHIFT,D1
	ROR.W	#4,D1
	bsr	WaitBlitter
	MOVE.W	D1,BLTCON0		; BLTCON0
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1 BIT 12 DESC MODE
	MOVE.W	#bpl-wblit,BLTAMOD		; BLTAMOD
	MOVE.W	#bpl-wblit,BLTDMOD		; BLTDMOD

	CMP.B	#1,D5
	BEQ.B	.goBlitter			; FOR LEFT
	ADD.L	#bpl*h-wblit-4,A3
	ADD.L	#bpl*h-wblit-4,A4
	MOVE.W	#%0000000000000010,BLTCON1	; BLTCON1 BIT 12 DESC MODE

	.goBlitter:
	MOVE.L	A3,BLTAPTH		; BLTAPT
	MOVE.L	A4,BLTDPTH
	MOVE.W	#h*64+(w/2)/16,BLTSIZE	; BLTSIZE
	; ## MAIN BLIT ####

	CMP.B	#1,D5
	BNE.B	.skip
	
	; ## FOR RIGHT ####
	MOVE.L	SCROLL_SRC,A3
	MOVE.L	SCROLL_DEST,A4		; PATCH FIRST WORD COLUMN
	bsr	WaitBlitter
	MOVEQ	#bpl-2,D0
	MOVE.L	A3,BLTAPTH		; BLTAPT
	MOVE.L	A4,BLTDPTH
	ADD.L	D0,A4
	MOVE.L	A4,BLTBPTH
	MOVE.W	#%0000110111100100,BLTCON0	; d = ac+b!c = abc+a!bc+ab!c+!ab!c = %11100100 = $e4
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1 BIT 12 DESC MODE
	MOVE.W	X_HALF_SHIFT,D1
	MOVE.W	#$FFFF,D2
	LSR.W	D1,D2

	MOVE.W	D2,BLTCDAT
	MOVE.W	D0,BLTAMOD
	MOVE.W	D0,BLTBMOD
	MOVE.W	D0,BLTDMOD

	;MOVE.W	#(hblit<<6)+%000001,BLTSIZE	; BLTSIZE (via al blitter !)
	.skip:
	; ## FOR RIGHT ####

	;ADD.B	#1,X_HALF_SHIFT
	RTS

__SCROLL_Y_HALF:
	MOVEQ	#0,D1
	MOVE.L	D1,D4			; CLR
	MOVE.W	Y_HALF_SHIFT,D1
	MOVE.W	#h,D4
	;ADD.B	#1,D1			; FIX FOR -1 VALUES
	SUB.W	D1,D4
	;SUB.W	#1,D4			; FIX FOR -1 VALUES
	MULU.W	#64,D4
	ADD.W	#bpl/2,D4

	MULU.W	#bpl,D1

	; ## MAIN BLIT ####
	MOVE.L	SCROLL_SRC,A3
	MOVE.L	SCROLL_DEST,A4

	MOVE.B	Y_HALF_DIR,D5
	NOT.B	D5
	MOVE.B	D5,Y_HALF_DIR

	bsr	WaitBlitter
	MOVE.W	#%000100111110000,BLTCON0
	TST.B	D5
	BEQ.S	.goUp
	MOVE.W	#%0000000000000010,BLTCON1	; BLTCON1 DESC MODE
	SUB.L	D1,A4			; POSITION Y
	ADD.L	#bpl*h-1,A3
	ADD.L	#bpl*h-1,A4
	BRA.S	.goBlit
	.goUp:
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1
	;SUB.B	#bpl,D1
	ADD.L	D1,A3			; POSITION Y
	.goBlit:

	MOVE.L	#$FFFFFFFF,BLTAFWM	; THEY'LL NEVER
	MOVE.W	BLIT_A_MOD,BLTAMOD	; BLTAMOD
	MOVE.W	BLIT_D_MOD,BLTDMOD	; BLTDMOD

	MOVE.L	A3,BLTAPTH		; BLTAPT SRC
	MOVE.L	A4,BLTDPTH		; DESC
	;MOVE.W	#h*64+w/16,BLTSIZE	; BLTSIZE
	MOVE.W	D4,BLTSIZE		; BLTSIZE
	; ## MAIN BLIT ####

	RTS

__SCROLL_X_FULL:
	; CHECK WORD!
	MOVE.B	X_FULL_DIR,D5
	MOVE.W	#1,D2			; FOR LOOP
	; ## TOP SLICE ##

	; ## TOP BLIT ####
	.blitLoop:
	MOVE.W	#%0000100111110000,D1
	MOVE.L	SCROLL_SRC,A3
	MOVE.L	SCROLL_DEST,A4
	ROL.W	#4,D1
	MOVE.W	X_FULL_SHIFT,D1
	ROR.W	#4,D1
	bsr	WaitBlitter
	MOVE.W	D1,BLTCON0		; BLTCON0
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1 BIT 12 DESC MODE
	MOVE.W	#0,BLTAMOD		; BLTAMOD
	MOVE.W	#0,BLTDMOD		; BLTDMOD

	CMP.B	#1,D5
	BEQ.B	.goBlit			; FOR LEFT
	ADD.L	#bpl*hblit-1,A3
	ADD.L	#bpl*hblit-1,A4
	MOVE.W	#%0000000000000010,BLTCON1	; BLTCON1 BIT 12 DESC MODE

	.goBlit:
	MOVE.L	A3,BLTAPTH		; BLTAPT
	MOVE.L	A4,BLTDPTH
	MOVE.W	#(122<<6)+%00010101,BLTSIZE	; BLTSIZE
	; ## TOP BLIT ####

	ADD.L	#bpl*hblit,SCROLL_DEST
	ADD.L	#bpl*hblit,SCROLL_SRC
	NEG.B	D5
	DBRA	D2,.blitLoop

	;ADD.W	#1,X_FULL_SHIFT
	RTS

__SCROLL_Y_FULL:
	MOVEQ	#0,D5			; CLR
	MOVE.B	Y_FULL_DIR,D5
	MOVEQ	#0,D1			; CLR
	MOVE.W	Y_FULL_SHIFT,D1
	MOVE.W	#1,D2			; FOR LOOP
	MOVE.L	SCROLL_SRC,A1
	MOVE.L	SCROLL_DEST,A2

	MOVEQ	#0,D4			; CLR
	MOVE.W	#h,D4
	ADD.B	#1,D1			; FIX FOR -1 VALUES
	SUB.W	D1,D4
	SUB.W	#1,D4			; FIX FOR -1 VALUES
	MULU.W	#64,D4
	ADD.W	#wblit/2,D4

	MULU.W	#bpl,D1

	.blitLoop:
	; ## MAIN BLIT ####
	MOVE.L	A1,A3
	MOVE.L	A2,A4

	bsr	WaitBlitter
	MOVE.W	#%0000100111110000,BLTCON0

	CMP.B	#1,D5
	BEQ.S	.goUp
	MOVE.W	#%0000000000000010,BLTCON1	; BLTCON1 DESC MODE
	SUB.L	D1,A3			; POSITION Y
	ADD.L	#bpl*h-wblit-1,A3
	ADD.L	#bpl*h-wblit-1,A4
	BRA.S	.goBlit
	.goUp:
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1
	ADD.L	D1,A3			; POSITION Y
	.goBlit:

	MOVE.W	#bpl-wblit,BLTAMOD		; BLTAMOD
	MOVE.W	#bpl-wblit,BLTDMOD		; BLTDMOD

	MOVE.L	A3,BLTAPTH		; BLTAPT SRC
	MOVE.L	A4,BLTDPTH		; DESC

	;MOVE.W	#h*64+wblit/2,BLTSIZE	; BLTSIZE
	MOVE.W	D4,BLTSIZE		; BLTSIZE

	ADD.L	#wblit,A1
	ADD.L	#wblit,A2

	NEG.B	D5
	DBRA	D2,.blitLoop
	; ## MAIN BLIT ####
	RTS

__SCROLL_X_PROGR:
	MOVE.B	X_PROGR_DIR,D5
	MOVE.W	#8,D2			; FOR LOOP
	MOVE.B	D2,D3			; FOR SHIFT
	SUB.B	#1,D2
	MOVE.B	X_PROGR_TYPE,D6
	MOVE.L	SCROLL_SRC,A1
	MOVE.L	SCROLL_DEST,A2

	CMP.B	#1,D6
	BNE.S	.blitloop
	MOVE.B	#1,D3

	.blitLoop:
	;ADD.W	#1,D3			; TO SPEED UP
	MOVE.L	A1,A3
	MOVE.L	A2,A4
	MOVE.W	#%0000100111110000,D1
	ROL.W	#4,D1
	MOVE.B	D3,D1
	ROR.W	#4,D1
	bsr	WaitBlitter
	MOVE.W	D1,BLTCON0		; BLTCON0
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1 BIT 12 DESC MODE

	CMP.B	#1,D5
	BEQ.B	.goBlit			; FOR LEFT
	ADD.L	#bpl*32-1,A3
	ADD.L	#bpl*32-1,A4
	MOVE.W	#%0000000000000010,BLTCON1	; BLTCON1 BIT 12 DESC MODE

	.goBlit:
	MOVE.L	#$FFFFFFFF,BLTAFWM	; THEY'LL NEVER
	MOVE.W	#0,BLTAMOD		; BLTAMOD
	MOVE.W	#0,BLTDMOD		; BLTDMOD
	MOVE.L	A3,BLTAPTH		; BLTAPT
	MOVE.L	A4,BLTDPTH
	MOVE.W	#32*64+w/16,BLTSIZE	; BLTSIZE

	ADD.L	#bpl*32,A1
	ADD.L	#bpl*32,A2
	ADD.B	D6,D3			; CAN BE 1 OR -1
	;NEG.B	D5
	DBRA	D2,.blitLoop

	RTS

__SCROLL_Y_PROGR:
	MOVEQ	#0,D1			; RESETS...
	MOVE.L	D1,D2
	MOVE.L	D1,D3
	MOVE.L	D1,D4
	MOVE.L	D1,D5
	MOVE.L	D1,D6
	MOVE.L	D1,D7

	MOVE.B	Y_PROGR_DIR,D5
	MOVE.W	#10,D2			; FOR LOOP
	MOVE.B	D2,D3			; FOR SHIFT
	SUB.B	#1,D2
	MOVE.B	Y_PROGR_TYPE,D6
	MOVE.L	#0,D7
	MOVE.B	#vbarwbpl*2,D7
	MOVE.L	SCROLL_SRC,A1
	MOVE.L	SCROLL_DEST,A2

	CMP.B	#1,D6
	BNE.S	.blitloop
	MOVE.B	#1,D3			; OF POLARITY + THEN START FROM 1
	.blitLoop:
	MOVE.W	#h,D4
	SUB.W	D3,D4
	MULU.W	#64,D4
	ADD.W	#vbarwbpl,D4		; #h*64+vbarwbpl,BLTSIZE	; BLTSIZE
	MOVE.W	#bpl,D1
	;ADD.W	#1,D3			; TO SPEED UP
	MULU.W	D3,D1

	MOVE.L	A1,A3
	MOVE.L	A2,A4

	bsr	WaitBlitter
	MOVE.W	#%0000100111110000,BLTCON0

	CMP.B	#1,D5
	BEQ.S	.goUp
	MOVE.W	#%0000000000000010,BLTCON1	; BLTCON1 DESC MODE
	SUB.L	D1,A3			; POSITION Y
	ADD.L	#bpl*h-1,A3
	ADD.L	#bpl*h-1,A4
	BRA.S	.goBlit
	.goUp:
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1
	ADD.L	D1,A3			; POSITION Y
	.goBlit:

	MOVE.W	#bpl-vbarwbpl*2,BLTAMOD	; BLTAMOD
	MOVE.W	#bpl-vbarwbpl*2,BLTDMOD	; BLTDMOD

	MOVE.L	A3,BLTAPTH		; BLTAPT SRC
	MOVE.L	A4,BLTDPTH		; DESC

	MOVE.W	D4,BLTSIZE		; BLTSIZE

	CMP.B	#1,D5
	BNE.S	.notDesc
	ADD.L	D7,A1
	ADD.L	D7,A2
	BRA.S	.skip
	.notDesc:
	SUB.L	D7,A1
	SUB.L	D7,A2
	.skip:

	ADD.B	D6,D3			; CAN BE 1 OR -1
	;NEG.B	D6
	DBRA	D2,.blitLoop

	RTS

__SCROLL_X_PROGR_SPLIT:
	MOVE.B	X_PROGR_DIR,D5
	MOVE.W	#13,D2			; FOR LOOP
	MOVE.B	D2,D3			; FOR SHIFT
	SUB.B	#1,D2
	MOVE.B	X_PROGR_TYPE,D6
	MOVE.L	SCROLL_SRC,A1
	MOVE.L	SCROLL_DEST,A2

	CMP.B	#1,D6
	BNE.S	.blitloop
	MOVE.B	#1,D3

	.blitLoop:
	MOVE.L	A1,A3
	MOVE.L	A2,A4
	MOVE.W	#%0000100111110000,D1
	ROL.W	#4,D1
	MOVE.B	D3,D1
	ROR.W	#4,D1
	bsr	WaitBlitter
	MOVE.W	D1,BLTCON0		; BLTCON0
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1
	MOVE.W	#0,BLTAMOD		; BLTAMOD
	MOVE.W	#0,BLTDMOD		; BLTDMOD

	CMP.B	#1,D5
	BEQ.B	.goBlit			; FOR LEFT
	ADD.L	#bpl*X_SPLIT_SLICE-1,A3
	ADD.L	#bpl*X_SPLIT_SLICE-1,A4
	MOVE.W	#%0000000000000010,BLTCON1	; BLTCON1 BIT 12 DESC MODE

	.goBlit:
	MOVE.L	A3,BLTAPTH		; BLTAPT
	MOVE.L	A4,BLTDPTH
	MOVE.W	#X_SPLIT_SLICE*64+w/16,BLTSIZE	; BLTSIZE

	ADD.L	#bpl*X_SPLIT_SLICE,A1
	ADD.L	#bpl*X_SPLIT_SLICE,A2
	ADD.B	D6,D3			; CAN BE 1 OR -1

	CMP.W	#8,D3
	BNE.S	.notHalfScreen
	NEG.B	D5
	.notHalfScreen:
	DBRA	D2,.blitLoop
	RTS

__SCROLL_X_PROGR_SPLITX2:
	MOVE.B	X_PROGR_DIR,D5
	MOVE.B	#-1,D6
	MOVE.W	#1,D4			; FOR LOOP
	MOVE.L	SCROLL_SRC,A1
	MOVE.L	SCROLL_DEST,A2

	.outerLoop:
	MOVE.W	#9,D2			; FOR LOOP
	MOVE.B	D2,D3			; FOR SHIFT
	SUB.B	#1,D2

	CMP.B	#1,D6
	BNE.S	.blitloop
	MOVE.B	#1,D3

	.blitLoop:
	MOVE.L	A1,A3
	MOVE.L	A2,A4
	MOVE.W	#%0000100111110000,D1
	ROL.W	#4,D1
	MOVE.B	D3,D1
	ROR.W	#4,D1
	bsr	WaitBlitter
	MOVE.W	D1,BLTCON0		; BLTCON0
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1 BIT 12 DESC MODE

	CMP.B	#1,D5
	BEQ.B	.goBlit			; FOR LEFT
	ADD.L	#bpl*X_SPLIT2X_SLICE-1,A3
	ADD.L	#bpl*X_SPLIT2X_SLICE-1,A4
	MOVE.W	#%0000000000000010,BLTCON1	; BLTCON1 BIT 12 DESC MODE
	.goBlit:

	MOVE.W	BLIT_A_MOD,BLTAMOD	; BLTAMOD
	MOVE.W	BLIT_D_MOD,BLTDMOD	; BLTDMOD
	MOVE.W	#$FFFF,BLTAFWM		; THEY'LL NEVER
	MOVE.W	#$FFFF,BLTALWM		; THEY'LL NEVER
	MOVE.L	A3,BLTAPTH		; BLTAPT
	MOVE.L	A4,BLTDPTH
	MOVE.W	#X_SPLIT2X_SLICE*64+w/16,BLTSIZE	; BLTSIZE

	ADD.L	#bpl*X_SPLIT2X_SLICE,A1
	ADD.L	#bpl*X_SPLIT2X_SLICE,A2
	ADD.B	D6,D3			; CAN BE 1 OR -1

	DBRA	D2,.blitLoop
	NEG.B	D5
	NEG.B	D6
	DBRA	D4,.outerLoop
	RTS

__SCROLL_X_1_4:
	MOVE.W	#%0000100111110000,D1
	MOVE.B	X_1_4_DIR,D5
	CMP.B	#1,D5
	BEQ.B	.mainBlit
	; ## MAIN BLIT ####

	MOVE.W	X_1_4_SHIFT,D4
	ADD.B	#1,D4			; FIX FOR -1 VALUES

	.mainBlit:
	MOVE.L	SCROLL_SRC,A3
	MOVE.L	SCROLL_DEST,A4
	ROL.W	#4,D1
	MOVE.B	D4,D1
	ROR.W	#4,D1
	bsr	WaitBlitter
	MOVE.W	D1,BLTCON0		; BLTCON0
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1 BIT 12 DESC MODE
	MOVE.W	#bpl/2-4,BLTAMOD		; BLTAMOD
	MOVE.W	#bpl/2-4,BLTDMOD		; BLTDMOD

	CMP.B	#1,D5
	BEQ.B	.goBlitter			; FOR LEFT
	ADD.L	#bpl*h/2-(bpl/2)+4-1,A3
	ADD.L	#bpl*h/2-(bpl/2)+4-1,A4
	MOVE.W	#%0000000000000010,BLTCON1	; BLTCON1 BIT 12 DESC MODE

	.goBlitter:
	MOVE.L	A3,BLTAPTH		; BLTAPT
	MOVE.L	A4,BLTDPTH
	MOVE.W	#(h/2)*64+(w/2/16)+2,BLTSIZE	; BLTSIZE
	; ## MAIN BLIT ####
	RTS

__SCROLL_Y_1_4:
	MOVE.L	#0,D1
	MOVE.W	Y_1_4_SHIFT,D1
	MULU.W	#bpl,D1

	; ## MAIN BLIT ####
	MOVE.L	SCROLL_SRC,A3
	MOVE.L	SCROLL_DEST,A4
	MOVE.B	Y_1_4_DIR,D5
	bsr	WaitBlitter
	MOVE.W	#%0000100111110000,BLTCON0
	CMP.B	#1,D5
	BEQ.S	.goUp
	MOVE.W	#%0000000000000010,BLTCON1	; BLTCON1 DESC MODE
	SUB.L	D1,A3			; POSITION Y
	ADD.L	#bpl*(h-32)/2-(bpl/2)-1,A3
	ADD.L	#bpl*(h-32)/2-(bpl/2)-1,A4
	BRA.S	.goBlit
	.goUp:
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1
	ADD.L	D1,A3			; POSITION Y
	.goBlit:

	MOVE.W	#bpl/2,BLTAMOD		; BLTAMOD
	MOVE.W	#bpl/2,BLTDMOD		; BLTDMOD

	MOVE.L	A3,BLTAPTH		; BLTAPT SRC
	MOVE.L	A4,BLTDPTH		; DESC
	MOVE.W	#(h+32)/2*64+w/2/16,BLTSIZE	; BLTSIZE
	; ## MAIN BLIT ####
	RTS

__SCROLL_X_Y_1_4:
	MOVEQ	#0,D4			; RESET
	MOVE.L	D4,D5			; RESET
	MOVE.L	D4,D6			; RESET
	MOVE.L	D4,D7			; RESET
	MOVE.W	#%0000100111110000,D1

	MOVE.W	X_1_4_SHIFT,D4
	MOVE.W	Y_1_4_SHIFT,D6		; VSHIFT
	ADD.B	#1,D4			; FIX FOR -1 VALUES
	ADD.B	#1,D6			; FIX FOR -1 VALUES
	MULU.W	#bpl,D6
	MOVE.L	SCROLL_SRC,A3
	MOVE.L	SCROLL_DEST,A4

	ROL.W	#4,D1
	MOVE.B	D4,D1
	ROR.W	#4,D1
	bsr	WaitBlitter

	MOVE.W	BLIT_A_MOD,BLTAMOD	; BLTAMOD
	MOVE.W	BLIT_D_MOD,BLTDMOD	; BLTDMOD
	MOVE.W	D1,BLTCON0		; BLTCON0
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1

	MOVE.B	X_1_4_DIR,D5
	CMP.B	#1,D5
	BEQ.S	.goLeft			; FOR LEFT
	ADD.L	#bpl*h/2-(bpl/2)-1,A3
	ADD.L	#bpl*h/2-(bpl/2)-1,A4
	MOVE.W	#%0000000000000010,BLTCON1	; BLTCON1 BIT 12 DESC MODE
	SUB.L	D6,A3			; POSITION Y
	BRA.S	.goBlit

	.goLeft:
	ADD.L	D6,A3			; POSITION Y
	.goBlit:
	MOVE.L	A3,BLTAPTH		; BLTAPT
	MOVE.L	A4,BLTDPTH
	MOVE.W	D2,BLTSIZE		; BLTSIZE
	;MOVE.W	#h*64+w/16,BLTSIZE	; BLTSIZE
	; ## MAIN BLIT ####
	RTS

__SCROLL_X_PLASMA:
	MOVEQ	#0,D4			; RESET
	MOVE.L	D4,D5			; RESET
	MOVE.L	D4,D6			; RESET
	MOVE.L	D4,D7			; RESET
	MOVE.W	#%0000100111110000,D1
	MOVE.W	X_1_4_SHIFT,D4
	MOVE.W	Y_1_4_SHIFT,D6		; VSHIFT
	ADD.B	#1,D4			; FIX FOR -1 VALUES
	ADD.B	#1,D6			; FIX FOR -1 VALUES
	MULU.W	#bpl,D6
	MOVE.L	SCROLL_SRC,A3
	MOVE.L	SCROLL_DEST,A4

	ROL.W	#4,D1
	MOVE.B	D4,D1
	ROR.W	#4,D1
	bsr	WaitBlitter
	MOVE.W	D7,BLTAMOD		; D7 HERE FOR CRAZY FX!!
	MOVE.W	#bpl/2,BLTDMOD		; BLTDMOD
	;MOVE.W	BLIT_A_MOD,BLTAMOD	; BLTAMOD
	;MOVE.W	BLIT_D_MOD,BLTDMOD	; BLTDMOD
	MOVE.W	D1,BLTCON0		; BLTCON0
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1

	MOVE.B	X_1_4_DIR,D5
	CMP.B	#1,D5
	BEQ.S	.goLeft			; FOR LEFT

	ADD.L	#bpl*h-(bpl/2)-1,A3
	ADD.L	#bpl*h-(bpl/2)-1,A4
	;ADD.L	#bpl*h-1,A3
	;ADD.L	#bpl*h-1,A4
	MOVE.W	#%0000000000000010,BLTCON1	; BLTCON1 BIT 12 DESC MODE
	SUB.L	D6,A3			; POSITION Y
	BRA.S	.goBlit

	.goLeft:
	ADD.L	D6,A3			; POSITION Y
	.goBlit:
	MOVE.L	A3,BLTAPTH		; BLTAPT
	MOVE.L	A4,BLTDPTH
	MOVE.W	#h*64+w/2/16,BLTSIZE	; BLTSIZE
	;MOVE.W	#h*64+w/16,BLTSIZE	; BLTSIZE
	; ## MAIN BLIT ####
	RTS

__X_SHIFT_LFO:
	MOVEQ	#0,D0			; RESETS...
	MOVE.L	D0,D1			; RESETS...
	MOVE.B	X_SHIFT_LFO,D1
	MOVE.W	X_FULL_SHIFT,D0

	CMP.B	X_SHIFT_LFO_MIN,D0
	BHI.S	.changeDir
	CMP.B	X_SHIFT_LFO_MAX,D0	; TO DO - PARAMETER
	BLS.S	.sameDir

	.changeDir:
	NEG.B	D1
	
	TST.B	X_LFO_INVERT_DIR
	BEQ.S	.sameDir
	MOVE.B	X_FULL_DIR,D5
	NEG.B	D5
	MOVE.B	D5,X_FULL_DIR
	MOVE.B	X_PROGR_DIR,D5
	NEG.B	D5
	MOVE.B	D5,X_PROGR_DIR
	MOVE.B	X_PROGR_TYPE,D5
	NEG.B	D5
	MOVE.B	D5,X_PROGR_TYPE
	.sameDir:
	ADD.B	D1,D0
	MOVE.B	D1,X_SHIFT_LFO
	MOVE.W	D0,X_FULL_SHIFT
	ADD.B	#1,D0			; FIX FOR -1 VALUES
	MOVE.W	D0,X_1_4_SHIFT
	RTS

__Y_SHIFT_LFO:
	MOVEQ	#0,D0			; RESETS...
	MOVE.L	D0,D1			; RESETS...
	MOVE.B	Y_SHIFT_LFO,D1
	MOVE.W	Y_FULL_SHIFT,D0

	CMP.B	Y_SHIFT_LFO_MIN,D0
	BHI.S	.changeDir
	CMP.B	Y_SHIFT_LFO_MAX,D0	; TO DO - PARAMETER
	BLS.S	.sameDir

	.changeDir:
	NEG.B	D1
	
	TST.B	Y_LFO_INVERT_DIR
	BEQ.S	.sameDir
	MOVE.B	Y_FULL_DIR,D5
	NEG.B	D5
	MOVE.B	D5,Y_FULL_DIR
	MOVE.B	Y_PROGR_DIR,D5
	NEG.B	D5
	MOVE.B	D5,Y_PROGR_DIR
	MOVE.B	Y_PROGR_TYPE,D5
	NEG.B	D5
	MOVE.B	D5,Y_PROGR_TYPE
	.sameDir:
	ADD.B	D1,D0
	MOVE.B	D1,Y_SHIFT_LFO
	MOVE.W	D0,Y_FULL_SHIFT
	ADD.B	#1,D0			; FIX FOR -1 VALUES
	MOVE.W	D0,Y_1_4_SHIFT
	RTS

__Y_LFO_EASYING:
	MOVE.W	Y_EASYING_INDX,D0
	LEA	Y_EASYING_TBL,A0
	MOVE.B	(A0,D0),Y_EASYING
	CLR.L	D1
	MOVE.B	Y_EASYING,D1
	ADDQ.W	#1,D0
	AND.W	#$3F,D0
	MOVE.W	D0,Y_EASYING_INDX
	RTS

__X_LFO_EASYING:
	MOVE.W	X_EASYING_INDX,D0
	LEA	X_EASYING_TBL,A0
	MOVE.B	(A0,D0),X_EASYING
	CLR.L	D1
	MOVE.B	X_EASYING,D1
	ADDQ.W	#1,D0
	AND.W	#$3F,D0
	MOVE.W	D0,X_EASYING_INDX
	RTS

__BLK_1_4_TEST:
	MOVE.B	#3,X_SHIFT_LFO_MIN
	MOVE.B	#15,X_SHIFT_LFO_MAX
	MOVE.B	#4,Y_SHIFT_LFO_MIN
	MOVE.B	#10,Y_SHIFT_LFO_MAX

	TST.B	FRAME_STROBE
	BNE.W	.oddFrame
	MOVE.B	#1,FRAME_STROBE

	;## GLITCH ##
	MOVE.L	PAT_GEAR,PATTERN_ACTUAL
	MOVE.L	DITHERPLANE,SCROLL_SRC
	MOVE.L	BGPLANE0,SCROLL_DEST
	BSR.W	__BLIT_DITHER_TILE
	;## GLITCH ##

	BSR.W	__X_SHIFT_LFO
	BSR.W	__Y_LFO_EASYING
	MOVE.B	Y_EASYING,Y_1_4_SHIFT	; VSHIFT

	MOVE.B	#1,X_1_4_DIR
	MOVE.W	#bpl/2-2,BLIT_A_MOD	; D7 HERE FOR CRAZY FX!!
	MOVE.W	#bpl/2-2,BLIT_D_MOD	; BLTDMOD
	MOVE.W	#h/2*64+(w/2/16)+1,D2	; BLITSIZE NOT DESC
	
	MOVE.L	BGPLANE0,SCROLL_SRC
	MOVE.L	BGPLANE0,SCROLL_DEST
	BSR.W	__SCROLL_X_Y_1_4
	MOVE.L	BGPLANE1,SCROLL_SRC
	MOVE.L	BGPLANE1,SCROLL_DEST
	BSR.W	__SCROLL_X_Y_1_4

	MOVE.B	#-1,X_1_4_DIR
	MOVE.W	#bpl/2-2,BLIT_A_MOD	; D7 HERE FOR CRAZY FX!!
	MOVE.W	#bpl/2-2,BLIT_D_MOD	; BLTDMOD
	MOVE.W	#h/2*64+(w/2/16)+1,D2	; BLITSIZE NOT DESC

	MOVE.L	BGPLANE0,SCROLL_SRC
	MOVE.L	BGPLANE0,SCROLL_DEST
	ADD.L	#bpl*h/2-(bpl/2),SCROLL_SRC
	ADD.L	#bpl*h/2-(bpl/2),SCROLL_DEST
	BSR.W	__SCROLL_X_Y_1_4

	MOVE.L	BGPLANE1,SCROLL_SRC
	MOVE.L	BGPLANE1,SCROLL_DEST
	ADD.L	#bpl*h/2-(bpl/2),SCROLL_SRC
	ADD.L	#bpl*h/2-(bpl/2),SCROLL_DEST
	BSR.W	__SCROLL_X_Y_1_4

	BRA.W	.evenFrame
	.oddFrame:
	MOVE.B	#0,FRAME_STROBE

	;## GLITCH ##
	MOVE.L	PAT_GEAR,PATTERN_ACTUAL
	MOVE.L	DITHERPLANE,SCROLL_SRC
	MOVE.L	BGPLANE1,SCROLL_DEST
	BSR.W	__BLIT_DITHER_TILE
	;## GLITCH ##

	BSR.W	__Y_SHIFT_LFO
	BSR.W	__X_LFO_EASYING
	MOVE.B	X_EASYING,X_1_4_SHIFT	; VSHIFT

	MOVE.B	#1,X_1_4_DIR
	MOVE.W	#bpl/2,BLIT_A_MOD		; D7 HERE FOR CRAZY FX!!
	MOVE.W	#bpl/2,BLIT_D_MOD		; BLTDMOD
	MOVE.W	#h/2*64+(w/2/16),D2	; BLITSIZE NOT DESC

	MOVE.L	BGPLANE0,SCROLL_SRC
	MOVE.L	BGPLANE0,SCROLL_DEST
	ADD.L	#bpl/2,SCROLL_SRC
	ADD.L	#bpl/2,SCROLL_DEST
	BSR.W	__SCROLL_X_Y_1_4
	MOVE.L	BGPLANE1,SCROLL_SRC
	MOVE.L	BGPLANE1,SCROLL_DEST
	ADD.L	#bpl/2,SCROLL_SRC
	ADD.L	#bpl/2,SCROLL_DEST
	BSR.W	__SCROLL_X_Y_1_4

	MOVE.B	#-1,X_1_4_DIR
	MOVE.W	#bpl/2,BLIT_A_MOD		; D7 HERE FOR CRAZY FX!!
	MOVE.W	#bpl/2,BLIT_D_MOD		; BLTDMOD
	MOVE.W	#h/2*64+(w/2/16),D2	; BLITSIZE NOT DESC

	MOVE.L	BGPLANE0,SCROLL_SRC
	MOVE.L	BGPLANE0,SCROLL_DEST
	ADD.L	#bpl*(h/2),SCROLL_SRC
	ADD.L	#bpl*(h/2),SCROLL_DEST
	BSR.W	__SCROLL_X_Y_1_4
	MOVE.L	BGPLANE1,SCROLL_SRC
	MOVE.L	BGPLANE1,SCROLL_DEST
	ADD.L	#bpl*(h/2),SCROLL_SRC
	ADD.L	#bpl*(h/2),SCROLL_DEST
	BSR.W	__SCROLL_X_Y_1_4

	.evenFrame:
	RTS

__BLK_PLASMA:
	MOVE.B	#9,X_SHIFT_LFO_MAX
	MOVE.B	#8,Y_SHIFT_LFO_MAX

	BSR.W	__Y_SHIFT_LFO
	BSR.W	__X_SHIFT_LFO

	MOVE.B	X_FULL_DIR,X_1_4_DIR
	MOVE.L	BGPLANE0,SCROLL_SRC
	MOVE.L	BGPLANE0,SCROLL_DEST
	BSR.W	__SCROLL_X_PLASMA
	MOVE.L	BGPLANE1,SCROLL_SRC
	MOVE.L	BGPLANE1,SCROLL_DEST
	BSR.W	__SCROLL_X_PLASMA

	;MOVE.B	#3,Y_SHIFT_LFO_MIN
	;MOVE.B	#1,X_LFO_INVERT_DIR

	MOVE.L	BGPLANE0,SCROLL_SRC
	MOVE.L	BGPLANE0,SCROLL_DEST
	ADD.L	#bpl/2,SCROLL_SRC
	ADD.L	#bpl/2,SCROLL_DEST
	BSR.W	__SCROLL_X_PLASMA
	MOVE.L	BGPLANE1,SCROLL_SRC
	MOVE.L	BGPLANE1,SCROLL_DEST
	ADD.L	#bpl/2,SCROLL_SRC
	ADD.L	#bpl/2,SCROLL_DEST
	BSR.W	__SCROLL_X_PLASMA
	;MOVE.B	#-1,X_1_4_DIR
	RTS

__BLK_TEST:
	TST.B	FRAME_STROBE
	BNE.W	.oddFrame
	MOVE.B	#1,FRAME_STROBE
	MOVE.W	#2,Y_1_4_SHIFT

	MOVE.L	BGPLANE0,SCROLL_SRC
	MOVE.L	BGPLANE0,SCROLL_DEST
	BSR.W	__SCROLL_X_PROGR_SPLIT

	ADD.L	#bpl/2,SCROLL_SRC
	ADD.L	#bpl/2,SCROLL_DEST

	MOVE.B	#-1,Y_1_4_DIR
	BSR.W	__SCROLL_Y_1_4

	ADD.L	#bpl*h/2-(bpl/2)-bpl,SCROLL_SRC
	ADD.L	#bpl*h/2-(bpl/2)-bpl,SCROLL_DEST
	
	MOVE.B	#1,Y_1_4_DIR
	BSR.W	__SCROLL_Y_1_4

	MOVE.L	BGPLANE1,SCROLL_SRC
	MOVE.L	BGPLANE1,SCROLL_DEST
	BSR.W	__SCROLL_X_PROGR_SPLIT

	ADD.L	#bpl/2,SCROLL_SRC
	ADD.L	#bpl/2,SCROLL_DEST

	MOVE.B	#-1,Y_1_4_DIR
	BSR.W	__SCROLL_Y_1_4

	ADD.L	#bpl*h/2-(bpl/2)-bpl,SCROLL_SRC
	ADD.L	#bpl*h/2-(bpl/2)-bpl,SCROLL_DEST
	
	MOVE.B	#1,Y_1_4_DIR
	BSR.W	__SCROLL_Y_1_4

	BRA.W	.evenFrame
	.oddFrame:
	MOVE.B	#0,FRAME_STROBE

	MOVE.W	#1,X_1_4_SHIFT

	MOVE.L	BGPLANE0,SCROLL_SRC
	MOVE.L	BGPLANE0,SCROLL_DEST
	BSR.W	__SCROLL_Y_PROGR

	MOVE.B	#-1,X_1_4_DIR
	BSR.W	__SCROLL_X_1_4

	ADD.L	#bpl*h/2-(bpl/2),SCROLL_SRC
	ADD.L	#bpl*h/2-(bpl/2),SCROLL_DEST
	
	MOVE.B	#1,X_1_4_DIR
	BSR.W	__SCROLL_X_1_4

	MOVE.L	BGPLANE1,SCROLL_SRC
	MOVE.L	BGPLANE1,SCROLL_DEST
	BSR.W	__SCROLL_Y_PROGR

	MOVE.B	#-1,X_1_4_DIR
	BSR.W	__SCROLL_X_1_4

	ADD.L	#bpl*h/2-(bpl/2),SCROLL_SRC
	ADD.L	#bpl*h/2-(bpl/2),SCROLL_DEST
	
	MOVE.B	#1,X_1_4_DIR
	BSR.W	__SCROLL_X_1_4

	;MOVE.L	GLITCHGOOD,SCROLL_SRC
	;BSR.W	__BLIT_GLITCH_TILE
	;ADD.L	#2,GLITCHGOOD
	;BSR.W	__BLIT_GLITCH_TILE
	;MOVE.L	DITHERPLANE,SCROLL_SRC
	;BSR.W	__BLIT_GLITCH_TILE

	.evenFrame:
	RTS

__BLK_TEST_Y:
	TST.B	FRAME_STROBE
	BNE.W	.oddFrame
	MOVE.B	#1,FRAME_STROBE

	;## HORIZONTAL GLITCH #########
	MOVE.W	#3,BLIT_A_MOD
	MOVE.W	#16*64+w/2/16,BLIT_SIZE

	MOVE.L	BGPLANE0,SCROLL_DEST
	ADD.L	#bpl*(h/2)-8,SCROLL_DEST
	BSR.W	__BLIT_GLITCH_BAND

	MOVE.L	BGPLANE1,SCROLL_DEST
	ADD.L	#bpl*(h/2)-8,SCROLL_DEST

	SUB.L	#2,SCROLL_DEST
	BSR.W	__BLIT_GLITCH_BAND
	MOVE.W	#0,BLIT_A_MOD
	;## HORIZONTAL GLITCH #########

	MOVE.B	#15,Y_SHIFT_LFO_MAX
	MOVE.B	#12,Y_SHIFT_LFO_MIN
	MOVE.B	#1,Y_LFO_INVERT_DIR
	BSR.W	__Y_SHIFT_LFO

	MOVE.L	BGPLANE0,SCROLL_SRC
	MOVE.L	BGPLANE0,SCROLL_DEST

	ADD.L	#bpl/2,SCROLL_SRC
	ADD.L	#bpl/2,SCROLL_DEST

	MOVE.B	#1,Y_1_4_DIR
	BSR.W	__SCROLL_Y_1_4

	ADD.L	#bpl*(h+32)/2-(bpl/2)-bpl,SCROLL_SRC
	ADD.L	#bpl*(h+32)/2-(bpl/2)-bpl,SCROLL_DEST
	
	MOVE.B	#-1,Y_1_4_DIR
	BSR.W	__SCROLL_Y_1_4

	MOVE.L	BGPLANE1,SCROLL_SRC
	MOVE.L	BGPLANE1,SCROLL_DEST

	ADD.L	#bpl/2,SCROLL_SRC
	ADD.L	#bpl/2,SCROLL_DEST

	MOVE.B	#1,Y_1_4_DIR
	BSR.W	__SCROLL_Y_1_4

	ADD.L	#bpl*(h+32)/2-(bpl/2)-bpl,SCROLL_SRC
	ADD.L	#bpl*(h+32)/2-(bpl/2)-bpl,SCROLL_DEST
	
	MOVE.B	#-1,Y_1_4_DIR
	BSR.W	__SCROLL_Y_1_4
	BRA.W	.evenFrame

	.oddFrame:
	MOVE.B	#0,FRAME_STROBE

	;## VERTICAL GLITCH ###########
	MOVE.L	BGPLANE0,SCROLL_DEST
	ADD.L	#bpl/2,SCROLL_DEST
	BSR.W	__BLIT_GLITCH_SLICE

	MOVE.L	BGPLANE1,SCROLL_DEST
	ADD.L	#bpl/2,SCROLL_DEST
	SUB.L	#2,SCROLL_DEST
	BSR.W	__BLIT_GLITCH_SLICE
	;## VERTICAL GLITCH ###########

	MOVE.B	#15,X_SHIFT_LFO_MAX
	MOVE.B	#12,X_SHIFT_LFO_MIN
	MOVE.B	#1,X_LFO_INVERT_DIR
	BSR.W	__X_SHIFT_LFO

	MOVE.L	BGPLANE0,SCROLL_SRC
	MOVE.L	BGPLANE0,SCROLL_DEST

	MOVE.B	#-1,X_1_4_DIR
	BSR.W	__SCROLL_X_1_4

	ADD.L	#bpl*h/2-(bpl/2)-4,SCROLL_SRC
	ADD.L	#bpl*h/2-(bpl/2)-4,SCROLL_DEST
	
	MOVE.B	#1,X_1_4_DIR
	BSR.W	__SCROLL_X_1_4

	MOVE.L	BGPLANE1,SCROLL_SRC
	MOVE.L	BGPLANE1,SCROLL_DEST
	MOVE.B	#-1,X_1_4_DIR
	BSR.W	__SCROLL_X_1_4

	ADD.L	#bpl*h/2-(bpl/2)-4,SCROLL_SRC
	ADD.L	#bpl*h/2-(bpl/2)-4,SCROLL_DEST
	
	MOVE.B	#1,X_1_4_DIR
	BSR.W	__SCROLL_X_1_4

	;MOVE.L	GLITCHGOOD,SCROLL_SRC
	;BSR.W	__BLIT_GLITCH_TILE
	;ADD.L	#2,GLITCHGOOD
	;BSR.W	__BLIT_GLITCH_TILE
	;MOVE.L	DITHERPLANE,SCROLL_SRC
	;BSR.W	__BLIT_GLITCH_TILE
	.evenFrame:

	RTS

__BLK_RESET:
	MOVE.L	DITHERPLANE,SCROLL_SRC
	MOVE.L	BGPLANE1,SCROLL_DEST
	MOVE.B	#1,X_DIR
	BSR.W	__SCROLL_X
	MOVE.W	#2,X_SHIFT
	MOVE.B	#0,X_DIR
	BSR.W	__SCROLL_X
	MOVE.L	GLITCHRESET,SCROLL_SRC
	MOVE.L	BGPLANE0,SCROLL_DEST
	MOVE.B	#1,X_DIR
	BSR.W	__SCROLL_X
	MOVE.W	#2,X_SHIFT
	MOVE.B	#0,X_DIR
	BSR.W	__SCROLL_X
	RTS

__BLK_SCREEN:
	;MOVE.W	#2,Y_HALF_SHIFT
	MOVE.W	MED_TRK_3_COUNT,Y_HALF_SHIFT
	MOVE.L	BGPLANE0,SCROLL_SRC
	MOVE.L	BGPLANE0,SCROLL_DEST

	MOVE.B	#-1,Y_HALF_DIR
	BSR.W	__SCROLL_Y_HALF

	MOVE.L	BGPLANE1,SCROLL_SRC
	MOVE.L	BGPLANE1,SCROLL_DEST

	MOVE.B	#-1,Y_HALF_DIR
	BSR.W	__SCROLL_Y_HALF

	RTS

__BLK_SCREEN2:
	MOVE.L	BGPLANE0,SCROLL_DEST
	ADD.L	#bpl*(h-2),SCROLL_DEST

	BSR.W	__BLIT_GLITCH_BAND

	MOVE.L	BGPLANE1,SCROLL_DEST
	ADD.L	#bpl*(h-2),SCROLL_DEST

	;MOVE.B	#3,X_SHIFT_LFO_MAX
	;BSR.W	__X_SHIFT_LFO
	SUB.L	#2,SCROLL_DEST
	BSR.W	__BLIT_GLITCH_BAND

	MOVE.W	AUDIOCHLEV_0,BLIT_A_MOD
	MOVE.W	AUDIOCHLEV_0,BLIT_D_MOD

	BSR.W	__BLK_SCREEN
	RTS

__BLK_BEGIN:
	MOVE.W	#2*64+w/16,BLIT_SIZE
	MOVE.W	#-1,BLIT_A_MOD
	MOVE.W	#0,BLIT_D_MOD

	MOVE.L	BGPLANE0,SCROLL_DEST
	ADD.L	#bpl*(h-2),SCROLL_DEST
	BSR.W	__BLIT_GLITCH_BAND

	MOVE.L	BGPLANE1,SCROLL_DEST
	ADD.L	#bpl*(h-2),SCROLL_DEST
	BSR.W	__BLIT_GLITCH_BAND

	;BRA.S	.skip
	;## CODE TO CHECK FOR SPECIFIC INTSRUMENT+NOTE
	;MOVE.W	MED_TRK_3_INST,D0		; 1 WORD TO TAKE 2 BYTES FROM CH0
	;TST.B	D0			; CH0 INST 07 NOTE F-3 = SNARE	; 0000011100011110
	;BNE.S	.noNote
	;CLR.W	$100			; DEBUG | w 0 100 2
	;MOVE.W	MED_TRK_3_COUNT,Y_HALF_SHIFT
	;BRA.S	.skip
	;.noNote:

	MOVE.W	#2,Y_HALF_SHIFT
	MOVE.W	AUDIOCHLEV_0,BLIT_A_MOD
	MOVE.W	AUDIOCHLEV_0,BLIT_D_MOD

	MOVE.B	#-1,Y_HALF_DIR
	MOVE.L	BGPLANE0,SCROLL_SRC
	MOVE.L	BGPLANE0,SCROLL_DEST
	BSR.W	__SCROLL_Y_HALF

	MOVE.B	#-1,Y_HALF_DIR
	MOVE.L	BGPLANE1,SCROLL_SRC
	MOVE.L	BGPLANE1,SCROLL_DEST
	BSR.W	__SCROLL_Y_HALF
	RTS

__BLK_BEGIN3_PRE:
	TST.W	AUDIOCHLEV_1
	BEQ.S	__BLK_BEGIN3
	LEA	COLORSEQ1,A1
	MOVE.W	AUDIOCHLEV_1,D1	; FLASH KICK
	;LSR.W	#1,D1
	LSL.W	#2,D1
	MOVE.L	(A1,D1.W),COPPER\.Palette
	;BRA.S	__BLK_BEGIN3
	;RTS
__BLK_BEGIN3:
	MOVE.W	#2*64+w/16,BLIT_SIZE
	MOVE.W	#-1,BLIT_A_MOD
	MOVE.W	#0,BLIT_D_MOD

	MOVE.L	BGPLANE0,SCROLL_DEST
	ADD.L	#bpl*(h-2),SCROLL_DEST
	BSR.W	__BLIT_GLITCH_BAND

	MOVE.L	BGPLANE1,SCROLL_DEST
	ADD.L	#bpl*(h-2),SCROLL_DEST
	BSR.W	__BLIT_GLITCH_BAND

	MOVE.W	AUDIOCHLEV_0,D1
	LSR.W	#1,D1
	MOVE.W	D1,Y_FULL_SHIFT
	LSR.W	#1,D1
	TST.W	D1
	BNE.W	__BLK_1

	MOVE.B	X_PROGR_TYPE,D2
	MOVE.B	X_PROGR_DIR,D5
	MOVE.B	X_FULL_DIR,D3
	NEG.B	D2
	MOVE.B	D2,X_FULL_DIR
	MOVE.B	D3,X_PROGR_TYPE
	MOVE.B	D5,X_PROGR_DIR

	MOVE.W	#2,Y_HALF_SHIFT
	MOVE.W	AUDIOCHLEV_2,BLIT_A_MOD
	MOVE.W	AUDIOCHLEV_2,BLIT_D_MOD

	MOVE.B	#-1,Y_HALF_DIR
	MOVE.L	BGPLANE0,SCROLL_SRC
	MOVE.L	BGPLANE0,SCROLL_DEST
	BSR.W	__SCROLL_Y_HALF

	MOVE.B	#-1,Y_HALF_DIR
	MOVE.L	BGPLANE1,SCROLL_SRC
	MOVE.L	BGPLANE1,SCROLL_DEST
	BSR.W	__SCROLL_Y_HALF
	RTS

__BLK_KICK_RESET:
	MOVE.W	AUDIOCHLEV_1,D0
	CMP.W	#$F,D0
	BNE.S	.noKick
	MOVE.L	DITHERPLANE,SCROLL_SRC
	MOVE.L	BGPLANE0,SCROLL_DEST
	MOVE.B	#1,X_DIR
	BSR.W	__SCROLL_X
	MOVE.B	#0,X_DIR
	BSR.W	__SCROLL_X

	MOVE.L	GLITCHRESET,SCROLL_SRC
	MOVE.L	BGPLANE1,SCROLL_DEST
	MOVE.B	#1,X_DIR
	BSR.W	__SCROLL_X
	MOVE.B	#0,X_DIR
	BSR.W	__SCROLL_X
	BRA.S	.yesKick
	.noKick:
	BSR.W	__BLK_0
	.yesKick:
	RTS

__BLK_TEST_RESET:
	MOVE.W	MED_SONG_POS,D0
	CMP.W	MED_SEQ_ACTUAL,D0
	BEQ.S	.noNewBlock
	MOVE.W	D0,MED_SEQ_ACTUAL
	;## DO THINGS AT FIRST FRAME ##
	MOVE.W	$DFF006,$DFF180		; show rastertime left down to $12c
	;## DO THINGS AT FIRST FRAME ##
	;BRA.S	.yesNewBlock
	.noNewBlock:
	;BSR.W	__BLK_0
	.yesNewBlock:
	RTS

__BLK_SCREEN3:
	MOVE.W	#2,Y_HALF_SHIFT
	MOVE.L	DITHERPLANE,SCROLL_SRC
	MOVE.L	BGPLANE0,SCROLL_DEST

	MOVE.B	#-1,Y_HALF_DIR
	BSR.W	__SCROLL_Y_HALF

	MOVE.L	DITHERPLANE,SCROLL_SRC
	MOVE.L	BGPLANE1,SCROLL_DEST
	ADD.L	#2,SCROLL_DEST
	MOVE.B	#-1,Y_HALF_DIR
	BSR.W	__SCROLL_Y_HALF
	SUB.L	#bpl,DITHERPLANE

	MOVE.W	#0,BLIT_A_MOD

	BSR.W	__Y_SHIFT_LFO
	RTS

__BLK_GLITCH:
	MOVE.L	PAT_CHAOS,PATTERN_ACTUAL
	MOVE.L	DITHERPLANE,SCROLL_SRC
	MOVE.L	BGPLANE0,SCROLL_DEST
	BSR.W	__BLIT_GLITCH_TILE
	;BSR.W	__BLIT_DITHER_TILE
	;MOVE.L	DITHERPLANE,SCROLL_SRC
	MOVE.L	BGPLANE1,SCROLL_DEST
	BSR.W	__BLIT_GLITCH_TILE
	;BSR.W	__BLIT_DITHER_TILE
	RTS

__BLK_0_PRE:
	MOVE.W	MED_BLOCK_LINE,D0
	CMP.W	#5,D0
	BGE.S	__BLK_0
	LEA	COLORSEQ1,A1
	MOVE.W	AUDIOCHLEV_1,D1	; FLASH KICK
	;CLR.W	$100		; DEBUG | w 0 100 2
	;LSR.W	#1,D1
	LSL.W	#2,D1
	MOVE.L	(A1,D1.W),COPPER\.Palette
	;BRA.S	__BLK_0
	;RTS
__BLK_0:
	TST.W	MED_STEPSEQ_POS
	BNE.S	.noChangeDir
	MOVE.W	AUDIOCHLEV_0,D1
	CMP.W	#$F,D1
	BNE.S	.noChangeDir
	MOVE.B	X_PROGR_DIR,D5
	NEG.B	D5
	MOVE.B	D5,X_PROGR_DIR

	.noChangeDir:
	TST.B	FRAME_STROBE
	BNE.W	.oddFrame
	MOVE.B	#1,FRAME_STROBE

	;## VERTICAL GLITCH ###########
	MOVE.L	BGPLANE0,SCROLL_DEST
	ADD.L	#bpl/2,SCROLL_DEST
	BSR.W	__BLIT_GLITCH_SLICE

	MOVE.L	BGPLANE1,SCROLL_DEST
	ADD.L	#bpl/2,SCROLL_DEST

	SUB.L	#2,SCROLL_DEST
	BSR.W	__BLIT_GLITCH_SLICE
	;## VERTICAL GLITCH ###########

	MOVE.L	BGPLANE0,SCROLL_SRC
	MOVE.L	BGPLANE0,SCROLL_DEST
	;BSR.W	__SCROLL_Y_FULL
	BSR.W	__SCROLL_X_PROGR_SPLITX2

	MOVE.L	BGPLANE1,SCROLL_SRC
	MOVE.L	BGPLANE1,SCROLL_DEST
	;BSR.W	__SCROLL_Y_FULL
	BSR.W	__SCROLL_X_PROGR_SPLITX2

	MOVE.W	#0,BLIT_A_MOD
	MOVE.B	#1,Y_LFO_INVERT_DIR
	BSR.W	__Y_SHIFT_LFO

	BRA.W	.evenFrame

	.oddFrame:
	MOVE.B	#0,FRAME_STROBE

	MOVE.L	BGPLANE0,SCROLL_SRC
	MOVE.L	BGPLANE0,SCROLL_DEST
	BSR.W	__SCROLL_Y_FULL
	;BSR.W	__SCROLL_X_PROGR_SPLIT

	MOVE.L	BGPLANE1,SCROLL_SRC
	MOVE.L	BGPLANE1,SCROLL_DEST
	BSR.W	__SCROLL_Y_FULL
	;BSR.W	__SCROLL_X_PROGR_SPLIT

	;MOVE.B	#0,X_LFO_INVERT_DIR
	BSR.W	__X_SHIFT_LFO

	;BSR.W	__BLIT_GLITCH_TILE
	;ADD.L	#2,SCROLL_SRC
	;BSR.W	__BLIT_GLITCH_TILE

	;MOVE.L	BGPLANE0,SCROLL_DEST
	;ADD.L	#bpl*(h-2),SCROLL_DEST

	;BSR.W	__BLIT_GLITCH_BAND
	;MOVE.L	BGPLANE1,SCROLL_DEST
	;ADD.L	#bpl*(h-2),SCROLL_DEST

	;SUB.L	#2,SCROLL_DEST
	;BSR.W	__BLIT_GLITCH_BAND
	.evenFrame:

	RTS

__BLK_1:
	;BSR.W	__Y_SHIFT_LFO
	MOVE.B	X_FULL_DIR,D5
	NEG.B	D5
	MOVE.B	D5,X_FULL_DIR
	MOVE.B	X_PROGR_DIR,D5
	NEG.B	D5
	MOVE.B	D5,X_PROGR_DIR
	MOVE.B	X_PROGR_TYPE,D5
	NEG.B	D5
	MOVE.B	D5,X_PROGR_TYPE
	;MOVE.W	AUDIOCHLEV_0,Y_FULL_SHIFT

	MOVE.L	BGPLANE0,SCROLL_SRC
	MOVE.L	BGPLANE0,SCROLL_DEST
	;BSR.W	__BLIT_GLITCH_TILE
	BSR.W	__SCROLL_Y_FULL
	BSR.W	__SCROLL_X_PROGR

	MOVE.L	BGPLANE1,SCROLL_SRC
	MOVE.L	BGPLANE1,SCROLL_DEST
	;BSR.W	__BLIT_GLITCH_TILE
	BSR.W	__SCROLL_Y_FULL
	BSR.W	__SCROLL_X_PROGR
	MOVE.B	X_FULL_DIR,D5
	NEG.B	D5
	MOVE.B	D5,X_FULL_DIR
	MOVE.B	X_PROGR_DIR,D5
	NEG.B	D5
	MOVE.B	D5,X_PROGR_DIR
	MOVE.B	X_PROGR_TYPE,D5
	NEG.B	D5
	MOVE.B	D5,X_PROGR_TYPE
	RTS

__BLK_2:
	MOVE.B	#0,Y_LFO_INVERT_DIR
	BSR.W	__Y_SHIFT_LFO

	MOVE.L	BGPLANE0,SCROLL_SRC
	MOVE.L	BGPLANE0,SCROLL_DEST
	BSR.W	__SCROLL_X_PROGR

	MOVE.L	BGPLANE0,SCROLL_SRC
	MOVE.L	BGPLANE0,SCROLL_DEST
	BSR.W	__SCROLL_Y_PROGR

	MOVE.L	BGPLANE1,SCROLL_SRC
	MOVE.L	BGPLANE1,SCROLL_DEST
	BSR.W	__SCROLL_X_PROGR

	MOVE.L	BGPLANE1,SCROLL_SRC
	MOVE.L	BGPLANE1,SCROLL_DEST
	BSR.W	__SCROLL_Y_PROGR
	BSR.W	__Y_SHIFT_LFO
	;MOVE.W	#1,P61_LAST_POS
	RTS

__BLK_3:
	MOVE.W	#2,X_SHIFT
	MOVE.W	#2,Y_SHIFT
	MOVE.B	#1,X_DIR
	MOVE.B	#1,Y_DIR
	MOVE.L	BGPLANE0,SCROLL_SRC
	MOVE.L	BGPLANE0,SCROLL_DEST
	;BSR.W	__SCROLL_X
	BSR.W	__SCROLL_Y
	MOVE.B	#-1,Y_DIR
	MOVE.L	BGPLANE0,SCROLL_SRC
	MOVE.L	BGPLANE0,SCROLL_DEST
	;BSR.W	__SCROLL_X		; SHIFT !!
	BSR.W	__SCROLL_Y		; SHIFT !!

	;MOVE.W	#0,P61_LAST_POS
	RTS

__BLK_5:
	MOVE.B	#1,Y_LFO_INVERT_DIR
	BSR.W	__Y_SHIFT_LFO

	MOVE.L	BGPLANE0,SCROLL_SRC
	MOVE.L	BGPLANE0,SCROLL_DEST
	;BSR.W	__SCROLL_Y_FULL
	BSR.W	__SCROLL_X_PROGR_SPLITX2

	MOVE.L	BGPLANE1,SCROLL_SRC
	MOVE.L	BGPLANE1,SCROLL_DEST
	;BSR.W	__SCROLL_Y_FULL
	BSR.W	__SCROLL_X_PROGR_SPLITX2

	BSR.W	__BLIT_GLITCH_TILE
	BSR.W	__BLIT_GLITCH_TILE
	MOVE.L	DITHERPLANE,SCROLL_SRC
	BSR.W	__BLIT_DITHER_TILE
	RTS

__BLK_END:

	RTS

__COPCOL_EDIT:
	LEA	COPPER\.Palette,A0
	ADD.L	COPCOL_REGISTER,A0
	MOVE.W	COPCOL_ADDER,D2	; COLOR ADDER
	; TODO - CHECK IF COLORE REGISTER
	; **** JOYSTICK TEST ****
	MOVEM.W	$DFF00C,D0	; FROM EAB
	ANDI.W	#$0303,D0
	MOVE.W	D0,D1
	ADD.W	D1,D1
	ADDI.W	#$0101,D0
	ADD.W	D1,D0
	BTST	#$07,$BFE001	; FIRE
	BNE.W	.notFire

	BTST	#9,D0		; 9 LEFT
	BEQ.S	.notLeft
	TST.W	JOYDIR_STATUS
	BNE.W	.SkipJoyActions
	MOVE.W	#1,JOYDIR_STATUS
	ROL.W	#4,D2
	CMPI.W	#$1000,D2
	BNE.S	.notLeft
	MOVE.W	#$0001,D2
	.notLeft:
	BTST	#1,D0		; 1 RIGHT
	BEQ.S	.notRight
	TST.W	JOYDIR_STATUS
	BNE.W	.SkipJoyActions
	MOVE.W	#1,JOYDIR_STATUS
	ROR.W	#4,D2
	CMPI.W	#$1000,D2
	BNE.S	.notRight
	MOVE.W	#$0100,D2
	.notRight:
	BTST	#2,D0		; 10 UP
	BEQ.S	.notDown
	TST.W	JOYDIR_STATUS
	BNE.W	.SkipJoyActions
	MOVE.W	#1,JOYDIR_STATUS
	SUB.W	D2,2(A0)
	.notDown:
	BTST	#10,D0		; 2 DOWN
	BEQ.S	.notUp
	TST.W	JOYDIR_STATUS
	BNE.W	.SkipJoyActions
	MOVE.W	#1,JOYDIR_STATUS
	ADD.W	D2,2(A0)
	.notUp:

	MOVE.W	D2,COPCOL_ADDER	; COLOR ADDER
	BRA.S	.SkipJoyActions

	.notFire:
	BTST	#9,D0		; 9 LEFT
	BEQ.S	.notLeft1
	TST.W	JOYDIR_STATUS
	BNE.W	.SkipJoyActions
	MOVE.W	#1,JOYDIR_STATUS
	TST.L	COPCOL_REGISTER
	BEQ.S	.notLeft1		; NO DECREASE IF 0...
	SUB.L	#4,COPCOL_REGISTER
	MOVE.W	#$0100,D2		; COLOR ADDER
	.notLeft1:
	BTST	#1,D0		; 1 RIGHT
	BEQ.S	.notRight1
	TST.W	JOYDIR_STATUS
	BNE.W	.SkipJoyActions
	MOVE.W	#1,JOYDIR_STATUS
	MOVE.W	#2,D3		; HOW MANY COLORS
	LSL.W	#bpls-1,D3
	MULU.W	#4,D3
	SUB.W	#4,D3
	MOVE.L	COPCOL_REGISTER,D4
	CMP.L	COPCOL_REGISTER,D3
	BEQ.S	.notRight1	; NO INCREASE IF LAST
	ADD.L	#4,COPCOL_REGISTER
	MOVE.W	#$0100,D2		; COLOR ADDER
	.notRight1:

	MOVE.W	D2,COPCOL_ADDER	; COLOR ADDER

	.SkipJoyActions:
	CMPI.W	#$00000101,D0
	BNE.S	.DontResetStatus
	MOVE.W	#0,JOYDIR_STATUS
	.DontResetStatus:
	; **** JOYSTICK TEST ****
	RTS

;********** Fastmem Data **********
TIMELINE:		;DC.L __BLK_0,__BLK_1,__BLK_0,__BLK_1
		DC.L __BLK_BEGIN,__BLK_BEGIN,__BLK_BEGIN,__BLK_BEGIN3		; BLOCK 0/1 ARE... PLAYED TWICE? :|
		DC.L __BLK_BEGIN3,__BLK_BEGIN3,__BLK_BEGIN3,__BLK_BEGIN3_PRE
		;DC.L __BLK_BEGIN3,__BLK_BEGIN3,__BLK_BEGIN3,__BLK_BEGIN3_PRE
		;DC.L __BLK_TEST_RESET,__BLK_TEST_RESET,__BLK_TEST_RESET,__BLK_TEST_RESET
		DC.L __BLK_0_PRE,__BLK_0,__BLK_0,__BLK_0
		DC.L __BLK_0,__BLK_0,__BLK_0,__BLK_0
		DC.L __BLK_GLITCH,__BLK_GLITCH,__BLK_GLITCH,__BLK_GLITCH,__BLK_GLITCH,__BLK_GLITCH
		DC.L __BLK_TEST_Y,__BLK_SCREEN2,__BLK_SCREEN2,__BLK_SCREEN2,__BLK_SCREEN2
		DC.L __BLK_BEGIN,__BLK_SCREEN2,__BLK_BEGIN,__BLK_SCREEN2
		DC.L __BLK_TEST_Y,__BLK_BEGIN,__BLK_TEST_Y,__BLK_BEGIN
		DC.L __BLK_RESET,__BLK_TEST,__BLK_RESET,__BLK_TEST
		DC.L __BLK_1_4_TEST,__BLK_1_4_TEST,__BLK_1_4_TEST,__BLK_1_4_TEST
		DC.L __BLK_0,__BLK_1,__BLK_0,__BLK_1
		DC.L __BLK_RESET,__BLK_PLASMA,__BLK_RESET,__BLK_PLASMA
		DC.L __BLK_SCREEN2,__BLK_TEST,__BLK_SCREEN2,__BLK_TEST
		DC.L __BLK_TEST_Y,__BLK_PLASMA,__BLK_TEST_Y,__BLK_PLASMA
		DC.L __BLK_TEST,__BLK_TEST,__BLK_TEST,__BLK_TEST
		DC.L __BLK_SCREEN,__BLK_PLASMA,__BLK_SCREEN,__BLK_PLASMA
		DC.L __BLK_SCREEN3,__BLK_PLASMA,__BLK_SCREEN3,__BLK_PLASMA
		DC.L __BLK_END

MED_SONG_POS:	DC.W 0		; Well the position...
MED_BLOCK_LINE:	DC.W 0		; Line of block
AUDIOCHLEV_0:	DC.W 0
AUDIOCHLEV_1:	DC.W 0
AUDIOCHLEV_2:	DC.W 0
AUDIOCHLEV_3:	DC.W 0
MED_SEQ_ACTUAL:	DC.W 0

SCROLL_DEST:	DC.L 0
SCROLL_SRC:	DC.L 0

X_SHIFT_LFO:	DC.B 1
X_SHIFT_LFO_MIN:	DC.B -1
X_SHIFT_LFO_MAX:	DC.B 15
X_LFO_INVERT_DIR:	DC.B 0

Y_SHIFT_LFO:	DC.B -1
Y_SHIFT_LFO_MIN:	DC.B -1
Y_SHIFT_LFO_MAX:	DC.B 15
Y_LFO_INVERT_DIR:	DC.B 0

X_DIR:		DC.B 1		; -1=LEFT 1=RIGHT
Y_DIR:		DC.B -1		; -1=LEFT 1=RIGHT
X_SHIFT:		DC.W 0
Y_SHIFT:		DC.W 1

X_HALF_DIR:	DC.B 0
Y_HALF_DIR:	DC.B 0
X_HALF_SHIFT:	DC.W 0
Y_HALF_SHIFT:	DC.W 0

X_FULL_DIR:	DC.B 1
Y_FULL_DIR:	DC.B 1
X_FULL_SHIFT:	DC.W 0
Y_FULL_SHIFT:	DC.W 0

X_PROGR_DIR:	DC.B -1
Y_PROGR_DIR:	DC.B 1
X_PROGR_TYPE:	DC.B -1
Y_PROGR_TYPE:	DC.B 1		; SOLO POSITIVO

X_1_4_DIR:	DC.B 1		; -1=LEFT 1=RIGHT
Y_1_4_DIR:	DC.B -1		; -1=LEFT 1=RIGHT
X_1_4_SHIFT:	DC.W 1
Y_1_4_SHIFT:	DC.W 10

FRAME_STROBE:	DC.B 0,0

TEXTINDEX:	DC.W 0
FRAMESINDEX:	DC.W 4
GLITCHDATA:	DC.L MED_MODULE
GLITCHGOOD:	DC.L MED_MODULE+bpl*h*8
GLITCHRESET:	DC.L MED_MODULE+bpl*h*7

GLITCHDESTTABLE:	DC.L PLANE0,PLANE1,PLANE0,PLANE1,PLANE0,PLANE1,PLANE0,PLANE1
GLITCH_INDEX:	DC.W 0

Y_EASYING_INDX:	DC.W 0
Y_EASYING_TBL:	DC.B 1,1,1,1,2,1,2,2,3,3,2,3,3,4,3,4,4,5,5,5,6,5,6,6,7,6,7,7,8,8,9,8,10
		DC.B 9,10,9,8,7,7,6,6,6,5,5,5,5,4,4,4,4,3,3,3,2,3,3,2,2,2,2,2,1,1,1,1,0
Y_EASYING:	DC.B 0,0

X_EASYING_INDX:	DC.W 12
X_EASYING_TBL:	DC.B 1,1,2,2,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,11,10,9,9,8,8,7,7,6,6
		DC.B 5,5,5,4,4,3,3,2,2,2,2,1,2,1,2,1,2,1,2,1,1,0,1,0,1,0,1,0,1,0,1,0,0
X_EASYING:	DC.B 0,0

BPLxMOD_INDEX:	DC.W 0
BPLxMOD_TABLE:	DC.W 1,3,4,1,12,5,4,7,1,4,3,1,0,2,6,10,7,3,2,1,5,4,1,8,7,6,5,1,8,0,1,8,0,3,1,7,17,4,30,3,6,1

BLIT_Y_MASK:	DC.W $FFFF
BLIT_X_MASK:	DC.W $FFFF
BLIT_A_MOD:	DC.W 0
BLIT_D_MOD:	DC.W 0
BLIT_SIZE:	DC.W 2*64+w/2/16

COPCOL_REGISTER:	DC.L 0
COPCOL_VALUE:	DC.W 0
COPCOL_INDEX:	DC.W 0
COPCOL_ADDER:	DC.W $0100
JOYFIRE_STATUS:	DC.W 0
JOYDIR_STATUS:	DC.W 0

PAT_CHAOS:	DC.L PATTERN1
PAT_GEAR:		DC.L PATTERN2
PATTERN_ACTUAL:	DC.L PATTERN2

BG1:
BGPLANE0:		DC.L PLANE0
BGPLANE1:		DC.L PLANE1
;BGPLANE2:	DC.L PLANE2	; DUMMY :)
BGPLANE3:		DC.L PLANE3	; FOR 3D
;BGPLANE4:	DC.L PLANE4	; FOR 5 BITPLANES?
DITHERPLANERESET:	DC.L BUFFERDITHER
DITHERPLANE:	DC.L BUFFERDITHER

COLORSEQ1:	DC.W $0180,$0333,$0180,$0344,$0180,$0444,$0180,$0454,$0180,$0455,$0180,$0556,$0180,$0656,$0180,$0666
		DC.W $0180,$0676,$0180,$0776,$0180,$0777,$0180,$0788,$0180,$0898,$0180,$0999,$0180,$0ABA,$0180,$0EEE

KONEY:
	DC.L %10001011111011111011111011011000
	DC.L %10010010001010001010000001110000
	DC.L %11100011001011001011111000100000
	DC.L %11010011001011001011000000110000
	DC.L %11001011111011001011111000110000

FONT:		DC.L 0,0		; SPACE CHAR
		;INCBIN "scroller_font.raw",0
		INCBIN "nintendo_font.raw",0
		EVEN
TEXT:		INCLUDE "textscroller.i"
		INCLUDE "med/MED_PlayRoutine.i"
	;#######################################################
	SECTION	ChipData,DATA_C		;declared data that must be in chipmem
MED_MODULE:	INCBIN "med/KETAMUSkOLAR_2020FIX2.med"
_chipzero:	DC.L 0

_MED_MODULE:
PATTERN1:		INCBIN "pattern_chaos.raw"
PATTERN2:		INCBIN "pattern_gear2.raw"

COPPER:
	DC.W $1FC,0	; Slow fetch mode, remove if AGA demo.
	DC.W $8E,$2C81	; 238h display window top, left | DIWSTRT - 11.393
	DC.W $90,$2CC1	; and bottom, right.	| DIWSTOP - 11.457
	DC.W $92,$38	; Standard bitplane dma fetch start
	DC.W $94,$D0	; and stop for standard screen.
	DC.W $106,$0C00	; (AGA compat. if any Dual Playf. mode)
	DC.W $108,0	; BPL1MOD	 Bitplane modulo (odd planes)
	DC.W $10A,0	; BPL2MOD Bitplane modulo (even planes)
	DC.W $102,0	; SCROLL REGISTER (AND PLAYFIELD PRI)

	.Palette:
	;DC.W $0180,$0111,$0182,$0222,$0184,$0333,$0186,$0444
	;DC.W $0188,$0555,$018A,$00A0,$018C,$0667,$018E,$0777

	DC.W $0180,$0333,$0182,$0222,$0184,$0433,$0186,$0444
	DC.W $0188,$0555,$018A,$0021,$018C,$0667,$018E,$0777

	DC.W $0190,$0888,$0192,$0888,$0194,$0999,$0196,$0AAA
	DC.W $0198,$0BBB,$019A,$0CCC,$019C,$0DDD,$019E,$0FFF
	DC.W $01A0,$0555,$01A2,$0444,$01A4,$0FF0,$01A6,$0EEF
	DC.W $01A8,$0BBC,$01AA,$099A,$01AC,$0F0F,$01AE,$00FF
	DC.W $01B0,$0888,$01B2,$0999,$01B4,$0AAA,$01B6,$0BBB
	DC.W $01B8,$0CCC,$01BA,$0DDD,$01BC,$0EEE,$01BE,$0FFF

	.SpritePointers:
	DC.W $120,0,$122,0	; 0
	DC.W $124,0,$126,0	; 1
	DC.W $128,0,$12A,0	; 2
	DC.W $12C,0,$12E,0	; 3
	DC.W $130,0,$132,0	; 4
	DC.W $134,0,$136,0	; 5
	DC.W $138,0,$13A,0	; 6
	DC.W $13C,0,$13E,0	; 7

	.BplPtrs:
	DC.W $E0,0
	DC.W $E2,0
	DC.W $E4,0
	DC.W $E6,0
	DC.W $E8,0
	DC.W $EA,0
	DC.W $EC,0
	DC.W $EE,0
	DC.W $F0,0
	DC.W $F2,0
	DC.W $F4,0
	DC.W $F6,0		;full 6 ptrs, in case you increase bpls
	;DC.W $100,bpls*$1000+$200	;enable bitplanes
	DC.W $100,%0100001000000000	;enable bitplanes

	.COPPERWAITS:
	DC.W $3801,$FF00		; ## START ##
	.BplPtrs2:
	DC.W $E0,0
	DC.W $E2,0
	DC.W $E4,0
	DC.W $E6,0
	DC.W $E8,0
	DC.W $EA,0
	DC.W $EC,0
	DC.W $EE,0

	DC.W $FFDF,$FFFE		; allow VPOS>$ff
	DC.W $2101,$FF00		; ## START ##
	.BplPtrs3:
	DC.W $E0,0
	DC.W $E2,0
	DC.W $E4,0
	DC.W $E6,0
	DC.W $E8,0
	DC.W $EA,0
	DC.W $EC,0
	DC.W $EE,0

	DC.W $2201,$FF00		; ## START ##
	DC.W $100,%1100001000000000	 ;MED RES FROM HERE

	DC.W $FFFF,$FFFE	;magic value to end copperlist
_COPPER:

	SECTION ChipBuffers,BSS_C	;BSS doesn't count toward exe size

BLEED0:		DS.B 32*bpl
PLANE0:		DS.B h*bpl
BLEED1:		DS.B 32*bpl
PLANE1:		DS.B h*bpl
BLEED2:		DS.B 32*bpl
;PLANE2:		DS.B h*bpl	; DUMMY :)
PLANE3:		DS.B h*bpl	; FOR 3D
BLEED3:		DS.B 32*bpl
;PLANE4:		DS.B h*bpl	; FOR 5 BITPLANES?
BUFFERDITHER:	DS.B h*bpl	; two buffers
HEADER:		DS.B 12*bpl
FOOTER:		DS.B 11*bpl*2	; HI-RES
FOOTER_END:	DS.B 0	; ??
END