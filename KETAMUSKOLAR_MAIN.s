;*** MiniStartup by Photon ***
	INCDIR	"NAS:AMIGA/CODE/ketamuskolar_amiga/"
	SECTION	"Code",CODE
	INCLUDE	"custom-registers.i"
	INCLUDE	"PhotonsMiniWrapper1.04.s"
	INCLUDE	"med/med_feature_control.i"	; MED CFGs
;********** Constants **********
w		EQU 320		; screen width
h		EQU 234		; screen height
bpls		EQU 5		; depth
bpl		EQU w/16*2	; byte-width of 1 bitplane line (40bytes)
bwid		EQU bpls*bpl	; byte-width of 1 pixel line (all bpls)
hband		EQU 10		; lines reserved for textscroller
hblit		EQU h/2		; -hband	; size of blitter op without textscroller
wblit		EQU w/2/16*2
vbarwbpl		EQU w/10/16
X_SPLIT2X_SLICE	EQU 13
TXT_FRMSKIP 	EQU 4
MARGINX		EQU w/2
MARGINY		EQU h/2
TrigShift		EQU 7
PXLSIDE		EQU 16
Z_Shift		EQU PXLSIDE*5/2	; 5x5 obj
;*************
VarTimesTrig MACRO				; 3 = 1 * 2, where 2 is cos(Angle)^(TrigShift*2) or sin(Angle)^(TrigShift*2)
	move.l \1,\3
	muls \2,\3
	asr.l #TrigShift,\3			; left >>= TrigShift
	asr.l #TrigShift,\3
	ENDM
;********** Demo **********			; Demo-specific non-startup code below.
Demo:	;MOVE.W	#72,MED_START_POS		; skip to pos# after first block
	Code:				; a4=VBR, a6=Custom Registers Base addr
	;*--- init ---*
	MOVE.L	#VBint,$6C(A4)
	MOVE.W	#%1110000000100000,INTENA
	MOVE.W	#%1000001111000000,DMACON	; BIT10=BLIT NASTY
	BSR	WaitBlitter
	BSR.W	__POINT_SPRITES	; #### Point sprites
	;########################
	LEA	COPPER\.BplPtrs,A1
	LEA	HEADER,A0
	BSR.W	PokePtrs
	BSR.W	PokePtrs
	BSR.W	PokePtrs
	BSR.W	PokePtrs
	BSR.W	PokePtrs
	;########################
	LEA	COPPER\.BplPtrs2,A1
	LEA	GRADIENTPLANENEG,A0
	BSR.W	PokePtrs
	MOVE.L	#PLANE1,A0
	BSR.W	PokePtrs
	MOVE.L	#PLANE0,A0
	BSR.W	PokePtrs
	LEA	PLANE3,A0
	SUB.L	#bpl+2,A0
	BSR.W	PokePtrs
	LEA	PLANE3,A0
	;LEA	40(A0),A0		; OPT
	BSR.W	PokePtrs
	;########################
	LEA	COPPER\.BplPtrs3,A1
	LEA	FOOTER,A0
	BSR.W	PokePtrs
	BSR.W	PokePtrs
	BSR.W	PokePtrs
	BSR.W	PokePtrs
	BSR.W	PokePtrs
	;*--- start copper ---*
	MOVE.L	#COPPER,COP1LC

	; #### CPU INTENSIVE TASKS BEFORE STARTING MUSIC
	MOVE.L	#$00000000,BLTCON0
	MOVE.W	BLIT_Y_MASK,BLTAFWM		; THEY'LL NEVER
	MOVE.W	BLIT_X_MASK,BLTALWM		; CHANGE

	MOVE.L	#HEADER,A4
	BSR.W	__DBLBMP

	BSR.W	WaitEOF			; TO SLOW DOWN :)

	;## SUPER FAST LINES DRAWING ##
	LEA	FOOTER,A0
	SUB.L	#bpl,A0			; =END OF HEADER :)
	MOVE.W	#20-1,D0
	.drawLine:
	MOVE.L	#$FFFFFFFF,(A0)+
	MOVEM.L	D0-D1,-(SP)
	BSR.W	WaitEOF			; TO SLOW DOWN :)
	MOVEM.L	(SP)+,D0-D1
	DBRA	D0,.drawLine
	;## SUPER FAST LINES DRAWING ##

	MOVE.L	#BG_DITHER,A3		; FILLS A PLANE
	MOVE.L	#GRADIENTPLANE,A4		; FILLS A PLANE
	;MOVEQ	#0,D3			; CONTROLS NEGATIVE
	BSR.W	__GRADIENT_PLANE		; WITH DITHERING

	MOVE.L	#BG_DITHER,A3		; FILLS A PLANE
	MOVE.L	#GRADIENTPLANENEG,A4	; FILLS A PLANE
	MOVEQ	#0,D3			; CONTROLS NEGATIVE
	BSR.W	__GRADIENT_PLANE		; WITH DITHERING

	BSR.W	WaitEOF			; TO SLOW DOWN :)

	MOVE.L	#DITHERPLANE,A4		; FILLS A PLANE
	MOVE.W	#0,D0
	BSR.W	__DITHER_PLANE		; WITH DITHERING

	BSR.W	WaitEOF			; TO SLOW DOWN :)

	MOVE.L	GLITCHRESET,A3
	MOVE.L	#PLANE1,A4
	MOVE.W	#1,D0
	BSR.W	__DITHER_PLANE		; WITH DITHERING

	.skip:
	; ** POINTS TO COORDS **
	MOVE.W	#255,D1
	LEA	VECT_COORDS,A2
	.calcuCoords:
	MOVE.W	(A2),D0
	MULU.W	#PXLSIDE,D0
	MULU.W	#Z_Shift,D0		; PRECALCULATED ZSHIFT
	MOVE.W	D0,(A2)+
	DBRA	D1,.calcuCoords
	; ** POINTS TO COORDS **

	; ## PRECALCULATE BPL OFFSETS ##
	MOVE.L	#0,D0
	LEA	BPL_PRECALC,A2
	.loop:
	MOVE.W	D0,(A2)
	ADD.W	#bpl,D0
	CMP.W	#bpl*h,(A2)+
	BLO.S	.loop
	; ## PRECALCULATE BPL OFFSETS ##

	; ## BENCHMARCK ##
	BSR.W	WaitEOF
	CLR.L	D0
	.wait:
	ADD.L	#1,D0
	MOVE.L	VPOSR,D1
	LSR.L	#1,D1
	LSR.W	#7,D1
	CMP.W	#h/2,D1
	BNE.S	.wait
	; #### CPU INTENSIVE TASKS BEFORE STARTING MUSIC

	BSR.W	WaitEOF			; TO SLOW DOWN :)
	JSR	_startmusic
;********************  main loop  ********************
MainLoop:
	BSR.W	__SET_MED_VALUES
	BSR.W	__FILLANDSCROLLTXT

	SONG_BLOCKS_EVENTS:
	;* FOR TIMED EVENTS ON BLOCK ****
	MOVE.W	MED_SONG_POS,D5
	LSL.W	#2,D5			; CALCULATES OFFSET (OPTIMIZED)
	LEA	TIMELINE,A3
	MOVE.L	(A3,D5),A4		; THANKS HEDGEHOG!!
	JSR	(A4)			; EXECUTE SUBROUTINE BLOCK#
	;*--- main loop end ---*

	BSR.S	WaitRasterCopper		; is below the Display Window.

	;BTST	#6,$BFE001
	BTST	#2,$DFF016		; POTINP - RMB pressed?
	BNE.W	MainLoop			; then loop
	;*--- exit ---*
	MOVEM.L	D0-A6,-(SP)
	JSR	_endmusic
	MOVEM.L	(SP)+,D0-A6
	RTS

;********** CORE Routines **********
WaitRasterCopper:
	;MOVE.W	#$0FF0,$DFF180		; show rastertime left down to $12c
	BTST	#4,INTENAR+1
	BNE.S	WaitRasterCopper
	;MOVE.W	#$0F00,$DFF180		; show rastertime left down to $12c
	MOVE.W	#$8010,INTENA
	RTS

PokePtrs:					; Generic, poke ptrs into copper list
	MOVE.L	A0,D2
	SWAP	D2
	MOVE.W	D2,2(A1)			; high word of address
	MOVE.W	A0,6(A1)			; low word of address
	LEA	8(A1),A1			; OPTIMIZED
	RTS

VBint:					; Blank template VERTB interrupt
	movem.l d0/a6,-(sp)			; Save used registers
	lea $dff000,a6
	btst #5,$1f(a6)			; check if it's our vertb int.
	beq.s .notvb
	moveq #$20,d0			; poll irq bit
	move.w d0,$9c(a6)
	move.w d0,$9c(a6)
	.notvb:	
	movem.l (sp)+,d0/a6			; restore
	rte

__WIPE_PLANE:				; a1=screen destination address to clear
	LEA	$910(A1),A1		; OPT of ADD.L #h/4*bpl,A1
	;LEA	((h/4*bpl),A1),A1		; INLINE SYNTAX!
	BSR	WaitBlitter
	MOVE.W	#$0,BLTDMOD		; Init modulo Sou. A
	MOVE.L	#$01000000,BLTCON0		; set operation type in BLTCON0/1
	MOVE.L	A1,BLTDPTH		; destination address
	;MOVE.W	#$8400,DMACON		; BLIT NASTY ENABLE
	MOVE.W	#h/2*64+w/16,BLTSIZE	; blitter operation size
	;BSR	WaitBlitter		; A1200 NEEDS THIS...
	;MOVE.W	#$400,DMACON		; BLIT NASTY DISABLE
	RTS

__BLIT_VECTORS:
	; **** ROTATION VALUES ****
	;ADDI.L	#2,VECT_PTR	; MESSES COORDZ
	;MOVE.W	V_ANGLE,D2

	; **** ZOOM VALUES ****
	MOVE.W	Z_POS,D4
	MOVE.W	#Z_Shift,D7	; CENTER
	ADD.W	D7,D4
	MOVE.W	D4,Z_FACT
	MOVE.W	D7,D2		; OPTIMIZING mulu.w #40,d1
	LSL.W	#5,D7
	LSL.W	#3,D2
	ADD.W	D2,D7
	;MULU.W	D7,D7
	DIVU.W	D4,D7
	MOVE.W	D7,CENTER
	; **** END VALUES ****

	MOVE.W	V_MAX_VECTORS,D7	; VALUE FROM INITIAL BENCHMARK
	MOVE.W	#$0,XY_INIT
	MOVE.L	VECT_PTR,A2
	
	BSR	WaitBlitter
	MOVE.L	#$FFFFFFFF,BLTAFWM	; BLTAFWM/BLTALWM = $FFFF
	MOVE.W	#$8000,BLTADAT	; BLTADAT = $8000
	MOVE.W	#bpl,BLTCMOD	; BLTCMOD = 40
	MOVE.W	#bpl,BLTDMOD	; BLTDMOD = 40
	MOVE.W	BLIT_PATT,BLTBDAT	; BLTBDAT = pattern della linea!

	.fetchCoordz:
	;MOVEM.L	D7,-(SP)
	MOVE.L	D7,A3

	MOVEQ.L	#$0,D0		; QUICKEST RESET
	MOVE.L	D0,D1		; QUICKEST RESET
	MOVE.W	(A2)+,D0		; X1
	MOVE.W	(A2)+,D1		; Y1

	; NO NEED TO OPT BECAUSE FIRST AND LAST = 0,0!!
	; **** OPTIMIZATION!! ****
	MOVEM.W	XY_INIT,D7
	TST.W	D7
	BNE.S	.notFirstLoop
	MOVE.W	#1,XY_INIT
	; **** Z-POSITION ****
	DIVU.W	D4,D0
	DIVU.W	D4,D1
	SUB.W	CENTER,D0
	SUB.W	CENTER,D1
	MOVE.W	D0,X_TEMP
	MOVE.W	D1,Y_TEMP
	.notFirstLoop:
	; **** OPTIMIZATION!! ****

	MOVE.W	X_TEMP,D0
	MOVE.W	Y_TEMP,D1

	; **** ROTATING??? ****
	MOVE.W	V_ANGLE,D7
	LEA.L	SinTbl(PC),A6
	MOVE.W	(A6,D7),D3
	LEA.L	CosTbl(PC),A6
	MOVE.W	(A6,D7),D2

	BSR.W	__ROTATE

	;MOVEM.L	D0-D1,-(SP)
	MOVE.L	D0,A0
	MOVE.L	D1,A1

	MOVEQ.L	#0,D0		; QUICKEST RESET
	MOVE.L	D0,D1		; QUICKEST RESET
	MOVE.W	(A2)+,D0		; X2
	MOVE.W	(A2)+,D1		; Y2
	; **** Z-POSITION ****
	;MULU.W	#Z_Shift,D0	; PRECALCULATED
	;MULU.W	#Z_Shift,D1	; PRECALCULATED
	DIVU.W	D4,D0
	DIVU.W	D4,D1
	SUB.W	CENTER,D0
	SUB.W	CENTER,D1
	MOVE.W	D0,X_TEMP
	MOVE.W	D1,Y_TEMP

	BSR.W	__ROTATE

	MOVE.W	D0,D2		; X2
	MOVE.W	D1,D3		; Y2

	;MOVEM.L	(SP)+,D0-D1
	MOVE.L	A0,D0
	MOVE.L	A1,D1

	; ## GLITCH ##
	ROL.B	#1,D3
	EXG.L	D0,D3
	ROL.B	#1,D1
	LSL.L	#2,D2
	; ## GLITCH ##

	MOVE.L	A4,A6
	ADDI.W	#MARGINX,D0
	ADDI.W	#MARGINY,D1
	ADDI.W	#MARGINX,D2
	ADDI.W	#MARGINY,D3

	BSR.S	Drawline

	;MOVEM.L	(SP)+,D7
	MOVE.L	A3,D7
	DBRA	D7,.fetchCoordz
	;*--- main loop end ---*
	RTS

Drawline:	; * scelta ottante
	sub.w	d0,d2		; D2=X2-X1
	bmi.s	.DRAW4		; se negativo salta, altrimenti D2=DiffX
	sub.w	d1,d3		; D3=Y2-Y1
	bmi.s	.DRAW2		; se negativo salta, altrimenti D3=DiffY
	cmp.w	d3,d2		; confronta DiffX e DiffY
	bmi.s	.DRAW1		; se D2<D3 salta..
				; .. altrimenti D3=DY e D2=DX
	moveq	#$10,d5		; codice ottante
	bra.s	.DRAWL
	.DRAW1:
	exg.l	d2,d3		; scambia D2 e D3, in modo che D3=DY e D2=DX
	moveq	#0,d5		; codice ottante
	bra.s	.DRAWL
	.DRAW2:
	neg.w	d3		; rende D3 positivo
	cmp.w	d3,d2		; confronta DiffX e DiffY
	bmi.s	.DRAW3		; se D2<D3 salta..
				; .. altrimenti D3=DY e D2=DX
	moveq	#$18,d5		; codice ottante
	bra.s	.DRAWL
	.DRAW3:
	exg.l	d2,d3		; scambia D2 e D3, in modo che D3=DY e D2=DX
	moveq	#$04,d5		; codice ottante
	bra.s	.DRAWL
	.DRAW4:
	neg.w	d2		; rende D2 positivo
	sub.w	d1,d3		; D3=Y2-Y1
	bmi.s	.DRAW6		; se negativo salta, altrimenti D3=DiffY
	cmp.w	d3,d2		; confronta DiffX e DiffY
	bmi.s	.DRAW5		; se D2<D3 salta..
				; .. altrimenti D3=DY e D2=DX
	moveq	#$14,d5		; codice ottante
	bra.s	.DRAWL
	.DRAW5:
	exg.l	d2,d3		; scambia D2 e D3, in modo che D3=DY e D2=DX
	moveq	#$08,d5		; codice ottante
	bra.s	.DRAWL
	.DRAW6:
	neg.w	d3		; rende D3 positivo
	cmp.w	d3,d2		; confronta DiffX e DiffY
	bmi.s	.DRAW7		; se D2<D3 salta..
				; .. altrimenti D3=DY e D2=DX
	moveq	#$1c,d5		; codice ottante
	bra.s	.DRAWL
	.DRAW7:
	exg.l	d2,d3		; scambia D2 e D3, in modo che D3=DY e D2=DX
	moveq	#$0c,d5		; codice ottante

	; Quando l'esecuzione raggiunge questo punto, abbiamo:
	; D2 = DX
	; D3 = DY
	; D5 = codice ottante

	.DRAWL:
	;mulu.w	#bpl,d1		; offset Y
	LEA	BPL_PRECALC,A5	; TABLE OPTIMIZING
	ADD.W	D1,D1
	MOVE.W	(A5,D1.W),D1
	add.w	d1,A6		; aggiunge l'offset Y all'indirizzo

	move.w	d0,d1		; copia la coordinata X
	andi.w	#$000F,d0		; seleziona i 4 bit piu` bassi della X..
	ror.w	#4,d0		; .. e li sposta nei bit da 12 a 15
	.DrawMode:
	ori.w	#$0BCA,d0		; con un OR ottengo il valore da scrivere
	;ori.w	#$0B05,d0		; con un OR ottengo il valore da scrivere
				; in BLTCON0. Con questo valore di LF ($4A)
				; si disegnano linee in EOR con lo sfondo.
				; #$0BCA
				; $77 $F5 $F3 $C0 $05
	lsr.w	#4,d1		; cancella i 4 bit bassi della X
	add.w	d1,d1		; ottiene l'offset X in bytes
	add.w	d1,A6		; aggiunge l'offset X all'indirizzo

	move.w	d2,d1		; copia DX in D1
	addq.w	#1,d1		; D1=DX+1
	lsl.w	#$06,d1		; calcola in D1 il valore da mettere in BLTSIZE
	addq.w	#$0002,d1		; aggiunge la larghezza, pari a 2 words

	lsl.w	#$02,d3		; D3=4*DY
	add.w	d2,d2		; D2=2*DX
	BSR	WaitBlitter
	move.w	d3,BLTBMOD	; BLTBMOD=4*DY
	sub.w	d2,d3		; D3=4*DY-2*DX
	move.w	d3,BLTAPTL	; BLTAPTL=4*DY-2*DX prep val for BLTCON1
	ori.w	#$0001,d5		; setta bit 0 (attiva line-mode)
	tst.w	d3
	bpl.s	.OK1		; se 4*DY-2*DX>0 salta..
	ori.w	#$0040,d5		; altrimenti setta il bit SIGN
	.OK1:
	move.w	d0,BLTCON0	; BLTCON0
	move.w	d5,BLTCON1	; BLTCON1
	sub.w	d2,d3		; D3=4*DY-4*DX
	move.w	d3,BLTAMOD	; BLTAMOD=4*DY-4*DX
	move.l	A6,BLTCPTH	; BLTCPT - indirizzo schermo
	move.l	A6,BLTDPTH	; BLTDPT - indirizzo schermo
	move.w	d1,BLTSIZE	; BLTSIZE
	rts

__ROTATE:				; D0-D1	Rotate around Z Axis:
	VarTimesTrig d0,D2,d5	; left = rotatedX * cos
	VarTimesTrig d1,d3,d6	; right = rotatedY * sin
	move.l	d5,d7		; tmp = left - right
	sub.l	d6,d7
	;EXG.L	D3,D2		; MORE GLITCH
	VarTimesTrig d0,d3,d5	; left = rotatedX * sin
	VarTimesTrig d1,D2,d6	; right = rotatedY * cos
	move.l	d5,d1		; rotatedY = left + right
	add.l	d6,d1
	move.l	d7,d0		; rotatedX = tmp
	RTS

__UPDATE_ANGLE:
	; **** ROTATION VALUES ****
	MOVE.W	V_ANGLE,D2
	MOVE.W	V_SHIFT,D1	; NEEDS SIGN
	MOVE.W	V_DIR,D3		; -1/1
	ASR.W	#1,D3		; EXTENDS SIGN FROM DIR
	EOR.W	D3,D1		; FROM
	SUB.W	D3,D1		; STACKOVERFLOW
	ADD.W	D1,D2		; SPIN!
	TST.W	D2
	BGE.S	.dontResetL
	MOVE.W	#358,D2
	.dontResetL:
	CMPI.W	#360,D2
	BLO.S	.dontResetR
	MOVEQ.L	#$0,D2
	.dontResetR:
	MOVE.W	D2,V_ANGLE
	RTS

__DBLBMP:
	LEA	KONEY,A1
	MOVE.L	A4,A5
	MOVE.W	#$9,D6
	.DBLBMP:				; LOGICA PER RADDOPPIARE LA BITMAP
	MOVE.W	(A1)+,D0		
	;****************
	CLR.L	D1
	MOVE.W	#$F,D7
	.LOOP:	
	BTST	D7,D0
	BEQ.S	.NEXT
	MOVE.W	D7,D2
	ADD.W	D2,D2
	BSET	D2,D1
	ADDQ.W	#1,D2
	BSET	D2,D1
	.NEXT:
	MOVEM.L	D0-D1,-(SP)
	BSR.W	WaitEOF			; TO SLOW DOWN :)
	MOVEM.L	(SP)+,D0-D1
	DBRA	D7,.LOOP
	;*****************
	ADD.W	#bpl,A5
	MOVE.L	D1,(A5)
	SUB.W	#bpl,A5
	MOVE.L	D1,(A5)+
	BTST	#0,D6
	BNE.S	.skip
	ADD.W	#bpl,A5
	ADD.W	#bpl-8,A5
	.skip:
	DBRA	D6,.DBLBMP
	RTS

__DITHER_PLANE:
	MOVE.L	A4,A4
	MOVE.W	#h-1,D4			; QUANTE LINEE
	MOVE.L	#$AAAAAAAA,D5
	.outerloop:			; NUOVA RIGA
	MOVE.W	#(bpl/4)-1,D6		; RESET D6
	NOT.L	D5
	.innerloop:			; LOOP KE CICLA LA BITMAP
	MOVE.L	D5,(A4)+
	DBRA	D6,.innerloop
	TST.W	D0
	BEQ.S	.noWait
	BSR.W	WaitEOF			; TO SLOW DOWN :)
	.noWait:
	DBRA	D4,.outerloop
	RTS

__GRADIENT_PLANE:
	MOVE.L	A4,A5
	ADD.L	#bpl*(h-1),A5
	MOVE.L	A4,A6
	ADD.L	#bpl*(h-2),A6
	MOVE.L	A4,A2
	ADD.L	#bpl,A2
	MOVE.W	#(h/2)-1,D4	; QUANTE LINEE
	.outerloop:		; NUOVA RIGA
	MOVE.W	#(bpl/2)-1,D6
	.innerloop:
	MOVE.B	(A3)+,D5
	TST.W	D3
	BNE.S	.dontNegate
	NOT.L	D5		; MAKE BITMAP NEGATIVE
	.dontNegate:

	MOVE.B	D5,(A4)+		; TOP LEFT
	MOVE.B	D5,(A6)+		; BOTTOM LEFT
	MOVE.B	D5,D0
	REPT 8
	ROXR.B	#1,D0		; FLIP BITS
	ROXL.B	#1,D2		; FLIP BITS
	ENDR
	MOVE.B	D2,-(A5)		; BOTTOM RIGHT
	MOVE.B	D2,-(A2)		; TOP RIGHT
	DBRA	D6,.innerloop
	ADD.L	#(bpl/2),A4
	SUB.L	#(bpl/2),A5
	SUB.L	#(bpl/2)+bpl,A6
	ADD.L	#(bpl/2)+bpl,A2
	DBRA	D4,.outerloop

	; ## BLIT FIX ####
	MOVE.L	#%1001111100001000,D1
	MOVE.L	A4,A3

	MOVE.W	#1,D0
	MOVE.B	D0,D1
	ROR.W	#4,D1
	bsr	WaitBlitter
	MOVE.W	D1,BLTCON0		; BLTCON0
	MOVE.L	#$FFFF7FFF,BLTAFWM		; THEY'LL NEVER
	MOVE.W	#(bpl/2),BLTAMOD		; BLTAMOD
	MOVE.W	#(bpl/2),BLTDMOD		; BLTDMOD

	ADD.L	#bpl*h-1,A3
	ADD.L	#bpl*h-1,A4
	MOVE.W	#%0000000000000010,BLTCON1	; BLTCON1 BIT 12 DESC MODE
	;.goBlitter:

	MOVE.L	A3,BLTAPTH		; BLTAPT
	MOVE.L	A4,BLTDPTH
	MOVE.W	#h*64+w/2/16,BLTSIZE	; BLTSIZE

	bsr	WaitBlitter
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1 BIT 12 DESC MODE
	MOVE.L	#$FFFFFFFF,BLTAFWM		; THEY'LL NEVER
	MOVE.L	A4,A3
	MOVE.W	#0,BLTAMOD		; BLTAMOD
	MOVE.W	#0,BLTDMOD		; BLTDMOD
	MOVE.L	A3,BLTAPTH		; BLTAPT
	MOVE.L	A4,BLTDPTH
	;MOVE.W	#h*64+w/16,BLTSIZE		; BLTSIZE
	.skip:
	; ## BLIT FIX ####
	RTS

__RANDOMIZE_PLANE:
	MOVE.W	#bpl/2*h-1,D4		; QUANTE LINEE
	.innerloop:			; LOOP KE CICLA LA BITMAP
	BSR.S	_RandomWord
	ROL.W	D4,D5
	MOVE.W	D5,(A4)+
	DBRA	D4,.innerloop
	RTS

	_RandomWord:
	bsr	_RandomByte
	rol.w	#8,d5
	_RandomByte:
	move.b	$dff007,d5		;$dff00a $dff00b for mouse pos
	move.b	$bfd800,d3
	eor.b	d3,d5
	rts

__SET_MED_VALUES:
	MOVE.W	MED_STEPSEQ_POS,D0		; UPDATE STEPSEQUENCER
	ANDI.W	#$F,D0			; POSITION (0-15 = 16 LEDS)
	MOVE.W	D0,MED_STEPSEQ_POS

	LEA	MED_TRK_0_COUNT(PC),A0
	LEA	AUDIOCHLEV_0(PC),A2
	LEA	MED_TRK_0_INST(PC),A3
	MOVEQ	#3,D7
	.loop:
	MOVEQ	#$F,D0			; maxvalue
	SUB.W	(A0)+,D0			; -#frames/irqs since instrument trigger
	BPL.S	.ok			; below minvalue?
	MOVEQ	#$0,D0			; then set to minvalue
	MOVE.W	D0,(A3)			; RESET TWO BYTES (INST+NOTE)
	.ok:
	MOVE.W	D0,(A2)+			; LEVEL VALUE TO USE IN CODE
	;ROL.L	#$4,D0			; expand bits to green
	;ROL.L	#$4,D0			; expand bits to green
	;MOVE.W	D0,(A1)			; poke color
	;LEA	16(A1),A1
	LEA	2(A3),A3
	DBF	D7,.loop
	ADD.L	#$10001,MED_TRK_0_COUNT	; inc elapsed #calls since last
	;;ADDQ.W	#$1,MED_TRK_1_COUNT
	ADD.L	#$10001,MED_TRK_2_COUNT	; use LONG to save 8 cycles
	;;ADDQ.W	#$1,MED_TRK_3_COUNT
	RTS

__FILLANDSCROLLTXT:
	MOVEQ	#$0,D2			; RESET
	MOVE.L	D2,D6
	MOVE.W	FRAMESINDEX,D7
	CMPI.W	#TXT_FRMSKIP,D7		; TXT_FRMSKIP
	BNE.W	.skip
	LEA	FOOTER,A4
	LEA	FONT,A5
	LEA	TEXT,A3
	ADD.W	#bpl*3+1,A4
	MOVE.W	#bpl*2-2,D0		; OPTIMIZE FOR LOOP
	ADD.W	TEXTINDEX,A3
	CMP.L	#_TEXT-1,A3		; Siamo arrivati all'ultima word della TAB?
	BNE.S	.proceed
	MOVE.W	D6,TEXTINDEX		; Riparti a puntare dalla prima word
	LEA	TEXT,A3			; FIX FOR GLITCH (I KNOW IT'S FUN... :)
	.proceed:
	MOVE.B	(A3),D2			; Prossimo carattere in d2
	SUBI.B	#$20,D2			; TOGLI 32 AL VALORE ASCII DEL CARATTERE, IN
	;MULU.W	#$7,D2			; MOLTIPLICA PER 8 IL NUMERO PRECEDENTE,
	MOVE.W	D2,D1			; OPTIMIZING
	LSL.W	#$3,D2			; OPTIMIZING
	SUB.W	D1,D2			; OPTIMIZING

	ADD.W	#$1,D2
	ADD.W	D2,A5
	MOVE.B	#$5,D6
	.loop:
	MOVE.B	(A5)+,(A4)+
	MOVE.B	#$0,(A4)+			; WRAPS MORE NICELY?
	ADD.W	D0,A4			; POSITIONING (OPT)
	DBRA	D6,.loop
	.skip:
	SUBI.W	#$1,D7
	TST.W	D7
	BEQ.W	.RESET
	MOVE.W	D7,FRAMESINDEX
	BRA.S	.shifttext
	.reset:
	ADDI.W	#$1,TEXTINDEX
	;MOVE.W	#TXT_FRMSKIP,D7
	;MOVE.W	D7,FRAMESINDEX		; OTTIMIZZABILE
	MOVE.W	#TXT_FRMSKIP,FRAMESINDEX

	.shifttext:
	LEA	FOOTER_END,A2
	SUB.W	#bpl*7,A2
	MOVE.L	A2,A4

	BSR.W	WaitBlitter
	MOVE.L	#%00101001111100000000000000000010,BLTCON0
	MOVE.L	#$FFFFFFFF,BLTAFWM
	MOVE.L	#$0,BLTAMOD
	MOVE.L	A2,BLTAPTH
	MOVE.L	A4,BLTDPTH
	MOVE.W	#6*64+(w*2+16)/16,BLTSIZE
	RTS

__POINT_SPRITES:
	LEA	COPPER\.SpritePointers,A1
	MOVE.L	#0,D0		; sprite 0
	MOVE.W	D0,6(A1)
	SWAP	D0
	MOVE.W	D0,2(A1)

	ADDQ.W	#8,A1
	MOVE.L	#0,D0		; sprite 1
	MOVE.W	D0,6(A1)
	SWAP	D0
	MOVE.W	D0,2(A1)

	ADDQ.W	#8,A1
	MOVE.L	#0,D0		; sprite 2
	MOVE.W	D0,6(A1)
	SWAP	D0
	MOVE.W	D0,2(A1)

	ADDQ.W	#8,A1
	MOVE.L	#0,D0		; sprite 3
	MOVE.W	D0,6(A1)
	SWAP	D0
	MOVE.W	D0,2(A1)

	ADDQ.W	#8,A1
	MOVE.L	#0,D0		; sprite 4
	MOVE.W	D0,6(A1)
	SWAP	D0
	MOVE.W	D0,2(A1)

	ADDQ.W	#8,A1
	MOVE.L	#0,D0		; sprite 5
	MOVE.W	D0,6(A1)
	SWAP	D0
	MOVE.W	D0,2(A1)

	ADDQ.W	#8,A1
	MOVE.L	#0,D0		; sprite 6
	MOVE.W	D0,6(A1)
	SWAP	D0
	MOVE.W	D0,2(A1)

	ADDQ.W	#8,A1
	MOVE.L	#0,D0		; sprite 7
	MOVE.W	D0,6(A1)
	SWAP	D0
	MOVE.W	D0,2(A1)
	RTS

__BLIT_GLITCH_SLICE:
	MOVE.L	GLITCHGOOD,A3

	.waitData:
	;ADD.L	#bpl,A3			; GO TO NEXT
	LEA	40(A3),A3			; OPTIMIZED
	TST.L	(A3)			; IF LINE EMPTY
	BEQ.S	.waitData			
	.dataOk:
	CMP.L	#_MED_MODULE-(bpl/2),A3	; LAST WORD OF DATA?
	BLS.S	.notEnd
	MOVE.L	GLITCHRESET,A3		; RELOAD
	.notEnd:

	bsr	WaitBlitter
	MOVE.W	#%0100100111110000,BLTCON0	; BLTCON0
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1 BIT 12 DESC MODE
	MOVE.L	#$FFFFFFFF,BLTAFWM		; THEY'LL NEVER
	MOVE.W	#bpl-(32/16*2),D1
	MOVE.W	D1,D2
	SUB.W	BLIT_A_MOD,D1
	MOVE.W	D1,BLTAMOD		; BLTAMOD
	SUB.W	BLIT_D_MOD,D2
	MOVE.W	D2,BLTDMOD		; BLTDMOD

	MOVE.L	A3,BLTAPTH		; BLTAPT
	MOVE.L	A4,BLTDPTH
	MOVE.W	#h*64+32/16,BLTSIZE		; BLTSIZE
	MOVE.L	A3,GLITCHGOOD		; REMEMBER POSITION
	; ## MAIN BLIT ####
	RTS

__BLIT_GLITCH_BAND:
	MOVE.L	GLITCHGOOD,A3

	.waitData:
	;ADD.L	#bpl,A3			; GO TO NEXT
	LEA	40(A3),A3			; OPTIMIZED
	TST.L	(A3)			; IF LINE EMPTY
	BEQ.S	.waitData			
	.dataOk:
	CMP.L	#_MED_MODULE-(bpl/2),A3	; LAST WORD OF DATA?
	BLS.S	.notEnd
	MOVE.L	GLITCHRESET,A3		; RELOAD
	.notEnd:

	bsr	WaitBlitter
	MOVE.W	#%0000100111110000,BLTCON0	; BLTCON0
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1 BIT 12 DESC MODE
	MOVE.L	#$FFFFFFFF,BLTAFWM		; THEY'LL NEVER
	MOVE.W	BLIT_A_MOD,BLTAMOD		; BLTAMOD
	MOVE.W	BLIT_D_MOD,BLTDMOD		; BLTDMOD

	MOVE.L	A3,BLTAPTH		; BLTAPT
	MOVE.L	A4,BLTDPTH
	MOVE.W	BLIT_SIZE,BLTSIZE		; BLTSIZE
	MOVE.L	A3,GLITCHGOOD		; REMEMBER POSITION
	; ## MAIN BLIT ####
	RTS

__BLIT_GLITCH_TILE:
	;MOVE.W	#%00001111111001010,D1	; for texture?
	MOVE.L	GLITCHGOOD,A3

	; ## MAIN BLIT ####
	.waitData:
	;ADD.L	#bpl*2,A3			; GO TO NEXT
	LEA	80(A3),A3			; OPTIMIZED
	TST.L	(A3)			; IF LINE EMPTY
	BEQ.S	.waitData			
	.dataOk:
	CMP.L	#_MED_MODULE-(bpl/2),A3	; LAST WORD OF DATA?
	BLS.S	.notEnd
	MOVE.L	GLITCHRESET,A3		; RELOAD
	.notEnd:

	ADD.L	#bpl*(h/2-32)+(bpl/2-4),A4	; CENTER!
	;ADD.L	#bpl/2-4,A4		; CENTER!
	BSR	WaitBlitter
	MOVE.W	#%00001111111001010,BLTCON0	; BLTCON0
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1
	MOVE.W	#bpl-(64/16*2),BLTBMOD	; BLTAMOD
	MOVE.W	#0,BLTAMOD		; BLTBMOD =0 for texture
	MOVE.W	#bpl-(64/16*2),BLTCMOD	; BLTCMOD
	MOVE.W	#bpl-(64/16*2),BLTDMOD	; BLTDMOD 40-4=36

	MOVE.L	#PAT_CHAOS,BLTAPTH		; TEXTURE
	MOVE.L	A3,BLTBPTH		; BLTAPT
	MOVE.L	A4,BLTCPTH
	MOVE.L	A4,BLTDPTH
	MOVE.W	#64*64+64/16,BLTSIZE	; BLTSIZE
	; ## MAIN BLIT ####
	MOVE.L	A3,GLITCHGOOD		; REMEMBER POSITION
	RTS

__BLIT_DITHER_TILE:
	;MOVE.W	#%00001111111001010,D1	; for texture?
	; ## MAIN BLIT ####
	ADD.L	#bpl*(h/2-32)+(bpl/2-4),A4	; CENTER!
	;ADD.L	#bpl/2-4,A4		; CENTER!
	BSR	WaitBlitter
	MOVE.W	#%00001111111001010,BLTCON0	; BLTCON0
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1
	MOVE.W	#0,BLTAMOD		; BLTAMOD =0 for texture
	MOVE.W	#bpl-(64/16*2),BLTBMOD	; BLTBMOD
	MOVE.W	#bpl-(64/16*2),BLTCMOD	; BLTCMOD
	MOVE.W	#bpl-(64/16*2),BLTDMOD	; BLTDMOD 40-4=36

	MOVE.L	#PAT_CHAOS,BLTAPTH		; TEXTURE
	MOVE.L	#DITHERPLANE,BLTBPTH	; BLTAPT
	MOVE.L	A4,BLTCPTH
	MOVE.L	A4,BLTDPTH
	MOVE.W	#64*64+64/16,BLTSIZE	; BLTSIZE
	; ## MAIN BLIT ####
	RTS

__SCROLL_X:
	MOVE.B	X_DIR,D5
	MOVE.L	#%1001111100001000,D1	; %1000100111110000 +ROL.W	#4,D1
	; ## MAIN BLIT ####

	MOVE.W	X_SHIFT,D0
	MOVE.B	D0,D1
	ROR.W	#4,D1
	bsr	WaitBlitter
	MOVE.W	D1,BLTCON0		; BLTCON0
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1 BIT 12 DESC MODE
	MOVE.L	#$FFFFFFFF,BLTAFWM		; THEY'LL NEVER
	MOVE.W	BLIT_A_MOD,BLTAMOD		; BLTAMOD
	MOVE.W	BLIT_D_MOD,BLTDMOD		; BLTDMOD

	CMP.B	#1,D5
	BEQ.B	.goBlitter		; FOR LEFT
	MOVE.W	#bpl*h-1,D6		; OPT
	ADD.W	D6,A3
	ADD.W	D6,A4
	MOVE.W	#%0000000000000010,BLTCON1	; BLTCON1 BIT 12 DESC MODE

	.goBlitter:
	MOVE.L	A3,BLTAPTH		; BLTAPT
	MOVE.L	A4,BLTDPTH
	MOVE.W	#h*64+w/2/16,BLTSIZE	; BLTSIZE
	; ## MAIN BLIT ####
	RTS

__SCROLL_Y:
	bsr	WaitBlitter
	MOVE.W	#%0000100111110000,BLTCON0

	MOVE.L	#0,D1
	MOVE.W	Y_SHIFT,D1
	;MULU.W	#bpl,D1
	LEA	BPL_PRECALC,A0
	ADD.W	D1,D1
	MOVE.W	(A0,D1.W),D1

	; ## MAIN BLIT ####
	MOVE.B	Y_DIR,D5
	TST.B	D5
	BEQ.S	.goUp
	MOVE.W	#%0000000000000010,BLTCON1	; BLTCON1 DESC MODE
	ADD.L	D1,A4			; POSITION Y
	MOVE.W	#bpl*(h-1)-2,D6		; OPTIMIZING
	ADD.W	D6,A3
	ADD.W	D6,A4
	BRA.S	.goBlit
	.goUp:
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1
	ADD.L	D1,A3			; POSITION Y
	.goBlit:

	MOVE.W	#bpl-wblit,BLTAMOD		; BLTAMOD
	MOVE.W	#bpl-wblit,BLTDMOD		; BLTDMOD

	MOVE.L	A3,BLTAPTH		; BLTAPT SRC
	MOVE.L	A4,BLTDPTH		; DESC
	MOVE.W	#(h-3)*64+(w/2)/16,BLTSIZE	; BLTSIZE
	; ## MAIN BLIT ####
	RTS

__SCROLL_Y_HALF:
	MOVEQ	#0,D1
	MOVE.W	Y_HALF_SHIFT,D1

	;MULU.W	#bpl,D1
	LEA	BPL_PRECALC,A0
	ADD.W	D1,D1
	MOVE.W	(A0,D1.W),D1

	; ## MAIN BLIT ####

	MOVE.B	Y_HALF_DIR,D5
	NEG.B	D5
	MOVE.B	D5,Y_HALF_DIR

	BSR	WaitBlitter
	MOVE.W	#%000100111110000,BLTCON0
	CMP.B	#1,D5
	BEQ.S	.goUp
	MOVE.W	#%0000000000000010,BLTCON1	; BLTCON1 DESC MODE
	SUB.L	D1,A3			; POSITION Y
	MOVE.W	#bpl*h-1,D6
	ADD.W	D6,A3
	ADD.W	D6,A4
	BRA.S	.goBlit
	.goUp:
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1
	ADD.L	D1,A3			; POSITION Y
	.goBlit:

	MOVE.L	#$FFFFFFFF,BLTAFWM		; THEY'LL NEVER
	MOVE.W	BLIT_A_MOD,BLTAMOD		; BLTAMOD
	MOVE.W	BLIT_D_MOD,BLTDMOD		; BLTDMOD

	MOVE.L	A3,BLTAPTH		; BLTAPT SRC
	MOVE.L	A4,BLTDPTH		; DESC
	MOVE.W	#h*64+w/16,BLTSIZE		; BLTSIZE
	; ## MAIN BLIT ####
	RTS

__SCROLL_Y_HALF_H:
	MOVEQ	#0,D1
	MOVE.L	D1,D4			; CLR
	MOVE.W	Y_HALF_SHIFT,D1
	MOVE.W	#h,D4
	;ADD.B	#1,D1			; FIX FOR -1 VALUES
	SUB.W	D1,D4
	;SUB.W	#1,D4			; FIX FOR -1 VALUES
	;MULU.W	#64,D4
	LSL.W	#6,D4			; X64 OPTIMIZED
	ADD.W	#bpl/2,D4

	;MULU.W	#bpl,D1
	LEA	BPL_PRECALC,A0
	ADD.W	D1,D1
	MOVE.W	(A0,D1.W),D1

	; ## MAIN BLIT ####

	MOVE.B	Y_HALF_DIR,D5
	NEG.B	D5
	MOVE.B	D5,Y_HALF_DIR

	bsr	WaitBlitter
	MOVE.W	#%000100111110000,BLTCON0
	CMP.B	#1,D5
	BEQ.S	.goUp
	MOVE.W	#%0000000000000010,BLTCON1	; BLTCON1 DESC MODE
	SUB.L	D1,A3			; POSITION Y
	MOVE.W	#bpl*h-1,D6
	ADD.W	D6,A3
	ADD.W	D6,A4
	BRA.S	.goBlit
	.goUp:
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1
	;SUB.B	#bpl,D1
	ADD.L	D1,A3			; POSITION Y
	.goBlit:

	MOVE.L	#$FFFFFFFF,BLTAFWM		; THEY'LL NEVER
	MOVE.W	BLIT_A_MOD,BLTAMOD		; BLTAMOD
	MOVE.W	BLIT_D_MOD,BLTDMOD		; BLTDMOD

	MOVE.L	A3,BLTAPTH		; BLTAPT SRC
	MOVE.L	A4,BLTDPTH		; DESC
	;MOVE.W	#h*64+w/16,BLTSIZE		; BLTSIZE
	MOVE.W	D4,BLTSIZE		; BLTSIZE
	; ## MAIN BLIT ####
	RTS

__SCROLL_Y_FULL:
	MOVEQ	#0,D1			; CLR
	MOVE.L	D1,D0
	MOVE.L	D1,D2
	MOVE.L	D1,D4
	MOVE.L	D1,D5

	MOVE.B	Y_FULL_DIR,D5
	MOVE.W	Y_FULL_SHIFT,D1
	MOVE.W	#1,D2			; FOR LOOP
	MOVE.L	A3,A1
	MOVE.L	A4,A2

	MOVE.W	#h,D4
	ADD.B	#1,D1			; FIX FOR -1 VALUES
	SUB.W	D1,D4
	SUB.W	#1,D4			; FIX FOR -1 VALUES
	;MULU.W	#64,D4
	LSL.W	#6,D4			; *64 OPTIMIZED
	ADD.W	#wblit/2,D4

	;MULU.W	#bpl,D1
	LEA	BPL_PRECALC,A0
	ADD.W	D1,D1
	MOVE.W	(A0,D1.W),D1

	bsr	WaitBlitter
	MOVE.L	#$FFFFFFFF,BLTAFWM		; THEY'LL NEVER
	MOVE.W	#bpl*h-wblit-1,D6		; OPTMZ
	MOVE.W	#wblit,D7			; OPTMZ
	.blitLoop:
	; ## MAIN BLIT ####
	MOVE.L	A1,A3
	MOVE.L	A2,A4

	bsr	WaitBlitter
	MOVE.W	#%0000100111110000,BLTCON0

	CMP.B	#1,D5
	BEQ.S	.goUp
	MOVE.W	#%0000000000000010,BLTCON1	; BLTCON1 DESC MODE
	SUB.L	D1,A3			; POSITION Y
	ADD.W	D6,A3
	ADD.W	D6,A4
	BRA.S	.goBlit
	.goUp:
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1
	ADD.L	D1,A3			; POSITION Y
	.goBlit:

	MOVE.W	#bpl-wblit,BLTAMOD		; BLTAMOD
	MOVE.W	#bpl-wblit,BLTDMOD		; BLTDMOD
	MOVE.L	A3,BLTAPTH		; BLTAPT SRC
	MOVE.L	A4,BLTDPTH		; DESC

	;MOVE.W	#h*64+wblit/2,BLTSIZE	; BLTSIZE
	MOVE.W	D4,BLTSIZE		; BLTSIZE

	ADD.W	D7,A1
	ADD.W	D7,A2

	NEG.B	D5
	DBRA	D2,.blitLoop
	; ## MAIN BLIT ####
	RTS

__SCROLL_X_PROGR:
	MOVE.B	X_PROGR_DIR,D5
	MOVE.W	#8,D2			; FOR LOOP
	MOVE.B	D2,D3			; FOR SHIFT
	SUB.B	#1,D2
	MOVE.B	X_PROGR_TYPE,D4
	MOVE.L	A3,A1
	MOVE.L	A4,A2

	bsr	WaitBlitter
	MOVE.L	#$FFFFFFFF,BLTAFWM		; THEY'LL NEVER
	MOVE.W	#bpl*32-1,D6		; OPTIMIZE
	MOVE.W	#bpl*32,D7		; OPTIMIZE

	CMP.B	#1,D4
	BNE.S	.blitloop
	MOVE.B	#1,D3
	.blitLoop:
	;ADD.W	#1,D3			; TO SPEED UP
	MOVE.L	A1,A3
	MOVE.L	A2,A4
	MOVE.W	#%0000100111110000,D1
	ROL.W	#4,D1
	MOVE.B	D3,D1
	ROR.W	#4,D1
	bsr	WaitBlitter
	MOVE.W	D1,BLTCON0		; BLTCON0
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1 BIT 12 DESC MODE

	CMP.B	#1,D5
	BEQ.B	.goBlit			; FOR LEFT
	ADD.W	D6,A3
	ADD.W	D6,A4
	MOVE.W	#%0000000000000010,BLTCON1	; BLTCON1 BIT 12 DESC MODE

	.goBlit:
	MOVE.L	#0,BLTAMOD		; BLTAMOD
	;MOVE.W	#0,BLTDMOD		; BLTDMOD
	MOVE.L	A3,BLTAPTH		; BLTAPT
	MOVE.L	A4,BLTDPTH
	MOVE.W	#32*64+w/16,BLTSIZE		; BLTSIZE

	ADD.W	D7,A1
	ADD.W	D7,A2
	ADD.B	D4,D3			; CAN BE 1 OR -1
	;NEG.B	D5
	DBRA	D2,.blitLoop
	RTS

__SCROLL_Y_PROGR:
	MOVEQ	#0,D1			; RESETS...
	MOVE.L	D1,D2
	MOVE.L	D1,D3
	MOVE.L	D1,D4
	MOVE.L	D1,D5
	MOVE.L	D1,D6
	MOVE.L	D1,D7

	MOVE.B	Y_PROGR_DIR,D5
	MOVE.W	#10,D2			; FOR LOOP
	MOVE.B	D2,D3			; FOR SHIFT
	SUB.B	#1,D2
	MOVE.B	Y_PROGR_TYPE,D6
	MOVE.L	#0,D7
	MOVE.B	#vbarwbpl*2,D7
	MOVE.L	A3,A1
	MOVE.L	A4,A2

	bsr	WaitBlitter
	MOVE.L	#$FFFFFFFF,BLTAFWM		; THEY'LL NEVER
	MOVE.W	#%0000100111110000,BLTCON0
	MOVE.W	#bpl*h-1,D0		; OPTIMIZE

	CMP.B	#1,D6
	BNE.S	.blitloop
	MOVE.B	#1,D3			; OF POLARITY + THEN START FROM 1
	.blitLoop:
	MOVE.W	#h,D4
	SUB.W	D3,D4
	;MULU.W	#64,D4
	LSL.W	#6,D4			; X64 OPTIMIZED
	ADD.W	#vbarwbpl,D4		; #h*64+vbarwbpl,BLTSIZE	; BLTSIZE

	;MOVE.W	#bpl,D1
	;ADD.W	#1,D3			; TO SPEED UP
	;MULU.W	D3,D1			; USE OPTIMIZATION HERE -1/1

	MOVE.W	D3,D1
	LEA	BPL_PRECALC,A0		; TABLE OPTIMIZING
	ADD.W	D1,D1
	MOVE.W	(A0,D1.W),D1

	MOVE.L	A1,A3
	MOVE.L	A2,A4

	bsr	WaitBlitter

	CMP.B	#1,D5
	BEQ.S	.goUp
	MOVE.W	#%0000000000000010,BLTCON1	; BLTCON1 DESC MODE
	SUB.L	D1,A3			; POSITION Y
	ADD.W	D0,A3
	ADD.W	D0,A4
	BRA.S	.goBlit
	.goUp:
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1
	ADD.L	D1,A3			; POSITION Y
	.goBlit:

	MOVE.W	#bpl-vbarwbpl*2,BLTAMOD	; BLTAMOD
	MOVE.W	#bpl-vbarwbpl*2,BLTDMOD	; BLTDMOD
	MOVE.L	A3,BLTAPTH		; BLTAPT SRC
	MOVE.L	A4,BLTDPTH		; DESC

	MOVE.W	D4,BLTSIZE		; BLTSIZE

	CMP.B	#1,D5
	BNE.S	.notDesc
	ADD.L	D7,A1
	ADD.L	D7,A2
	BRA.S	.skip
	.notDesc:
	SUB.L	D7,A1
	SUB.L	D7,A2
	.skip:

	ADD.B	D6,D3			; CAN BE 1 OR -1
	;NEG.B	D6
	DBRA	D2,.blitLoop
	RTS

__SCROLL_X_PROGR_SPLITX2:
	MOVEQ	#0,D1			; RESETS...
	MOVE.L	D1,D2
	MOVE.L	D1,D3
	MOVE.L	D1,D4
	MOVE.L	D1,D5
	MOVE.L	D1,D6
	MOVE.L	D1,D7

	MOVE.B	X_PROGR_DIR,D5
	MOVE.B	#-1,D6
	MOVE.W	#1,D4			; FOR LOOP
	MOVE.L	A3,A1
	MOVE.L	A4,A2

	BSR	WaitBlitter
	MOVE.L	#$FFFFFFFF,BLTAFWM		; THEY'LL NEVER

	MOVE.W	#bpl*X_SPLIT2X_SLICE-1,D0	; OPTIMIZE
	MOVE.W	#bpl*X_SPLIT2X_SLICE,A6	; OPTIMIZE

	.outerLoop:
	MOVE.W	#9,D2			; FOR LOOP
	MOVE.B	D2,D3			; FOR SHIFT
	SUB.B	#1,D2

	CMP.B	#1,D6
	BNE.S	.blitloop
	MOVE.B	#1,D3

	.blitLoop:
	MOVE.L	A1,A3
	MOVE.L	A2,A4
	MOVE.W	#%0000100111110000,D1
	ROL.W	#4,D1
	MOVE.B	D3,D1
	ROR.W	#4,D1
	MOVE.W	#%0000000000000000,D7

	CMP.B	#1,D5
	BEQ.B	.goBlit			; FOR LEFT
	ADD.W	D0,A3
	ADD.W	D0,A4
	MOVE.W	#%0000000000000010,D7	; BLTCON1 BIT 12 DESC MODE
	.goBlit:

	BSR	WaitBlitter
	MOVE.W	D1,BLTCON0		; BLTCON0
	MOVE.W	D7,BLTCON1		; BLTCON1
	MOVE.L	#$0,BLTAMOD		; BLTAMOD
	;MOVE.W	#$0,BLTDMOD		; BLTDMOD
	MOVE.L	A3,BLTAPTH		; BLTAPT
	MOVE.L	A4,BLTDPTH
	MOVE.W	#X_SPLIT2X_SLICE*64+w/16,BLTSIZE

	ADD.W	A6,A1			; NEW TRICK! USE ADRS
	ADD.W	A6,A2			; REGISTERS AS DATA :)
	ADD.B	D6,D3			; CAN BE 1 OR -1

	DBRA	D2,.blitLoop
	NEG.B	D5
	NEG.B	D6
	DBRA	D4,.outerLoop
	RTS

__SCROLL_X_1_4:
	MOVE.W	#%1001111100000000,D1
	MOVE.W	#bpl*h/2-(bpl/2)-1,D6	; OPTIMIZE
	MOVE.L	#((bpl/2)<<16)+bpl/2,D7
	MOVE.W	#0,D2
	MOVE.B	X_1_4_DIR,D5
	CMP.B	#1,D5
	BEQ.B	.notDesc
	; ## MAIN BLIT ####
	MOVE.B	X_1_4_SHIFT+1,D4
	;ADD.B	#1,D4			; FIX FOR -1 VALUES
	BSET.L	#$1,D2			; BLTCON1 BIT 12 DESC MODE
	ADD.W	D6,A3
	ADD.W	D6,A4
	.notDesc:

	;ROL.W	#4,D1
	MOVE.B	D4,D1
	ROR.W	#4,D1
	bsr	WaitBlitter

	;CMP.B	#1,D5
	;BEQ.B	.goBlitter		; FOR LEFT
	;.goBlitter:

	MOVE.W	D1,BLTCON0		; BLTCON0
	MOVE.W	D2,BLTCON1
	MOVE.L	D7,BLTAMOD		; BLTAMOD
	;MOVE.W	#bpl/2,BLTDMOD		; BLTDMOD
	MOVE.L	A3,BLTAPTH		; BLTAPT
	MOVE.L	A4,BLTDPTH
	MOVE.W	#(h/2)*64+(w/2/16),BLTSIZE	; BLTSIZE
	; ## MAIN BLIT ####
	RTS

__SCROLL_Y_1_4:
	CLR.L	D1
	MOVE.W	Y_1_4_SHIFT,D1
	;MULU.W	#bpl,D1
	LEA	BPL_PRECALC,A0		; TABLE OPTIMIZING
	ADD.W	D1,D1
	MOVE.W	(A0,D1.W),D1

	MOVE.W	#bpl*(h-32)/2-(bpl/2)-1,D6	; OPTIMIZE
	MOVE.L	#((bpl/2)<<16)+bpl/2,D7

	; ## MAIN BLIT ####
	MOVE.B	Y_1_4_DIR,D5
	bsr	WaitBlitter
	MOVE.W	#%0000100111110000,BLTCON0
	CMP.B	#1,D5
	BEQ.S	.goUp
	MOVE.W	#%0000000000000010,BLTCON1	; BLTCON1 DESC MODE
	SUB.L	D1,A3			; POSITION Y
	ADD.W	D6,A3
	ADD.W	D6,A4
	BRA.S	.goBlit
	.goUp:
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1
	ADD.L	D1,A3			; POSITION Y

	.goBlit:
	MOVE.L	D7,BLTAMOD		; BLTAMOD
	;MOVE.W	#bpl/2,BLTDMOD		; BLTDMOD
	MOVE.L	A3,BLTAPTH		; BLTAPT SRC
	MOVE.L	A4,BLTDPTH		; DESC
	MOVE.W	#(h+32)/2*64+w/2/16,BLTSIZE	; BLTSIZE
	; ## MAIN BLIT ####
	RTS

__SCROLL_X_Y_1_4:
	MOVEQ	#0,D4			; RESET
	MOVE.L	D4,D1			; RESET
	MOVE.L	D4,D5			; RESET
	MOVE.L	D4,D6			; RESET
	MOVE.W	#%0000100111110000,D1

	MOVE.W	X_1_4_SHIFT,D4
	MOVE.W	Y_1_4_SHIFT,D6		; VSHIFT
	ADD.W	#1,D4			; FIX FOR -1 VALUES
	ADD.W	#1,D6			; FIX FOR -1 VALUES

	;MULU.W	#bpl,D6
	LEA	BPL_PRECALC,A0		; TABLE OPTIMIZING
	ADD.W	D6,D6
	MOVE.W	(A0,D6.W),D6
	MOVE.B	Y_1_4_DIR,D3		; -1/1
	EXT.W	D3
	ASR.W	#1,D3			; EXTENDS SIGN FROM DIR
	EOR.W	D3,D6			; FROM
	SUB.W	D3,D6			; STACKOVERFLOW
	EXT.L	D6

	MOVE.W	#bpl*h/2-(bpl/2)-1,D7	; OPTIMIZE

	ROL.W	#4,D1
	MOVE.B	D4,D1
	ROR.W	#4,D1
	bsr	WaitBlitter

	MOVE.W	BLIT_A_MOD,BLTAMOD		; BLTAMOD
	MOVE.W	BLIT_D_MOD,BLTDMOD		; BLTDMOD
	MOVE.W	D1,BLTCON0		; BLTCON0
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1

	MOVE.B	X_1_4_DIR,D5
	CMP.B	#1,D5
	BEQ.S	.goLeft			; FOR LEFT
	ADD.W	D7,A3
	ADD.W	D7,A4
	MOVE.W	#%0000000000000010,BLTCON1	; BLTCON1 BIT 12 DESC MODE
	;SUB.L	D6,A3			; POSITION Y
	;BRA.S	.goBlit

	.goLeft:
	ADD.L	D6,A3			; POSITION Y
	;.goBlit:
	MOVE.L	A3,BLTAPTH		; BLTAPT
	MOVE.L	A4,BLTDPTH
	MOVE.W	D2,BLTSIZE		; BLTSIZE
	;MOVE.W	#h*64+w/16,BLTSIZE		; BLTSIZE
	; ## MAIN BLIT ####
	RTS

__SCROLL_X_PLASMA:
	MOVEQ	#0,D4			; RESET
	MOVE.L	D4,D5			; RESET
	MOVE.L	D4,D6			; RESET
	MOVE.L	D4,D7			; RESET
	MOVE.W	#%0000100111110000,D1
	MOVE.W	X_1_4_SHIFT,D4
	MOVE.W	Y_1_4_SHIFT,D6		; VSHIFT
	ADD.B	#1,D4			; FIX FOR -1 VALUES
	ADD.B	#1,D6			; FIX FOR -1 VALUES
	;MULU.W	#bpl,D6
	LEA	BPL_PRECALC,A0		; TABLE OPTIMIZING
	ADD.W	D6,D6
	MOVE.W	(A0,D6.W),D6

	MOVE.W	#bpl*h-(bpl/2)-1,D0		; OPTIMIZE

	ROL.W	#4,D1
	MOVE.B	D4,D1
	ROR.W	#4,D1
	bsr	WaitBlitter
	MOVE.W	D7,BLTAMOD		; D7 HERE FOR CRAZY FX!!
	MOVE.W	#bpl/2,BLTDMOD		; BLTDMOD
	MOVE.W	D1,BLTCON0		; BLTCON0
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1

	MOVE.B	X_1_4_DIR,D5
	CMP.B	#1,D5
	BEQ.S	.goLeft			; FOR LEFT

	ADD.W	D0,A3
	ADD.W	D0,A4
	MOVE.W	#%0000000000000010,BLTCON1	; BLTCON1 BIT 12 DESC MODE
	SUB.L	D6,A3			; POSITION Y
	BRA.S	.goBlit

	.goLeft:
	ADD.L	D6,A3			; POSITION Y
	.goBlit:
	MOVE.L	A3,BLTAPTH		; BLTAPT
	MOVE.L	A4,BLTDPTH
	MOVE.W	#h*64+w/2/16,BLTSIZE	; BLTSIZE
	; ## MAIN BLIT ####
	RTS

__X_SHIFT_LFO:
	MOVEQ	#0,D0			; RESETS...
	MOVE.L	D0,D1			; RESETS...
	MOVE.B	X_SHIFT_LFO,D1
	MOVE.W	X_FULL_SHIFT,D0
	CMP.B	X_SHIFT_LFO_MIN,D0
	BHI.S	.changeDir
	CMP.B	X_SHIFT_LFO_MAX,D0		; TO DO - PARAMETER
	BLS.S	.sameDir

	.changeDir:
	NEG.B	D1
	
	TST.B	X_LFO_INVERT_DIR
	BEQ.S	.sameDir
	MOVE.B	X_FULL_DIR,D5
	NEG.B	D5
	MOVE.B	D5,X_FULL_DIR
	MOVE.B	X_PROGR_DIR,D5
	NEG.B	D5
	MOVE.B	D5,X_PROGR_DIR
	MOVE.B	X_PROGR_TYPE,D5
	NEG.B	D5
	MOVE.B	D5,X_PROGR_TYPE
	.sameDir:
	ADD.B	D1,D0
	MOVE.B	D1,X_SHIFT_LFO
	MOVE.W	D0,X_FULL_SHIFT
	ADD.B	#1,D0			; FIX FOR -1 VALUES
	MOVE.W	D0,X_1_4_SHIFT
	RTS

__Y_SHIFT_LFO:
	MOVEQ	#0,D0			; RESETS...
	MOVE.L	D0,D1			; RESETS...
	MOVE.B	Y_SHIFT_LFO,D1
	MOVE.W	Y_FULL_SHIFT,D0
	CMP.B	Y_SHIFT_LFO_MIN,D0
	BHI.S	.changeDir
	CMP.B	Y_SHIFT_LFO_MAX,D0		; TO DO - PARAMETER
	BLS.S	.sameDir

	.changeDir:
	NEG.B	D1
	
	TST.B	Y_LFO_INVERT_DIR
	BEQ.S	.sameDir
	MOVE.B	Y_FULL_DIR,D5
	NEG.B	D5
	MOVE.B	D5,Y_FULL_DIR
	MOVE.B	Y_PROGR_DIR,D5
	NEG.B	D5
	MOVE.B	D5,Y_PROGR_DIR
	MOVE.B	Y_PROGR_TYPE,D5
	NEG.B	D5
	MOVE.B	D5,Y_PROGR_TYPE
	.sameDir:
	ADD.B	D1,D0
	MOVE.B	D1,Y_SHIFT_LFO
	MOVE.W	D0,Y_FULL_SHIFT
	ADD.B	#1,D0			; FIX FOR -1 VALUES
	MOVE.W	D0,Y_1_4_SHIFT
	RTS

__Y_LFO_EASYING:
	MOVE.W	Y_EASYING_INDX,D0
	LEA	Y_EASYING_TBL,A0
	MOVE.W	(A0,D0.W),Y_EASYING
	ADDQ.B	#2,D0
	AND.W	#$7E,D0
	MOVE.W	D0,Y_EASYING_INDX
	RTS

__X_LFO_EASYING:
	MOVE.W	X_EASYING_INDX,D0
	LEA	X_EASYING_TBL,A0
	MOVE.W	(A0,D0.W),X_EASYING
	ADDQ.B	#2,D0
	AND.W	#$7E,D0
	MOVE.W	D0,X_EASYING_INDX
	RTS

__LFO_EASYING:
	MOVE.W	(A1),D0
	LEA	EASYING_TBL,A0
	MOVE.W	(A0,D0.W),EASYING
	ADDQ.B	#2,D0
	AND.W	#$3F,D0
	MOVE.W	D0,(A1)
	RTS

;********** BLOCKS Routines **********
__BLK_DIAG_FLUID1_PRE:
	;## COLORS SHIFTS ##
	MOVE.W	AUDIOCHLEV_2,D0
	CMP.W	#$F,D0
	BNE.S	.noColorShift
	LEA	COPPER\.Palette,A2
	MOVE.L	COLORSEQ4_PTR,A1
	TST.W	(A1)
	BEQ.S	.noColorShift
	CMP.W	#$0180,(A1)
	BEQ.S	.yes180
	LEA	16(A2),A2
	.yes180:
	REPT 4
	MOVE.L	(A1)+,(A2)+
	ENDR
	MOVE.L	A1,COLORSEQ4_PTR
	.noColorShift:
	;## COLORS SHIFTS ##
__BLK_DIAG_FLUID1:
	MOVE.B	#3,X_SHIFT_LFO_MIN
	MOVE.B	#15,X_SHIFT_LFO_MAX
	MOVE.B	#4,Y_SHIFT_LFO_MIN
	MOVE.B	#10,Y_SHIFT_LFO_MAX
	MOVE.B	#1,X_1_4_DIR
	MOVE.B	#1,Y_1_4_DIR
	MOVE.B	#1,X_LFO_INVERT_DIR
	MOVE.B	#1,Y_LFO_INVERT_DIR

	TST.B	FRAME_STROBE
	BNE.W	.oddFrame
	MOVE.B	#1,FRAME_STROBE

	;## GLITCH ##
	MOVE.L	#PLANE0,A4
	BSR.W	__BLIT_DITHER_TILE
	;## GLITCH ##

	BSR.W	__X_SHIFT_LFO
	BSR.W	__Y_LFO_EASYING
	MOVE.W	Y_EASYING,Y_1_4_SHIFT	; VSHIFT

	;MOVE.B	#1,X_1_4_DIR
	MOVE.W	#bpl/2-2,BLIT_A_MOD		; D7 HERE FOR CRAZY FX!!
	MOVE.W	#bpl/2-2,BLIT_D_MOD		; BLTDMOD
	MOVE.W	#h/2*64+(w/2/16)+1,D2	; BLITSIZE NOT DESC
	
	MOVE.L	#PLANE0,A3
	MOVE.L	#PLANE0,A4
	BSR.W	__SCROLL_X_Y_1_4
	MOVE.L	#PLANE1,A3
	MOVE.L	#PLANE1,A4
	BSR.W	__SCROLL_X_Y_1_4

	MOVE.B	X_1_4_DIR,D5
	NEG.B	D5
	MOVE.B	D5,Y_1_4_DIR
	MOVE.B	D5,X_1_4_DIR
	;MOVE.B	#-1,X_1_4_DIR
	MOVE.W	#bpl/2-2,BLIT_A_MOD		; D7 HERE FOR CRAZY FX!!
	MOVE.W	#bpl/2-2,BLIT_D_MOD		; BLTDMOD
	MOVE.W	#h/2*64+(w/2/16)+1,D2	; BLITSIZE NOT DESC

	MOVE.L	#PLANE0+bpl*h/2-(bpl/2),A3
	MOVE.L	#PLANE0+bpl*h/2-(bpl/2),A4
	BSR.W	__SCROLL_X_Y_1_4

	MOVE.L	#PLANE1+bpl*h/2-(bpl/2),A3
	MOVE.L	#PLANE1+bpl*h/2-(bpl/2),A4
	BSR.W	__SCROLL_X_Y_1_4

	BRA.W	.evenFrame
	.oddFrame:
	MOVE.B	#0,FRAME_STROBE

	;## GLITCH ##
	MOVE.L	#PLANE1,A4
	BSR.W	__BLIT_DITHER_TILE
	;## GLITCH ##

	BSR.W	__Y_SHIFT_LFO
	BSR.W	__X_LFO_EASYING
	MOVE.W	X_EASYING,X_1_4_SHIFT	; VSHIFT

	;MOVE.B	#1,X_1_4_DIR
	MOVE.W	#bpl/2,BLIT_A_MOD		; D7 HERE FOR CRAZY FX!!
	MOVE.W	#bpl/2,BLIT_D_MOD		; BLTDMOD
	MOVE.W	#h/2*64+(w/2/16),D2		; BLITSIZE NOT DESC

	MOVE.L	#PLANE0+bpl/2,A3
	MOVE.L	#PLANE0+bpl/2,A4
	BSR.W	__SCROLL_X_Y_1_4
	MOVE.L	#PLANE1+bpl/2,A3
	MOVE.L	#PLANE1+bpl/2,A4
	BSR.W	__SCROLL_X_Y_1_4

	MOVE.B	X_1_4_DIR,D5
	NEG.B	D5
	MOVE.B	D5,Y_1_4_DIR
	MOVE.B	D5,X_1_4_DIR
	;MOVE.B	#-1,X_1_4_DIR
	MOVE.W	#bpl/2,BLIT_A_MOD		; D7 HERE FOR CRAZY FX!!
	MOVE.W	#bpl/2,BLIT_D_MOD		; BLTDMOD
	MOVE.W	#h/2*64+(w/2/16),D2		; BLITSIZE NOT DESC

	MOVE.L	#PLANE0+bpl*(h/2),A3
	MOVE.L	#PLANE0+bpl*(h/2),A4
	BSR.W	__SCROLL_X_Y_1_4
	MOVE.L	#PLANE1+bpl*(h/2),A3
	MOVE.L	#PLANE1+bpl*(h/2),A4
	BSR.W	__SCROLL_X_Y_1_4
	.evenFrame:

	;## GLITCH ##
	MOVE.L	#PLANE3,A4
	BSR.W	__BLIT_GLITCH_TILE
	;## GLITCH ##
	RTS

__BLK_DIAG_FLUID_NOGLITCH:
	MOVE.B	#6,X_SHIFT_LFO_MIN
	MOVE.B	#12,X_SHIFT_LFO_MAX
	MOVE.B	#5,Y_SHIFT_LFO_MIN
	MOVE.B	#9,Y_SHIFT_LFO_MAX
	MOVE.B	#1,X_LFO_INVERT_DIR
	MOVE.B	#1,Y_LFO_INVERT_DIR
	MOVE.B	#1,X_1_4_DIR
	MOVE.B	#1,Y_1_4_DIR

	BSR.W	__Y_SHIFT_LFO

	TST.B	FRAME_STROBE
	BNE.W	.oddFrame
	MOVE.B	#1,FRAME_STROBE

	MOVE.W	#bpl/2-2,BLIT_A_MOD		; D7 HERE FOR CRAZY FX!!
	MOVE.W	#bpl/2-2,BLIT_D_MOD		; BLTDMOD
	MOVE.W	#h/2*64+(w/2/16)+1,D2	; BLITSIZE NOT DESC

	MOVE.L	#PLANE0+bpl/2,A3
	MOVE.L	#PLANE0+bpl/2,A4

	BSR.W	__SCROLL_X_Y_1_4
	MOVE.L	#PLANE1+bpl/2,A3
	MOVE.L	#PLANE1+bpl/2,A4

	BSR.W	__SCROLL_X_Y_1_4

	MOVE.B	X_1_4_DIR,D5
	NEG.B	D5
	MOVE.B	D5,Y_1_4_DIR
	MOVE.B	D5,X_1_4_DIR
	;MOVE.B	#-1,X_1_4_DIR
	MOVE.W	#bpl/2-2,BLIT_A_MOD		; D7 HERE FOR CRAZY FX!!
	MOVE.W	#bpl/2-2,BLIT_D_MOD		; BLTDMOD
	MOVE.W	#h/2*64+(w/2/16)+1,D2	; BLITSIZE NOT DESC

	MOVE.L	#PLANE0+bpl*(h/2),A3
	MOVE.L	#PLANE0+bpl*(h/2),A4
	BSR.W	__SCROLL_X_Y_1_4
	MOVE.L	#PLANE1+bpl*(h/2),A3
	MOVE.L	#PLANE1+bpl*(h/2),A4
	BSR.W	__SCROLL_X_Y_1_4

	BSR.W	__X_SHIFT_LFO

	BRA.W	.evenFrame
	.oddFrame:
	MOVE.B	#0,FRAME_STROBE

	;MOVE.B	#1,X_1_4_DIR
	MOVE.W	#bpl/2,BLIT_A_MOD		; D7 HERE FOR CRAZY FX!!
	MOVE.W	#bpl/2,BLIT_D_MOD		; BLTDMOD
	MOVE.W	#h/2*64+(w/2/16),D2		; BLITSIZE NOT DESC
	
	MOVE.L	#PLANE0,A3
	MOVE.L	#PLANE0,A4
	BSR.W	__SCROLL_X_Y_1_4
	MOVE.L	#PLANE1,A3
	MOVE.L	#PLANE1,A4
	BSR.W	__SCROLL_X_Y_1_4

	MOVE.B	X_1_4_DIR,D5
	NEG.B	D5
	MOVE.B	D5,Y_1_4_DIR
	MOVE.B	D5,X_1_4_DIR
	;MOVE.B	#-1,X_1_4_DIR
	MOVE.W	#bpl/2,BLIT_A_MOD		; D7 HERE FOR CRAZY FX!!
	MOVE.W	#bpl/2,BLIT_D_MOD		; BLTDMOD
	MOVE.W	#h/2*64+(w/2/16),D2		; BLITSIZE NOT DESC

	MOVE.L	#PLANE0+bpl*h/2-(bpl/2),A3
	MOVE.L	#PLANE0+bpl*h/2-(bpl/2),A4
	BSR.W	__SCROLL_X_Y_1_4

	MOVE.L	#PLANE1+bpl*h/2-(bpl/2),A3
	MOVE.L	#PLANE1+bpl*h/2-(bpl/2),A4
	BSR.W	__SCROLL_X_Y_1_4
	.evenFrame:
	RTS

__BLK_PLASMA:
	; # RESET ONCE ; BEWARE THE SMC !!
	BSR.W	__BLK_RESET
	MOVE.B	X_FULL_DIR,PLASMA_DIR	; INIT
	MOVE.W	#$6000|(.runOnce-(__BLK_PLASMA+2)),__BLK_PLASMA	; mock a BRA.S
	.runOnce:

	MOVE.B	#9,X_SHIFT_LFO_MAX
	MOVE.B	#0,X_SHIFT_LFO_MIN
	MOVE.B	#0,X_LFO_INVERT_DIR
	BSR.W	__X_SHIFT_LFO
	MOVE.B	#8,Y_SHIFT_LFO_MAX
	MOVE.B	#-1,Y_SHIFT_LFO_MIN
	MOVE.B	#0,Y_LFO_INVERT_DIR
	BSR.W	__Y_SHIFT_LFO	

	MOVE.B	X_FULL_DIR,X_1_4_DIR
	MOVE.L	#PLANE0,A3
	MOVE.L	#PLANE0,A4
	BSR.W	__SCROLL_X_PLASMA
	MOVE.L	#PLANE1,A3
	MOVE.L	#PLANE1,A4
	BSR.W	__SCROLL_X_PLASMA

	MOVE.L	#PLANE0+bpl/2,A3
	MOVE.L	#PLANE0+bpl/2,A4
	BSR.W	__SCROLL_X_PLASMA
	MOVE.L	#PLANE1+bpl/2,A3
	MOVE.L	#PLANE1+bpl/2,A4
	BSR.W	__SCROLL_X_PLASMA

	MOVE.W	MED_BLOCK_LINE,D1		; FLICKER
	CMP.W	#48,D1
	BLO.S	.noFlicker
	MOVE.B	X_FULL_DIR,D5
	NEG.B	D5
	MOVE.B	D5,X_FULL_DIR
	BRA.S	.noChangeDir
	.noFlicker:

	CMP.W	#$1,D1
	BNE.S	.noChangeDir
	MOVE.W	AUDIOCHLEV_0,D1
	CMP.W	#$F,D1
	BNE.S	.noChangeDir
	MOVE.B	PLASMA_DIR,D5
	NEG.B	D5
	MOVE.B	D5,PLASMA_DIR
	MOVE.B	D5,X_FULL_DIR
	.noChangeDir:
	RTS

__BLK_KICK:
	MOVE.W	AUDIOCHLEV_2,D0
	CMP.W	#$F,D0
	BNE.S	.secondKick
	MOVE.W	#$46,Y_EASYING_INDX
	.secondKick:
	MOVE.W	AUDIOCHLEV_1,D0
	CMP.W	#$F,D0
	BNE.S	__BLK_SHUFFLE
	MOVE.W	#$2E,X_EASYING_INDX
__BLK_SHUFFLE:
	BSR.W	__X_LFO_EASYING

	TST.B	FRAME_STROBE
	BNE.W	.oddFrame
	MOVE.B	#1,FRAME_STROBE

	MOVE.W	X_EASYING,X_1_4_SHIFT
	MOVE.W	X_EASYING,Y_1_4_SHIFT

	MOVE.L	#PLANE0,A3
	MOVE.L	#PLANE0,A4

	MOVE.B	#-1,X_1_4_DIR
	BSR.W	__SCROLL_X_1_4

	MOVE.L	#PLANE0+bpl/2,A3
	MOVE.L	#PLANE0+bpl/2,A4

	MOVE.B	#1,Y_1_4_DIR
	BSR.W	__SCROLL_Y_1_4

	MOVE.L	#PLANE0+bpl*(h+32)/2,A3
	MOVE.L	#PLANE0+bpl*(h+32)/2,A4
	
	MOVE.B	#-1,Y_1_4_DIR
	BSR.W	__SCROLL_Y_1_4

	MOVE.L	#PLANE0+bpl*h/2-(bpl/2),A3
	MOVE.L	#PLANE0+bpl*h/2-(bpl/2),A4

	MOVE.B	#1,X_1_4_DIR
	BSR.W	__SCROLL_X_1_4

	MOVE.L	#PLANE1,A4
	BSR.W	__BLIT_DITHER_TILE

	MOVE.L	#PLANE1,A3
	MOVE.L	#PLANE1,A4

	MOVE.B	#-1,X_1_4_DIR
	BSR.W	__SCROLL_X_1_4

	MOVE.L	#PLANE1+bpl/2,A3
	MOVE.L	#PLANE1+bpl/2,A4

	MOVE.B	#1,Y_1_4_DIR
	BSR.W	__SCROLL_Y_1_4

	MOVE.L	#PLANE1+bpl*(h+32)/2,A3
	MOVE.L	#PLANE1+bpl*(h+32)/2,A4
	
	MOVE.B	#-1,Y_1_4_DIR
	BSR.W	__SCROLL_Y_1_4

	MOVE.L	#PLANE1+bpl*h/2-(bpl/2),A3
	MOVE.L	#PLANE1+bpl*h/2-(bpl/2),A4

	MOVE.B	#1,X_1_4_DIR
	BSR.W	__SCROLL_X_1_4

	BRA.W	.evenFrame
	;######################################
	.oddFrame:
	MOVE.B	#0,FRAME_STROBE

	BSR.W	__Y_LFO_EASYING
	MOVE.W	Y_EASYING,Y_1_4_SHIFT	; VSHIFT

	MOVE.L	#PLANE0,A4
	BSR.W	__BLIT_GLITCH_TILE

	MOVE.L	#PLANE0,A3
	MOVE.L	#PLANE0,A4

	MOVE.B	#1,Y_1_4_DIR
	BSR.W	__SCROLL_Y_1_4

	MOVE.L	#PLANE0+bpl*h/2,A3
	MOVE.L	#PLANE0+bpl*h/2,A4

	MOVE.B	#-1,X_1_4_DIR
	BSR.W	__SCROLL_X_1_4

	MOVE.L	#PLANE0+bpl/2,A3
	MOVE.L	#PLANE0+bpl/2,A4

	MOVE.B	#1,X_1_4_DIR
	BSR.W	__SCROLL_X_1_4

	MOVE.L	#PLANE0+bpl*(h+32)/2-(bpl/2),A3
	MOVE.L	#PLANE0+bpl*(h+32)/2-(bpl/2),A4

	MOVE.B	#-1,Y_1_4_DIR
	BSR.W	__SCROLL_Y_1_4

	MOVE.L	#PLANE1,A3
	MOVE.L	#PLANE1,A4

	MOVE.B	#1,Y_1_4_DIR
	BSR.W	__SCROLL_Y_1_4

	MOVE.L	#PLANE1+bpl*h/2,A3
	MOVE.L	#PLANE1+bpl*h/2,A4

	MOVE.B	#-1,X_1_4_DIR
	BSR.W	__SCROLL_X_1_4

	MOVE.L	#PLANE1+bpl/2,A3
	MOVE.L	#PLANE1+bpl/2,A4
	
	MOVE.B	#1,X_1_4_DIR
	BSR.W	__SCROLL_X_1_4

	MOVE.L	#PLANE1+bpl*(h+32)/2-(bpl/2),A3
	MOVE.L	#PLANE1+bpl*(h+32)/2-(bpl/2),A4

	MOVE.B	#-1,Y_1_4_DIR
	BSR.W	__SCROLL_Y_1_4
	.evenFrame:
	RTS

__BLK_RESET:
	MOVE.W	#0,X_SHIFT
	MOVE.L	#DITHERPLANE,A3
	MOVE.L	#PLANE1,A4
	MOVE.B	#1,X_DIR
	BSR.W	__SCROLL_X
	MOVE.B	#0,X_DIR
	BSR.W	__SCROLL_X
	;MOVE.L	GLITCHRESET,A3
	;MOVE.L	#PLANE0,A4
	;MOVE.B	#1,X_DIR
	;BSR.W	__SCROLL_X
	;MOVE.B	#0,X_DIR
	;BSR.W	__SCROLL_X
	;MOVE.B	#1,FRAME_STROBE
	RTS

__BLK_GRADIENT_MIX:
	;;### NEW BPL POINTERS ####
	;LEA	COPPER\.BplPtrs2,A1
	;MOVE.L	#GRADIENTPLANENEG,A0
	;BSR.W	PokePtrs
	;MOVE.L	#PLANE1,A0
	;BSR.W	PokePtrs
	;MOVE.L	#PLANE0,A0
	;;ADD.L	#bpl,A0
	;LEA	40(A0),A0		; OPT
	;BSR.W	PokePtrs
	;;### NEW BPL POINTERS ####
	;MOVE.W	#$6000|(.runOnce-(__BLK_GRADIENT_MIX+2)),__BLK_GRADIENT_MIX	; mock a BRA.S
	;.runOnce:			; BEWARE THE SMC !!
	MOVE.W	#0,Y_HALF_SHIFT
	MOVE.W	AUDIOCHLEV_2,D1
	;LSR.W	#1,D1
	ADD.B	#2,D1

	MOVE.W	AUDIOCHLEV_0,D2
	;LSR.W	#1,D2

	MOVE.W	D1,BLIT_A_MOD
	MOVE.W	D2,BLIT_D_MOD

	MOVE.L	#GRADIENTPLANE,A3
	MOVE.L	#PLANE0,A4

	MOVE.B	#-1,Y_HALF_DIR
	BSR.W	__SCROLL_Y_HALF

	MOVE.W	D2,BLIT_A_MOD
	MOVE.W	D1,BLIT_D_MOD

	MOVE.L	#GRADIENTPLANENEG,A3
	MOVE.L	#PLANE1,A4

	MOVE.B	#-1,Y_HALF_DIR
	BSR.W	__SCROLL_Y_HALF
	RTS

__BLK_BEGIN_PRE:
	;MOVE.B	#0,X_SHIFT_LFO_MIN		; WIDE WOBBLES
	;MOVE.B	#14,X_SHIFT_LFO_MAX		; WIDE WOBBLES
	MOVE.W	MED_BLOCK_LINE,D1
	CMP.W	#48,D1
	BGE.S	__BLK_BEGIN
	CMP.W	#32,D1
	BGE.W	__BLK_5_ROUND
__BLK_BEGIN_MID:
	MOVE.W	MED_BLOCK_LINE,D1		; FLICKER!
	CMP.W	#48,D1			; FLICKER!
	BGE.W	__BLK_5_FLICKER
__BLK_BEGIN:
	;## CODE TO CHECK FOR SPECIFIC INTSRUMENT+NOTE
	MOVE.W	AUDIOCHLEV_3,D1
	CMP.W	#$F,D1
	BNE.S	.noChangeDir
	MOVE.B	MED_TRK_3_NOTE,D1
	CMP.B	#$1B,D1			; $1B $0F $19 $0C
	BEQ.S	.okChangeDir
	CMP.B	#$19,D1
	BEQ.S	.okChangeDir
	CMP.B	#$0C,D1
	BNE.S	.noChangeDir
	.okChangeDir:
	MOVE.B	X_PROGR_TYPE,D5
	NEG.B	D5
	MOVE.B	D5,X_PROGR_TYPE
	MOVE.B	X_PROGR_DIR,D5
	NEG.B	D5
	MOVE.B	D5,X_PROGR_DIR
	MOVE.B	Y_PROGR_TYPE,D5
	NEG.B	D5
	MOVE.B	D5,Y_PROGR_TYPE
	MOVE.B	#1,Y_PROGR_DIR
	MOVE.W	MED_BLOCK_LINE,D1		; STUPID FLICKER
	CMP.W	#48,D1			; STUPID FLICKER
	BLO.S	.noChangeDir		; STUPID FLICKER
	MOVE.B	#-1,Y_PROGR_DIR		; STUPID FLICKER
	.noChangeDir:

	;MOVE.B	#1,X_LFO_INVERT_DIR
	MOVE.B	#0,X_SHIFT_LFO_MIN		; WIDE WOBBLES
	MOVE.B	#14,X_SHIFT_LFO_MAX		; WIDE WOBBLES
	;BSR.W	__X_SHIFT_LFO

	TST.B	FRAME_STROBE
	BNE.W	.oddFrame
	MOVE.B	#1,FRAME_STROBE

	;## GLITCH ####################
	MOVE.W	#2*64+w/16,BLIT_SIZE
	MOVE.W	#-1,BLIT_A_MOD
	MOVE.W	#0,BLIT_D_MOD

	MOVE.L	#PLANE0+bpl*(h-2),A4
	BSR.W	__BLIT_GLITCH_BAND
	MOVE.L	#PLANE1+bpl*(h-2),A4
	BSR.W	__BLIT_GLITCH_BAND
	MOVE.W	#0,BLIT_A_MOD
	;## GLITCH ####################

	MOVE.L	#PLANE0,A3
	MOVE.L	#PLANE0,A4
	BSR.W	__SCROLL_X_PROGR_SPLITX2

	MOVE.L	#PLANE1,A3
	MOVE.L	#PLANE1,A4
	BSR.W	__SCROLL_X_PROGR_SPLITX2

	BRA.W	.evenFrame
	.oddFrame:
	MOVE.B	#0,FRAME_STROBE

	MOVE.L	#PLANE0,A3
	MOVE.L	#PLANE0,A4
	BSR.W	__SCROLL_Y_PROGR

	MOVE.L	#PLANE1,A3
	MOVE.L	#PLANE1,A4
	BSR.W	__SCROLL_Y_PROGR
	.evenFrame:
	RTS

__BLK_BEGIN3_PRE:
	TST.W	AUDIOCHLEV_1
	BEQ.S	__BLK_BEGIN3
	LEA	COLORSEQ1,A1
	MOVE.W	AUDIOCHLEV_1,D1	; FLASH KICK
	;LSR.W	#1,D1
	LSL.W	#$2,D1
	MOVE.L	(A1,D1.W),COPPER\.Palette

	MOVE.L	#PLANE3,A4
	BSR.W	__BLIT_DITHER_TILE
	;RTS
__BLK_BEGIN3:
	TST.W	MED_STEPSEQ_POS
	BNE.S	.noChangeDir
	MOVE.W	AUDIOCHLEV_0,D1
	CMP.W	#$F,D1
	BNE.S	.noChangeDir
	MOVE.B	Y_PROGR_TYPE,D5
	NEG.B	D5
	MOVE.B	D5,Y_PROGR_TYPE
	MOVE.B	X_PROGR_DIR,D5
	NEG.B	D5
	MOVE.B	D5,X_PROGR_DIR
	MOVE.B	Y_PROGR_DIR,D5
	NEG.B	D5
	MOVE.B	D5,Y_PROGR_DIR
	.noChangeDir:

	TST.W	AUDIOCHLEV_0
	BNE.W	__BLK_BLEND

	;## DRAW GLITCH ##
	MOVE.W	#2*64+w/16,BLIT_SIZE
	MOVE.W	#-1,BLIT_A_MOD
	MOVE.W	#0,BLIT_D_MOD

	MOVE.L	#PLANE0+bpl*(h-2),A4
	;ADD.L	#bpl*(h-2),A4
	BSR.W	__BLIT_GLITCH_BAND

	MOVE.L	#PLANE1+bpl*(h-2),A4
	;ADD.L	#bpl*(h-2),A4
	BSR.W	__BLIT_GLITCH_BAND
	;## DRAW GLITCH ##

	MOVE.W	AUDIOCHLEV_2,BLIT_A_MOD
	MOVE.W	AUDIOCHLEV_2,BLIT_D_MOD
	MOVE.W	#2,Y_HALF_SHIFT
	MOVE.B	#-1,Y_HALF_DIR
	MOVE.L	#PLANE0,A3
	MOVE.L	#PLANE0,A4
	BSR.W	__SCROLL_Y_HALF

	MOVE.B	#-1,Y_HALF_DIR
	MOVE.L	#PLANE1,A3
	MOVE.L	#PLANE1,A4
	BSR.W	__SCROLL_Y_HALF
	RTS

__BLK_BEGIN4_POST:
	MOVE.W	MED_BLOCK_LINE,D0
	CMP.W	#$4,D0
	BGE.S	__BLK_BEGIN4
	LEA	COLORSEQ1,A1
	MOVE.W	AUDIOCHLEV_1,D1	; FLASH KICK
	SUB.W	#$5,D1
	LSL.W	#$2,D1		; *2
	MOVE.L	(A1,D1.W),COPPER\.Palette

	MOVE.L	#PLANE3,A1
	BSR.W	__WIPE_PLANE
	;RTS
__BLK_BEGIN4:
	TST.W	MED_STEPSEQ_POS
	BNE.W	.noChangeDir
	MOVE.W	AUDIOCHLEV_0,D1
	CMP.W	#$F,D1
	BNE.S	.noChangeDir
	MOVE.B	X_PROGR_DIR,D5
	NEG.B	D5
	MOVE.B	D5,X_PROGR_DIR
	MOVE.B	X_PROGR_TYPE,D5
	NEG.B	D5
	MOVE.B	D5,X_PROGR_TYPE
	MOVE.B	Y_FULL_DIR,D5
	NEG.B	D5
	MOVE.B	D5,Y_FULL_DIR
	.noChangeDir:

	TST.W	AUDIOCHLEV_0
	BEQ.W	__BLK_SHUFFLE

	;## DRAW GLITCH ##
	MOVE.W	#2*64+w/16,BLIT_SIZE
	MOVE.W	#-1,BLIT_A_MOD
	MOVE.W	#0,BLIT_D_MOD

	MOVE.L	#PLANE0+bpl*(h-2),A4
	BSR.W	__BLIT_GLITCH_BAND
	;ADD.L	#bpl*(h-2),A4
	BSR.W	__BLIT_GLITCH_BAND

	MOVE.L	#PLANE1+bpl*(h-2),A4
	BSR.W	__BLIT_GLITCH_BAND
	;ADD.L	#bpl*(h-2),A4
	BSR.W	__BLIT_GLITCH_BAND
	;## DRAW GLITCH ##

	BRA.W	__STROBE_SHUFFLE
	RTS

__BLK_BEGIN4_PRE:
	;## COLORS SHIFTS ##
	MOVE.W	MED_BLOCK_LINE,D1
	CMP.W	#48,D1
	BLO.S	.noColorShift
	LEA	COPPER\.Palette,A2
	MOVE.L	COLSEQ2_PTR,A1
	TST.W	(A1)
	BEQ.S	.noColorShift
	CMP.W	#$0180,(A1)
	BEQ.S	.yes180
	LEA	16(A2),A2
	.yes180:
	REPT 4
	MOVE.L	(A1)+,(A2)+
	ENDR
	MOVE.L	A1,COLSEQ2_PTR
	.noColorShift:
	;## COLORS SHIFTS ##

	MOVE.W	#2*64+w/16,BLIT_SIZE
	MOVE.W	#-1,BLIT_A_MOD
	MOVE.W	#0,BLIT_D_MOD

	MOVE.L	#PLANE0,A4
	BSR.W	__BLIT_GLITCH_BAND
	MOVE.L	#PLANE0+bpl*(h-2),A4
	BSR.W	__BLIT_GLITCH_BAND

	MOVE.L	#PLANE1,A4
	BSR.W	__BLIT_GLITCH_BAND
	MOVE.L	#PLANE1+bpl*(h-2),A4
	BSR.W	__BLIT_GLITCH_BAND

	TST.W	MED_STEPSEQ_POS
	BNE.W	.noChangeDir1
	MOVE.W	AUDIOCHLEV_0,D1
	CMP.W	#$F,D1
	BNE.S	.noChangeDir1
	MOVE.B	X_PROGR_DIR,D5
	NEG.B	D5
	MOVE.B	D5,X_PROGR_DIR
	MOVE.B	X_PROGR_TYPE,D5
	NEG.B	D5
	MOVE.B	D5,X_PROGR_TYPE
	MOVE.B	Y_FULL_DIR,D5
	NEG.B	D5
	MOVE.B	D5,Y_FULL_DIR
	.noChangeDir1:

	;## CRAZY FIX! ##
	MOVE.W	MED_BLOCK_LINE,D1
	CMP.W	#32,D1
	BLO.S	.skip

	MOVE.W	MED_STEPSEQ_POS,D1
	CMP.W	#$8,D1
	BEQ.S	.ok1
	BRA.S	.noChangeDir2

	.ok1:
	MOVE.W	AUDIOCHLEV_2,D1
	CMP.W	#$F,D1
	BNE.S	.noChangeDir2

	MOVE.B	X_PROGR_DIR,D5
	NEG.B	D5
	MOVE.B	D5,X_PROGR_DIR
	MOVE.B	X_PROGR_TYPE,D5
	NEG.B	D5
	MOVE.B	D5,X_PROGR_TYPE
	.noChangeDir2:
	BRA.S	__STROBE_SHUFFLE
	;## CRAZY FIX! ##

	.skip:
	MOVE.W	AUDIOCHLEV_0,D1
	CMP.W	#$9,D1
	BLO.S	.noShuffle
	BRA.W	__STROBE_SHUFFLE

	.noShuffle:
	MOVE.B	#$7,Y_SHIFT_LFO_MAX
	BRA.W	__BLK_0\.noChangeDir
	RTS

__STROBE_SHUFFLE:
	MOVE.W	#$3,Y_HALF_SHIFT
	MOVE.W	AUDIOCHLEV_0,BLIT_A_MOD
	MOVE.W	AUDIOCHLEV_0,BLIT_D_MOD

	TST.B	FRAME_STROBE
	BNE.S	.oddFrame
	MOVE.B	#1,FRAME_STROBE

	MOVE.L	#PLANE0,A3
	MOVE.L	#PLANE0,A4
	BSR.W	__SCROLL_X_PROGR

	MOVE.L	#PLANE1,A3
	MOVE.L	#PLANE1,A4
	BSR.W	__SCROLL_X_PROGR

	BRA.S	.evenFrame
	.oddFrame:
	MOVE.B	#0,FRAME_STROBE
	;MOVE.B	Y_HALF_DIR,X_HALF_DIR

	MOVE.B	#-1,Y_HALF_DIR
	MOVE.L	#PLANE0,A3
	MOVE.L	#PLANE0,A4
	BSR.W	__SCROLL_Y_HALF

	MOVE.B	#-1,Y_HALF_DIR
	MOVE.L	#PLANE1,A3
	MOVE.L	#PLANE1,A4
	BSR.W	__SCROLL_Y_HALF

	;MOVE.B	X_HALF_DIR,Y_HALF_DIR
	.evenFrame:
	RTS

__BLK_0_POST:
	;### NEW BPL POINTERS ####
	LEA	COPPER\.BplPtrs2,A1
	MOVE.L	#PLANE0,A0
	BSR.W	PokePtrs
	LEA	8(A1),A1
	;LEA	COPPER\.BplPtrs2+16,A1
	;MOVE.L	#PLANE0,A0
	;ADD.L	#bpl,A0
	LEA	40(A0),A0		; OPT
	BSR.W	PokePtrs
	MOVE.W	#$6000|(.runOnce-(__BLK_0_POST+2)),__BLK_0_POST	; mock a BRA.S

	;## COLORS SHIFTS ##
	LEA	COPPER\.Palette,A2
	LEA	COLSEQ2_RESET,A1
	REPT 8
	MOVE.L	(A1)+,(A2)+
	ENDR
	;## COLORS SHIFTS ##
	.runOnce:			; BEWARE THE SMC !!
	
	MOVE.B	X_PROGR_DIR,D5
	NEG.B	D5
	MOVE.B	D5,X_PROGR_DIR

	MOVE.W	MED_BLOCK_LINE,D0
	CMP.W	#$4,D0
	BGE.S	__BLK_0
	LEA	COLORSEQ3,A1
	MOVE.W	AUDIOCHLEV_1,D1	; FLASH KICK
	;SUB.W	#$7,D1
	LSL.W	#$2,D1		; *2
	MOVE.L	(A1,D1.W),COPPER\.Palette

	BRA.S	__BLK_0
__BLK_0_PRE:
	MOVE.W	MED_BLOCK_LINE,D1
	CMP.W	#$32,D1
	BGE.W	__BLK_SHUFFLE
__BLK_0:
	TST.W	MED_STEPSEQ_POS
	BNE.S	.noChangeDir
	MOVE.W	AUDIOCHLEV_0,D1
	CMP.W	#$F,D1
	BNE.S	.noChangeDir
	MOVE.B	X_PROGR_DIR,D5
	NEG.B	D5
	MOVE.B	D5,X_PROGR_DIR
	MOVE.B	D5,Y_SHIFT_LFO
	.noChangeDir:

	TST.B	FRAME_STROBE
	BNE.S	.oddFrame
	MOVE.B	#1,FRAME_STROBE

	;MOVE.L	#(GREEN_REG<<16)|CYAN_VAL,COPPER\.Palette+$14

	MOVE.B	#$F,Y_SHIFT_LFO_MAX
	;MOVE.B	#$F,Y_SHIFT_LFO_MIN
	MOVE.B	#1,Y_LFO_INVERT_DIR
	BSR.W	__Y_SHIFT_LFO

	MOVE.L	#PLANE0,A3
	MOVE.L	#PLANE0,A4
	BSR.W	__SCROLL_Y_FULL

	MOVE.L	#PLANE1,A3
	MOVE.L	#PLANE1,A4
	BSR.W	__SCROLL_Y_FULL

	BRA.S	.evenFrame
	.oddFrame:
	MOVE.B	#0,FRAME_STROBE

	;LEA	COPPER\.Palette+20,A2
	;MOVE.L	#(GREEN_REG<<16)|RED_VAL,(A2)
	;MOVE.L	#(GREEN_REG<<16)|RED_VAL,COPPER\.Palette+$14	; SUPER OPT SYNTAX | 28 CYCLES

	MOVE.L	#PLANE1,A3
	MOVE.L	#PLANE1,A4
	BSR.W	__SCROLL_X_PROGR_SPLITX2

	MOVE.L	#PLANE0,A3
	MOVE.L	#PLANE0,A4
	BSR.W	__SCROLL_X_PROGR_SPLITX2
	.evenFrame:
	RTS

__BLK_PLASMA_PRE:
	MOVE.W	MED_BLOCK_LINE,D0
	CMP.W	#$32,D0
	BLO.W	__BLK_0
	;MOVE.W	AUDIOCHLEV_2,D1
	;CMP.W	#$F,D1
	;BEQ.W	__BLK_RESET
	BRA.W	__BLK_KICK
	RTS

__BLK_BLEND:
	;MOVE.B	#0,FRAME_STROBE
	TST.B	FRAME_STROBE
	BNE.W	.oddFrame
	MOVE.B	#1,FRAME_STROBE

	MOVE.L	#PLANE0,A3
	MOVE.L	#PLANE0,A4
	BSR.W	__SCROLL_Y_PROGR

	MOVE.L	#PLANE1,A3
	MOVE.L	#PLANE1,A4
	BSR.W	__SCROLL_Y_PROGR

	BRA.W	.evenFrame
	.oddFrame:
	MOVE.B	#0,FRAME_STROBE

	MOVE.L	#PLANE0,A3
	MOVE.L	#PLANE0,A4
	BSR.W	__SCROLL_X_PROGR_SPLITX2

	MOVE.L	#PLANE1,A3
	MOVE.L	#PLANE1,A4
	BSR.W	__SCROLL_X_PROGR_SPLITX2
	.evenFrame:
	RTS

__BLK_5_ROUND:
	MOVE.B	#1,X_PROGR_DIR		; NEEDS FIX FOR LATER! (-1)
	BRA.S	__BLK_5

__BLK_5_FLICKER:
	MOVE.B	#1,X_SHIFT_LFO_MIN		; FAST FLICKER
	MOVE.B	#8,X_SHIFT_LFO_MAX		; FAST FLICKER
	MOVE.B	#1,X_LFO_INVERT_DIR		; FAST FLICKER
	BSR.W	__X_SHIFT_LFO		; FAST FLICKER
	MOVE.W	#$A,Y_EASYING_INDX
__BLK_5:
	BSR.W	__Y_LFO_EASYING
	MOVE.W	Y_EASYING,Y_FULL_SHIFT

	TST.B	FRAME_STROBE
	BNE.S	.oddFrame
	MOVE.B	#1,FRAME_STROBE

	MOVE.L	#PLANE0,A3
	MOVE.L	#PLANE0,A4
	BSR.W	__SCROLL_X_PROGR_SPLITX2
	;BSR.W	__BLIT_DITHER_TILE

	MOVE.L	#PLANE1,A3
	MOVE.L	#PLANE1,A4
	BSR.W	__SCROLL_X_PROGR_SPLITX2
	;BSR.W	__BLIT_GLITCH_TILE

	BRA.S	.evenFrame
	.oddFrame:
	MOVE.B	#0,FRAME_STROBE

	MOVE.L	#PLANE0,A3
	MOVE.L	#PLANE0,A4
	BSR.W	__SCROLL_Y_FULL
	;BSR.W	__BLIT_DITHER_TILE

	MOVE.L	#PLANE1,A3
	MOVE.L	#PLANE1,A4
	BSR.W	__SCROLL_Y_FULL
	;BSR.W	__BLIT_GLITCH_TILE

	.evenFrame:
	MOVE.B	#-1,X_PROGR_DIR		; NEEDS FIX FOR LATER! (-1)
	RTS

__BLK_VECTOR_SPREAD:
	;### NEW BPL POINTERS ####
	LEA	COPPER\.BplPtrs2+24,A1
	LEA	GRADIENTPLANENEG+40,A0
	BSR.W	PokePtrs
	;### NEW BPL POINTERS ####
	;ADDI.L	#10,VECT_PTR	; MESSES COORDZ
	MOVE.W	#$6000|(.runOnce-(__BLK_VECTOR_SPREAD+2)),__BLK_VECTOR_SPREAD	; mock a BRA.S
	.runOnce:			; BEWARE THE SMC !!

	LEA	PLANE3,A1		; A4
	MOVE.L	A1,A4
	BSR.W	__WIPE_PLANE
	MOVE.W	#$FFFF,BLIT_PATT
	MOVE.W	#$8,V_MAX_VECTORS
	BSR.W	__BLIT_VECTORS

	MOVE.W	AUDIOCHLEV_3,D1
	LSR.W	#2,D1
	LSL.W	#2,D1
	ADD.W	#2,D1
	MOVE.W	D1,V_SHIFT
	BSR.W	__UPDATE_ANGLE

	MOVE.W	MED_STEPSEQ_POS,D0
	CMP.W	#$B,D0
	BGE.W	__BLK_DISPERSE

	TST.B	FRAME_STROBE
	BNE.W	.oddFrame
	;## VERTICAL GLITCH ###########
	MOVE.L	#$10000,BLIT_A_MOD
	MOVE.L	#PLANE1+bpl/2-2,A4
	BSR.W	__BLIT_GLITCH_SLICE
	;## VERTICAL GLITCH ###########
	BRA.W	.evenFrame
	;######################################
	.oddFrame:
	;## VERTICAL GLITCH ###########
	MOVE.L	#$10000,BLIT_A_MOD
	MOVE.L	#PLANE0+bpl/2-2,A4
	BSR.W	__BLIT_GLITCH_SLICE
	;## VERTICAL GLITCH ###########
	.evenFrame:
	BRA.S	__BLK_EXPLODE
	RTS

__BLK_EXPLODE:
	MOVE.W	#0,BLIT_A_MOD		; D7 HERE FOR CRAZY FX!!
	MOVE.W	#0,BLIT_D_MOD		; BLTDMOD

	TST.B	FRAME_STROBE
	BNE.W	.oddFrame
	MOVE.B	#1,FRAME_STROBE

	LEA	EASYING_INDX,A1
	LEA	4(A1),A1
	BSR.W	__LFO_EASYING
	MOVE.W	EASYING,X_1_4_SHIFT
	LEA	EASYING_INDX,A1
	LEA	6(A1),A1
	BSR.W	__LFO_EASYING

	MOVE.W	EASYING,Y_1_4_SHIFT

	MOVE.L	#PLANE0,A3
	MOVE.L	#PLANE0,A4
	MOVE.B	#1,Y_1_4_DIR
	BSR.W	__SCROLL_Y_1_4
	MOVE.L	#PLANE1,A3
	MOVE.L	#PLANE1,A4
	BSR.W	__SCROLL_Y_1_4

	MOVE.L	#PLANE0+bpl*h/2,A3
	MOVE.L	#PLANE0+bpl*h/2,A4
	MOVE.B	#-1,X_1_4_DIR
	BSR.W	__SCROLL_X_1_4
	MOVE.L	#PLANE1+bpl*h/2,A3
	MOVE.L	#PLANE1+bpl*h/2,A4
	BSR.W	__SCROLL_X_1_4

	MOVE.L	#PLANE0+bpl/2,A3
	MOVE.L	#PLANE0+bpl/2,A4
	BSR.W	__SCROLL_X_1_4
	MOVE.L	#PLANE1+bpl/2,A3
	MOVE.L	#PLANE1+bpl/2,A4
	MOVE.B	#1,X_1_4_DIR
	BSR.W	__SCROLL_X_1_4

	MOVE.L	#PLANE0+bpl*(h+32)/2-(bpl/2),A3
	MOVE.L	#PLANE0+bpl*(h+32)/2-(bpl/2),A4
	MOVE.B	#-1,Y_1_4_DIR
	BSR.W	__SCROLL_Y_1_4
	MOVE.L	#PLANE1+bpl*(h+32)/2-(bpl/2),A3
	MOVE.L	#PLANE1+bpl*(h+32)/2-(bpl/2),A4
	BSR.W	__SCROLL_Y_1_4

	BRA.W	.evenFrame
	;######################################
	.oddFrame:
	MOVE.B	#0,FRAME_STROBE

	LEA	EASYING_INDX,A1
	BSR.W	__LFO_EASYING
	MOVE.W	EASYING,X_1_4_SHIFT
	LEA	EASYING_INDX,A1
	LEA	2(A1),A1
	BSR.W	__LFO_EASYING
	MOVE.W	EASYING,Y_1_4_SHIFT

	MOVE.L	#PLANE0,A3
	MOVE.L	#PLANE0,A4
	MOVE.B	#-1,X_1_4_DIR
	BSR.W	__SCROLL_X_1_4
	MOVE.L	#PLANE1,A3
	MOVE.L	#PLANE1,A4
	BSR.W	__SCROLL_X_1_4

	MOVE.L	#PLANE0+bpl/2,A3
	MOVE.L	#PLANE0+bpl/2,A4
	MOVE.B	#1,Y_1_4_DIR
	BSR.W	__SCROLL_Y_1_4
	MOVE.L	#PLANE1+bpl/2,A3
	MOVE.L	#PLANE1+bpl/2,A4
	BSR.W	__SCROLL_Y_1_4

	MOVE.L	#PLANE0+bpl*(h+32)/2,A3
	MOVE.L	#PLANE0+bpl*(h+32)/2,A4
	MOVE.B	#-1,Y_1_4_DIR
	BSR.W	__SCROLL_Y_1_4
	MOVE.L	#PLANE1+bpl*(h+32)/2,A3
	MOVE.L	#PLANE1+bpl*(h+32)/2,A4
	BSR.W	__SCROLL_Y_1_4

	MOVE.L	#PLANE0+bpl*h/2-(bpl/2),A3
	MOVE.L	#PLANE0+bpl*h/2-(bpl/2),A4
	MOVE.B	#1,X_1_4_DIR
	BSR.W	__SCROLL_X_1_4
	MOVE.L	#PLANE1+bpl*h/2-(bpl/2),A3
	MOVE.L	#PLANE1+bpl*h/2-(bpl/2),A4
	BSR.W	__SCROLL_X_1_4
	.evenFrame:
	RTS

__BLK_VECTOR_SPREAD2:
	;### NEW BPL POINTERS ####
	;LEA	COPPER\.BplPtrs2+24,A1
	;LEA	PLANE3-42,A0
	;BSR.W	PokePtrs
	;### NEW BPL POINTERS ####
	;## COLORS SHIFTS ##
	LEA	COPPER\.Palette,A2
	LEA	COLSEQ_RESET,A1
	REPT 8
	MOVE.L	(A1)+,(A2)+
	ENDR
	;## COLORS SHIFTS ##
	ADDI.L	#26,VECT_PTR	; MESSES COORDZ
	MOVE.W	#$6000|(.runOnce-(__BLK_VECTOR_SPREAD2+2)),__BLK_VECTOR_SPREAD2	; mock a BRA.S
	.runOnce:			; BEWARE THE SMC !!

	TST.W	MED_STEPSEQ_POS
	BNE.S	.noResetKick

	MOVE.W	AUDIOCHLEV_2,D1
	.noResetKick:
	BSR.S	__BLK_KICK_SHIFT

	LEA	PLANE3,A1		; A4
	MOVE.L	A1,A4
	BSR.W	__WIPE_PLANE
	MOVE.W	#$FFFF,BLIT_PATT
	MOVE.W	#$8,V_MAX_VECTORS
	BSR.W	__BLIT_VECTORS

	MOVE.W	AUDIOCHLEV_2,D1
	LSR.W	#2,D1
	LSL.W	#2,D1
	ADD.W	#2,D1
	MOVE.W	D1,V_SHIFT
	BSR.W	__UPDATE_ANGLE

	MOVE.W	MED_STEPSEQ_POS,D0
	CMP.W	#$B,D0
	BGE.W	__BLK_DISPERSE

	TST.B	FRAME_STROBE
	BNE.W	.oddFrame
	;## VERTICAL GLITCH ###########
	MOVE.L	#$10001,BLIT_A_MOD
	MOVE.L	#PLANE1+bpl/2-2,A4
	BSR.W	__BLIT_GLITCH_SLICE
	;## VERTICAL GLITCH ###########
	BRA.W	.evenFrame
	;######################################
	.oddFrame:
	;## VERTICAL GLITCH ###########
	MOVE.L	#$10001,BLIT_A_MOD
	MOVE.L	#PLANE0+bpl/2-2,A4
	BSR.W	__BLIT_GLITCH_SLICE
	;## VERTICAL GLITCH ###########
	.evenFrame:
	BRA.W	__BLK_EXPLODE
	RTS

__BLK_KICK_SHIFT:
	;## COLORS SHIFTS ##
	CMP.W	#$F,D1
	BNE.S	.noResetPointer
	MOVE.L	#COLORSEQ5,COLSEQ5_PTR
	.noResetPointer:

	LEA	COPPER\.Palette,A2
	MOVE.L	COLSEQ5_PTR,A1
	TST.W	(A1)
	BEQ.S	.noColorShift
	MOVE.L	(A1)+,(A2)
	MOVE.L	A1,COLSEQ5_PTR
	.noColorShift:
	;## COLORS SHIFTS ##
	RTS

__BLK_VECTSPRD_KICK:
	MOVE.W	AUDIOCHLEV_1,D1
	BSR.S	__BLK_KICK_SHIFT
	BRA.S	__BLK_VECTOR_SPREAD_PRE\.noSpread
__BLK_VECTOR_SPREAD_PRE:
	MOVE.W	MED_BLOCK_LINE,D0
	TST.W	D0
	BNE.S	.noChangeDir
	MOVE.W	V_DIR,D1
	NEG.W	D1
	MOVE.W	D1,V_DIR
	.noChangeDir:
	CMP.W	#32,D0
	BLO.W	__BLK_VECTOR_SPREAD

	.noSpread:
	LEA	PLANE3,A1
	MOVE.L	A1,A4
	BSR.W	__WIPE_PLANE
	MOVE.W	#$FFFF,BLIT_PATT
	MOVE.W	#$7,V_MAX_VECTORS
	BSR.W	__BLIT_VECTORS

	MOVE.W	MED_TRK_2_COUNT,D1
	MOVE.W	#$AF5B,D2
	LSR.W	D1,D2
	MOVE.W	D2,BLIT_PATT

	MOVE.W	#$2,V_MAX_VECTORS
	LEA	PLANE1,A4
	BSR.W	__BLIT_VECTORS
	MOVE.W	BLIT_PATT,D2
	NEG.W	D2
	MOVE.W	D2,BLIT_PATT
	LEA	PLANE0+40,A4
	BSR.W	__BLIT_VECTORS

	MOVE.W	AUDIOCHLEV_0,D1
	LSR.W	#1,D1
	LSL.W	#1,D1
	ADD.W	#2,D1
	MOVE.W	D1,V_SHIFT
	BSR.W	__UPDATE_ANGLE

	BRA.W	__BLK_DIAG_FLUID_NOGLITCH
	RTS

__BLK_DIAG_RESET:
	;### NEW BPL POINTERS ####
	LEA	COPPER\.BplPtrs2+24,A1
	LEA	PLANE3-40,A0
	BSR.W	PokePtrs
	;### NEW BPL POINTERS ####
	SUBI.L	#26,VECT_PTR	; MESSES COORDZ
	MOVE.W	#$6000|(.runOnce-(__BLK_DIAG_RESET+2)),__BLK_DIAG_RESET	; mock a BRA.S
	.runOnce:			; BEWARE THE SMC !!
	BRA.W	__BLK_VECTSPRD_KICK

__BLK_VECTSPRD_GRAD:
	LEA	PLANE3,A1
	MOVE.L	A1,A4
	BSR.W	__WIPE_PLANE
	MOVE.W	#$FFFF,BLIT_PATT
	MOVE.W	#$7,V_MAX_VECTORS
	BSR.W	__BLIT_VECTORS

	MOVE.W	MED_TRK_2_COUNT,D1
	MOVE.W	#$AF5B,D2
	LSR.W	D1,D2
	MOVE.W	D2,BLIT_PATT

	MOVE.W	#$2,V_MAX_VECTORS
	LEA	PLANE1,A4
	BSR.W	__BLIT_VECTORS
	MOVE.W	BLIT_PATT,D2
	NEG.W	D2
	MOVE.W	D2,BLIT_PATT
	LEA	PLANE0+40,A4
	BSR.W	__BLIT_VECTORS

	MOVE.W	AUDIOCHLEV_0,D1
	LSR.W	#1,D1
	LSL.W	#1,D1
	ADD.W	#2,D1
	MOVE.W	D1,V_SHIFT
	BSR.W	__UPDATE_ANGLE

	TST.W	AUDIOCHLEV_1
	BEQ.S	.noGradient

	MOVE.W	MED_STEPSEQ_POS,D0
	CMP.W	#2,D0
	BLO.W	__BLK_GRADIENT_MIX
	CMP.W	#6,D0
	BEQ.W	__BLK_GRADIENT_MIX
	;CMP.W	#14,D0
	;BEQ.W	__BLK_GRADIENT_MIX
	.noGradient:

	BRA.W	__BLK_DIAG_FLUID_NOGLITCH
	RTS

__BLK_VECT_GRAD_PLASMA:
	LEA	PLANE3,A1
	MOVE.L	A1,A4
	BSR.W	__WIPE_PLANE
	MOVE.W	#$FFFF,BLIT_PATT
	MOVE.W	#$C,V_MAX_VECTORS
	BSR.W	__BLIT_VECTORS

	MOVE.W	AUDIOCHLEV_0,D1
	LSR.W	#1,D1
	LSL.W	#1,D1
	ADD.W	#2,D1
	MOVE.W	D1,V_SHIFT
	BSR.W	__UPDATE_ANGLE

	TST.W	AUDIOCHLEV_1
	BEQ.S	.noGradient

	MOVE.W	MED_STEPSEQ_POS,D0
	CMP.W	#2,D0
	BLO.W	__BLK_GRADIENT_MIX
	CMP.W	#6,D0
	BEQ.W	__BLK_GRADIENT_MIX
	;CMP.W	#14,D0
	;BEQ.W	__BLK_GRADIENT_MIX
	.noGradient:

	BRA.W	__BLK_PLASMA
	RTS

__BLK_VECTOR_EXPLODE:
	LEA	PLANE3,A1		; A4
	MOVE.L	A1,A4
	BSR.W	__WIPE_PLANE
	MOVE.W	#$FFFF,BLIT_PATT
	MOVE.W	#$5,V_MAX_VECTORS
	BSR.W	__BLIT_VECTORS

	MOVE.W	MED_TRK_3_INST,BLIT_PATT
	MOVE.W	#$1,V_MAX_VECTORS
	MOVE.W	#$0B05,Drawline\.DrawMode+2	; BEWARE THE SMC!! ;) #$0BCA for normal line
	LEA	PLANE0-40,A4
	BSR.W	__BLIT_VECTORS

	MOVE.W	AUDIOCHLEV_1,D1
	LSR.W	#2,D1
	LSL.W	#2,D1
	ADD.W	#2,D1
	MOVE.W	D1,V_SHIFT
	BSR.W	__UPDATE_ANGLE

	MOVE.W	MED_TRK_0_INST,BLIT_PATT
	LEA	PLANE1+2,A4
	BSR.W	__BLIT_VECTORS

	MOVE.W	#$0BCA,Drawline\.DrawMode+2	; BEWARE THE SMC!! ;) #$0BCA for normal line
	BRA.W	__BLK_EXPLODE
	RTS

__BLK_DISPERSE:
	;## DRAW GLITCH ##
	MOVE.W	#17*64+w/16,BLIT_SIZE
	MOVE.W	#2,BLIT_A_MOD
	MOVE.W	#-2,BLIT_D_MOD

	ADD.L	D1,GLITCHGOOD
	MOVE.L	#PLANE0+bpl*(h-16+6),A4
	BSR.W	__BLIT_GLITCH_BAND
	MOVE.L	#PLANE1+bpl*(h-16+6),A4
	BSR.W	__BLIT_GLITCH_BAND
	;## DRAW GLITCH ##

	MOVE.W	AUDIOCHLEV_0,D1
	LSR.W	#1,D1
	ADD.B	#1,D1
	MOVE.W	D1,BLIT_A_MOD
	MOVE.W	D1,BLIT_D_MOD
	ADD.B	#1,D1
	MOVE.W	D1,Y_HALF_SHIFT

	MOVE.B	#-1,Y_HALF_DIR
	MOVE.L	#PLANE0,A3
	MOVE.L	#PLANE0,A4
	BSR.W	__SCROLL_Y_HALF
	MOVE.B	#-1,Y_HALF_DIR
	MOVE.L	#PLANE1,A3
	MOVE.L	#PLANE1,A4
	BSR.W	__SCROLL_Y_HALF
	RTS

__BLK_PLASMA_VECT:
	;### NEW BPL POINTERS ####
	LEA	COPPER\.BplPtrs2+24,A1
	LEA	GRADIENTPLANE+40,A0
	BSR.W	PokePtrs
	;### NEW BPL POINTERS ####
	MOVE.W	#$6000|(.runOnce-(__BLK_0_VECT+2)),__BLK_0_VECT	; mock a BRA.S
	.runOnce:				; BEWARE THE SMC !!

	MOVE.L	#PLANE3,A1	; A4
	MOVE.L	A1,A4
	BSR.W	__WIPE_PLANE
	MOVE.W	#$FFFF,BLIT_PATT
	BSR.W	__BLIT_VECTORS

	MOVE.W	AUDIOCHLEV_1,D1
	LSR.W	#1,D1
	LSL.W	#1,D1
	ADD.W	#2,D1
	MOVE.W	D1,V_SHIFT
	BSR.W	__UPDATE_ANGLE

	BRA.W	__BLK_PLASMA
	RTS

__BLK_VECT_ALT_0_EXPL:
	MOVE.W	MED_BLOCK_LINE,D0
	CMP.W	#32,D0
	BLO.S	__BLK_0_VECT\.runOnce
	BRA.W	__BLK_VECTOR_EXPLODE
	RTS

__BLK_0_VECT:
	MOVE.B	#1,X_PROGR_DIR
	MOVE.B	#1,Y_FULL_DIR
	MOVE.W	#$6000|(.runOnce-(__BLK_0_VECT+2)),__BLK_0_VECT	; mock a BRA.S
	.runOnce:				; BEWARE THE SMC !!
	;### NEW BPL POINTERS ####
	LEA	COPPER\.BplPtrs2,A1
	LEA	GRADIENTPLANE,A0
	BSR.W	PokePtrs
	LEA	PLANE1,A0
	BSR.W	PokePtrs
	LEA	PLANE0,A0
	BSR.W	PokePtrs
	LEA	GRADIENTPLANENEG-40,A0
	BSR.W	PokePtrs
	;### NEW BPL POINTERS ####

	LEA	PLANE3,A1		; A4
	MOVE.L	A1,A4
	BSR.W	__WIPE_PLANE
	MOVE.W	#$FFFF,BLIT_PATT
	MOVE.W	#$7,V_MAX_VECTORS
	BSR.W	__BLIT_VECTORS

	MOVE.W	AUDIOCHLEV_3,D1
	LSR.W	#1,D1
	LSL.W	#1,D1
	ADD.W	#2,D1
	MOVE.W	D1,V_SHIFT
	BSR.W	__UPDATE_ANGLE

	TST.W	MED_STEPSEQ_POS
	BNE.S	.noChangeDir
	MOVE.W	AUDIOCHLEV_0,D1
	CMP.W	#$C,D1
	BNE.S	.noChangeDir
	MOVE.B	X_PROGR_DIR,D5
	NEG.B	D5
	MOVE.B	D5,X_PROGR_DIR
	MOVE.B	D5,Y_FULL_DIR
	.noChangeDir:

	TST.B	FRAME_STROBE
	BNE.S	.oddFrame
	MOVE.B	#1,FRAME_STROBE

	MOVE.L	#PLANE0,A3
	MOVE.L	#PLANE0,A4
	BSR.W	__SCROLL_X_PROGR_SPLITX2
	MOVE.L	#PLANE1,A3
	MOVE.L	#PLANE1,A4
	BSR.W	__SCROLL_X_PROGR_SPLITX2

	LEA	EASYING_INDX,A1
	BSR.W	__LFO_EASYING
	BRA.S	.evenFrame
	.oddFrame:
	MOVE.B	#0,FRAME_STROBE

	LEA	EASYING_INDX,A1
	BSR.W	__LFO_EASYING
	MOVE.W	EASYING,Y_FULL_SHIFT	; VSHIFT
	ADDQ.W	#1,Y_FULL_SHIFT

	MOVE.L	#PLANE0,A3
	MOVE.L	#PLANE0,A4
	BSR.W	__SCROLL_Y_FULL
	MOVE.L	#PLANE1,A3
	MOVE.L	#PLANE1,A4
	BSR.W	__SCROLL_Y_FULL
	.evenFrame:

	LEA	EASYING_INDX,A1
	BSR.W	__LFO_EASYING
	RTS

__BLK_ROUND:
	; # RESET ONCE ; BEWARE THE SMC !!
	;MOVE.B	#1,FRAME_STROBE
	;MOVE.W	#$6000|(.runOnce-(__BLK_ROUND+2)),__BLK_ROUND	; mock a BRA.S
	;.runOnce:
	;## DIRECTIONS ################
	MOVE.W	MED_BLOCK_LINE,D1
	TST.W	D1
	BNE.S	.noChangeDir0
	MOVE.B	#1,Y_PROGR_DIR
	MOVE.B	#-1,X_PROGR_DIR
	MOVE.B	#1,Y_PROGR_TYPE
	BRA.S	.noChangeDir3
	.noChangeDir0:

	MOVE.W	MED_BLOCK_LINE,D1
	CMP.W	#16,D1
	BNE.S	.noChangeDir1
	MOVE.B	#-1,Y_PROGR_DIR
	MOVE.B	#1,Y_PROGR_TYPE
	MOVE.B	#-1,X_PROGR_DIR
	BRA.S	.noChangeDir3
	.noChangeDir1:

	MOVE.W	MED_BLOCK_LINE,D1
	CMP.W	#32,D1
	BNE.S	.noChangeDir2
	MOVE.B	#-1,Y_PROGR_DIR
	MOVE.B	#-1,Y_PROGR_TYPE
	MOVE.B	#1,X_PROGR_DIR
	BRA.S	.noChangeDir3
	.noChangeDir2:

	MOVE.W	MED_BLOCK_LINE,D1
	CMP.W	#48,D1
	BNE.S	.noChangeDir3
	MOVE.B	#1,Y_PROGR_DIR
	MOVE.B	#-1,Y_PROGR_TYPE
	MOVE.B	#1,X_PROGR_DIR
	.noChangeDir3:
	;## DIRECTIONS ################

	TST.B	FRAME_STROBE
	BNE.W	.oddFrame
	MOVE.B	#1,FRAME_STROBE

	MOVE.L	#PLANE0,A3
	MOVE.L	#PLANE0,A4
	BSR.W	__SCROLL_X_PROGR_SPLITX2

	MOVE.L	#PLANE1,A3
	MOVE.L	#PLANE1,A4
	BSR.W	__SCROLL_X_PROGR_SPLITX2

	;MOVE.W	#0,BLIT_A_MOD

	;## GLITCH ####################
	MOVE.W	#2*64+w/16,BLIT_SIZE
	MOVE.W	#-1,BLIT_A_MOD
	MOVE.W	#0,BLIT_D_MOD

	MOVE.L	#PLANE0+bpl*(h-2),A4
	;ADD.L	#bpl*(h-2),A4
	BSR.W	__BLIT_GLITCH_BAND

	MOVE.L	#PLANE1+bpl*(h-2),A4
	;ADD.L	#bpl*(h-2),A4
	BSR.W	__BLIT_GLITCH_BAND
	MOVE.W	#0,BLIT_A_MOD
	;## GLITCH ####################

	MOVE.L	#PLANE3,A1		; A4
	BSR.W	__WIPE_PLANE

	BRA.W	.evenFrame
	.oddFrame:
	MOVE.B	#0,FRAME_STROBE

	MOVE.L	#PLANE0,A3
	MOVE.L	#PLANE0,A4
	BSR.W	__SCROLL_Y_PROGR

	MOVE.L	#PLANE1,A3
	MOVE.L	#PLANE1,A4
	BSR.W	__SCROLL_Y_PROGR

	;## GLITCH ####################
	MOVE.W	#2*64+w/16,BLIT_SIZE
	MOVE.W	#-1,BLIT_A_MOD
	MOVE.W	#0,BLIT_D_MOD

	MOVE.L	#PLANE0,A4
	BSR.W	__BLIT_GLITCH_BAND

	MOVE.L	#PLANE1,A4
	BSR.W	__BLIT_GLITCH_BAND
	MOVE.W	#0,BLIT_A_MOD
	;## GLITCH ####################

	MOVE.L	#PLANE3,A4
	BSR.W	__BLIT_GLITCH_TILE
	.evenFrame:
	RTS

__BLK_END:
	LEA	PLANE3,A1
	MOVE.L	A1,A4
	BSR.W	__WIPE_PLANE
	MOVE.W	#$FFFF,BLIT_PATT
	MOVE.W	#$5,V_MAX_VECTORS
	BSR.W	__BLIT_VECTORS

	MOVE.W	AUDIOCHLEV_1,D1
	BSR.W	__BLK_KICK_SHIFT

	BSR.W	__X_LFO_EASYING
	MOVE.W	Y_EASYING,D1
	MOVE.W	D1,AUDIOCHLEV_0

	MOVE.W	#$AF5B,D2
	LSR.W	D1,D2
	MOVE.W	D2,BLIT_PATT

	;MOVE.W	#$4,V_MAX_VECTORS
	LEA	PLANE1,A4
	BSR.W	__BLIT_VECTORS
	MOVE.W	BLIT_PATT,D2
	NEG.W	D2
	MOVE.W	D2,BLIT_PATT
	LEA	PLANE0+40,A4
	BSR.W	__BLIT_VECTORS

	BSR.W	__Y_LFO_EASYING
	MOVE.W	X_EASYING,D1
	LSR.W	#2,D1
	LSL.W	#2,D1
	ADD.W	#2,D1
	MOVE.W	D1,V_SHIFT
	BSR.W	__UPDATE_ANGLE

	BRA.W	__BLK_DISPERSE
	RTS

;********** Fastmem Data **********
TIMELINE:	DC.L __BLK_BEGIN,__BLK_BEGIN_MID,__BLK_BEGIN_PRE,__BLK_BEGIN		;1
	DC.L __BLK_BEGIN3,__BLK_BEGIN3,__BLK_BEGIN3,__BLK_BEGIN3_PRE		;4 4: METAL_KICK1
	DC.L __BLK_BEGIN4_POST,__BLK_BEGIN4,__BLK_BEGIN4,__BLK_BEGIN4		;8 8: BIG_KICK_BEGIN
	DC.L __BLK_BEGIN4,__BLK_BEGIN4,__BLK_BEGIN4,__BLK_BEGIN4_PRE		;12 8: BIG_KICK_BEGIN
	DC.L __BLK_0,__BLK_0_POST,__BLK_0,__BLK_0_PRE				;16 13: LOOPED_CHANGE

	DC.L __BLK_SHUFFLE,__BLK_0,__BLK_SHUFFLE,__BLK_0_PRE			;20
	DC.L __BLK_SHUFFLE,__BLK_PLASMA_PRE					;22
	DC.L __BLK_PLASMA,__BLK_PLASMA,__BLK_PLASMA,__BLK_ROUND			;24 27: Occimo!
	DC.L __BLK_PLASMA,__BLK_PLASMA,__BLK_PLASMA,__BLK_DIAG_FLUID1_PRE		;30 RECOLOR

	DC.L __BLK_VECT_ALT_0_EXPL,__BLK_VECT_ALT_0_EXPL,__BLK_VECT_ALT_0_EXPL,__BLK_VECT_ALT_0_EXPL				;34 25: DE-LI-RI-O!
	DC.L __BLK_0_VECT,__BLK_VECTOR_EXPLODE,__BLK_VECT_ALT_0_EXPL,__BLK_PLASMA_VECT\.runOnce		;38 25: DE-LI-RI-O!
	DC.L __BLK_VECTOR_SPREAD,__BLK_VECTOR_SPREAD,__BLK_VECTOR_SPREAD,__BLK_VECTOR_SPREAD		;34 25: DE-LI-RI-O!
	DC.L __BLK_VECTOR_EXPLODE,__BLK_VECT_ALT_0_EXPL,__BLK_VECTOR_EXPLODE,__BLK_VECTOR_SPREAD_PRE\.noSpread	;42 25: DE-LI-RI-O!

	DC.L __BLK_VECTOR_SPREAD_PRE\.noSpread,__BLK_VECTSPRD_KICK,__BLK_0_VECT,__BLK_0_VECT
	DC.L __BLK_0_VECT,__BLK_VECT_ALT_0_EXPL,__BLK_VECT_ALT_0_EXPL,__BLK_VECT_ALT_0_EXPL
	;# NEXT 3 BLOCKS ARE DELIRIO!
	DC.L __BLK_VECTOR_SPREAD2,__BLK_VECTOR_SPREAD2,__BLK_VECTOR_SPREAD2,__BLK_VECTOR_SPREAD2
	
	DC.L __BLK_DIAG_RESET,__BLK_DIAG_RESET
	DC.L __BLK_VECTOR_SPREAD_PRE\.noSpread,__BLK_VECTOR_SPREAD_PRE\.noSpread
	DC.L __BLK_VECTOR_SPREAD_PRE\.noSpread,__BLK_VECTSPRD_GRAD,__BLK_VECTSPRD_GRAD,__BLK_VECT_GRAD_PLASMA
	DC.L __BLK_VECT_GRAD_PLASMA,__BLK_VECT_GRAD_PLASMA,__BLK_VECT_GRAD_PLASMA,__BLK_VECT_GRAD_PLASMA
	DC.L __BLK_VECT_GRAD_PLASMA,__BLK_VECT_GRAD_PLASMA,__BLK_VECT_GRAD_PLASMA,__BLK_END

MED_SONG_POS:	DC.W 0	; Well the position...
MED_BLOCK_LINE:	DC.W 0	; Line of block
AUDIOCHLEV_0:	DC.W 0	; MED VALUES
AUDIOCHLEV_1:	DC.W 0	; AUDIO CHANNEL0-3 LEVEL ($F-$0)
AUDIOCHLEV_2:	DC.W 0
AUDIOCHLEV_3:	DC.W 0

X_SHIFT_LFO:	DC.B 1
X_SHIFT_LFO_MIN:	DC.B -1
X_SHIFT_LFO_MAX:	DC.B 15
X_LFO_INVERT_DIR:	DC.B 0

Y_SHIFT_LFO:	DC.B 1
Y_SHIFT_LFO_MIN:	DC.B -1
Y_SHIFT_LFO_MAX:	DC.B 15
Y_LFO_INVERT_DIR:	DC.B 0

Z_RESET:		DC.W 40+16
Z_POS:		DC.W 40
Z_FACT:		DC.W Z_Shift
CENTER:		DC.W Z_Shift
X_TEMP:		DC.W 0
Y_TEMP:		DC.W 0
XY_INIT:		DC.W 0
V_ANGLE:		DC.W 0
V_MAX_VECTORS:	DC.W 14
V_DIR:		DC.W -1	; -1=LEFT 1=RIGHT
V_SHIFT:		DC.W 6	; VECTOR ANGLE ADDER

X_DIR:		DC.B 1	; -1=LEFT 1=RIGHT
Y_DIR:		DC.B -1	; -1=LEFT 1=RIGHT
X_SHIFT:		DC.W 0
Y_SHIFT:		DC.W 1

X_HALF_DIR:	DC.B 0
Y_HALF_DIR:	DC.B 0
X_HALF_SHIFT:	DC.W 0
Y_HALF_SHIFT:	DC.W 0

X_FULL_DIR:	DC.B 1
Y_FULL_DIR:	DC.B 1
X_FULL_SHIFT:	DC.W 0
Y_FULL_SHIFT:	DC.W 0

X_PROGR_DIR:	DC.B -1
Y_PROGR_DIR:	DC.B 1
X_PROGR_TYPE:	DC.B -1
Y_PROGR_TYPE:	DC.B 1	; SOLO POSITIVO

X_1_4_DIR:	DC.B 1	; -1=LEFT 1=RIGHT
Y_1_4_DIR:	DC.B -1	; -1=LEFT 1=RIGHT
X_1_4_SHIFT:	DC.W 1
Y_1_4_SHIFT:	DC.W 10

PLASMA_DIR:	DC.B -1
FRAME_STROBE:	DC.B 0

TEXTINDEX:	DC.W 0
FRAMESINDEX:	DC.W 4
GLITCHDATA:	DC.L MED_MODULE
GLITCHGOOD:	DC.L MED_MODULE+h*bpl*5
GLITCHRESET:	DC.L MED_MODULE+h*bpl*5

Y_EASYING_INDX:	DC.W 0
Y_EASYING_TBL:	DC.W 1,1,1,1,2,1,2,2,3,3,2,3,3,4,3,4,4,5,5,5,6,5,6,6,7,6,7,7,8,8,9,8,10
		DC.W 9,10,9,8,7,7,6,6,6,5,5,5,5,4,4,4,4,3,3,3,2,3,3,2,2,2,2,2,1,1,1,1,0
Y_EASYING:	DC.W 1

X_EASYING_INDX:	DC.W 12
X_EASYING_TBL:	DC.W 1,1,2,2,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,11,10,9,9,8,8,7,7,6,6
		DC.W 5,5,5,4,4,3,3,2,2,2,2,1,2,1,2,1,2,1,2,1,1,0,1,0,1,0,1,0,1,0,1,0,0
X_EASYING:	DC.W 7

EASYING_INDX:	DC.W 0,32,28,6
EASYING_TBL:	DC.W 5,5,5,6,5,6,6,6,7,7,8,8,9,9,10
		DC.W 10,9,9,9,8,9,8,8,7,7,7,6,7,6,6,5,5,5,5,4,4,4,4,3,3,3,2,3,3,2,2,2,2,2,1,1,1,1,0
EASYING:		DC.W 1

BPLxMOD_INDEX:	DC.W 0
BPLxMOD_TABLE:	DC.W 1,3,4,1,12,5,4,7,1,4,3,1,0,2,6,10,7,3,2,1,5,4,1,8,7,6,5,1,8,0,1,8,0,3,1,7,17,4,30,3,6,1

BLIT_Y_MASK:	DC.W $FFFF
BLIT_X_MASK:	DC.W $FFFF
BLIT_PATT:	DC.W $FFFF
BLIT_PATSHIFT:	DC.W $A00F
BLIT_A_MOD:	DC.W 0
BLIT_D_MOD:	DC.W 0
BLIT_SIZE:	DC.W 2*64+w/2/16

TOP_MARGIN:	DC.W MARGINY-16

COLSEQ2_PTR:	DC.L COLORSEQ2
COLORSEQ2:	DC.W $0180,$0CCC,$0182,$0CFC,$0184,$0EEE,$0186,$0FFF
		DC.W $0180,$0BBB,$0182,$0BEB,$0184,$0DDD,$0186,$0EEE
		DC.W $0180,$0AAA,$0182,$0ADA,$0184,$0CCC,$0186,$0DDD
		DC.W $0180,$0999,$0182,$09C9,$0184,$0BBB,$0186,$0CCC
		DC.W $0180,$0888,$0182,$08B8,$0184,$0AAA,$0186,$0BBB
		DC.W $0180,$0777,$0182,$07A7,$0184,$0999,$0186,$0AAA
		DC.W $0180,$0666,$0182,$0696,$0184,$0888,$0186,$0899
		DC.W $0180,$0555,$0182,$0585,$0184,$0777,$0186,$0888
		DC.W $0180,$0444,$0182,$0474,$0184,$0666,$0186,$0777
		DC.W $0180,$0333,$0182,$0363,$0184,$0555,$0186,$0676
		DC.W $0180,$0222,$0182,$0252,$0184,$0444,$0186,$0556
		DC.W $0180,$0121,$0182,$0141,$0184,$0333,$0186,$0454
		DC.W $0180,$0112,$0182,$0130,$0184,$0222,$0186,$0333
		DC.W $0180,$0101,$0182,$0120,$0184,$0112,$0186,$0233
		DC.W $0180,$0010,$0182,$0021,$0184,$0121,$0186,$0122
		DC.W $0180,$0000,$0182,$0011,$0184,$0101,$0186,$0110


		DC.W $0188,$0FFF,$018A,$0110,$018C,$0655,$018E,$0566	; OTHER COLORS
		DC.W $0188,$0EFE,$018A,$0021,$018C,$0555,$018E,$0454	; OTHER COLORS
		DC.W $0188,$0DFD,$018A,$0031,$018C,$0544,$018E,$0333	; OTHER COLORS
		DC.W $0188,$0CFC,$018A,$0140,$018C,$0434,$018E,$0223	; OTHER COLORS
		DC.W $0188,$0BFB,$018A,$0141,$018C,$0333,$018E,$0211	; OTHER COLORS
		DC.W $0188,$0AFA,$018A,$0051,$018C,$0233,$018E,$0212	; OTHER COLORS
		DC.W $0188,$09F9,$018A,$0152,$018C,$0212,$018E,$0132	; OTHER COLORS
		DC.W $0188,$08F8,$018A,$0161,$018C,$0211,$018E,$0121	; OTHER COLORS
		DC.W $0188,$07F7,$018A,$0160,$018C,$0122,$018E,$0130	; OTHER COLORS
		DC.W $0188,$06F6,$018A,$0070,$018C,$0121,$018E,$0021	; OTHER COLORS
		DC.W $0188,$05F5,$018A,$0080,$018C,$0122,$018E,$0130	; OTHER COLORS
		DC.W $0188,$04F4,$018A,$0090,$018C,$0121,$018E,$0021	; OTHER COLORS
		DC.W $0188,$03F3,$018A,$00A0,$018C,$0122,$018E,$0130	; OTHER COLORS
		DC.W $0188,$02F2,$018A,$00B0,$018C,$0121,$018E,$0021	; OTHER COLORS
		DC.W $0188,$0100,$018A,$00D0,$018C,$0112,$018E,$0131	; OTHER COLORS
		DC.W $0188,$0101,$018A,$00E0,$018C,$0021,$018E,$0101	; OTHER COLORS
		DC.W $0188,$0010,$018A,$00F0,$018C,$0101,$018E,$0100	; OTHER COLORS
		DC.W $0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000	; RESET

COLSEQ2_RESET:	DC.W $0180,$0000,$0182,$0222,$0184,$0333,$0186,$0444	; FINAL
		DC.W $0188,$0555,$018A,$00B1,$018C,$0667,$018E,$0777

DUMMY:		DC.W $0180,$0333,$0180,$0333,$0180,$0333,$0180,$0333
COLORSEQ1:	DC.W $0180,$0333,$0180,$0344,$0180,$0444,$0180,$0454
		DC.W $0180,$0455,$0180,$0556,$0180,$0656,$0180,$0666
		DC.W $0180,$0676,$0180,$0776,$0180,$0777,$0180,$0788
		DC.W $0180,$0898,$0180,$0999,$0180,$0ABA,$0180,$0EEE

DUMMY2:		DC.W $0180,$0000,$0180,$0000,$0180,$0000,$0180,$0000
COLORSEQ3:	DC.W $0180,$0000,$0180,$0000,$0180,$0000,$0180,$0111
		DC.W $0180,$0222,$0180,$0444,$0180,$0555,$0180,$0666
		DC.W $0180,$0777,$0180,$0888,$0180,$0999,$0180,$0AAA
		DC.W $0180,$0BBB,$0180,$0CCC,$0180,$0DDD,$0180,$0FFF

COLORSEQ4_PTR:	DC.L COLORSEQ4
COLORSEQ4:	DC.W $0188,$0554,$018A,$01A1,$018C,$0556,$018E,$0444
		DC.W $0188,$0544,$018A,$0292,$018C,$0555,$018E,$0333
		DC.W $0188,$0444,$018A,$0282,$018C,$0444,$018E,$0222
		DC.W $0188,$0444,$018A,$0383,$018C,$0344,$018E,$0111
		DC.W $0188,$0434,$018A,$0373,$018C,$0334,$018E,$0000
		DC.W $0188,$0334,$018A,$0464,$018C,$0332,$018E,$0111
		DC.W $0188,$0334,$018A,$0454,$018C,$0333,$018E,$0222
		DC.W $0188,$0334,$018A,$0455,$018C,$0332,$018E,$0333
		DC.W $0188,$0334,$018A,$0555,$018C,$0333,$018E,$0444

		DC.W $0180,$0001,$0182,$0222,$0184,$0333,$0186,$0444
		DC.W $0180,$0011,$0182,$0232,$0184,$0323,$0186,$0344
		DC.W $0180,$0111,$0182,$0233,$0184,$0323,$0186,$0344
		DC.W $0180,$0212,$0182,$0333,$0184,$0323,$0186,$0345
		DC.W $0180,$0221,$0182,$0334,$0184,$0233,$0186,$0345
		DC.W $0180,$0221,$0182,$0344,$0184,$0233,$0186,$0345
		DC.W $0180,$0222,$0182,$0444,$0184,$0223,$0186,$0334
		DC.W $0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000	; RESET

COLSEQ5_PTR:	DC.L COLORSEQ5
COLORSEQ5:	DC.W $0180,$0DDD
		DC.W $0180,$0CDC
		DC.W $0180,$0CCC
		DC.W $0180,$0BCC
		DC.W $0180,$0BBB
		DC.W $0180,$0BAA
		DC.W $0180,$0AAA
		DC.W $0180,$09AA
		DC.W $0180,$0999
		DC.W $0180,$0898
		DC.W $0180,$0888
		DC.W $0180,$0777
		DC.W $0180,$0667
		DC.W $0180,$0666
		DC.W $0180,$0566
		DC.W $0180,$0555
		DC.W $0180,$0454
		DC.W $0180,$0444
		DC.W $0180,$0343
		DC.W $0180,$0333
		DC.W $0180,$0232
		DC.W $0180,$0222
		DC.W $0000,$0000

COLSEQ_RESET:	DC.W $0180,$0222,$0182,$0333,$0184,$0433,$0186,$0444
		DC.W $0188,$0655,$018A,$0455,$018C,$0667,$018E,$0777

KONEY:		DC.L %10001011111011111011111011011000
		DC.L %10010010001010001010000001110000
		DC.L %11100011001011001011111000100000
		DC.L %11010011001011001011000000110000
		DC.L %11001011111011001011111000110000

VECT_PTR:		DC.L VECT_COORDS
VECT_COORDS:	
		DC.W 0,1,0,1
		DC.W 5,5,5,5
		DC.W 4,2,4,2
		DC.W 4,5,4,5
		DC.W 2,5,2,5
		DC.W 1,0,1,0
		DC.W 1,5,1,5
		DC.W 0,0,0,0
		DC.W 1,5,1,5
		DC.W 2,0,2,0
		DC.W 3,5,3,5
		DC.W 3,0,3,0
		DC.W 3,5,3,5
		DC.W 4,0,4,0
		DC.W 0,4,0,4
		DC.W 5,0,5,0
		DC.W 5,4,5,4
		DC.W 0,5,0,5
		DC.W 5,3,5,3
		DC.W 0,3,0,3
		DC.W 0,2,0,2
		DC.W 5,3,5,3

		DC.W 1,0,1,2
		DC.W 1,2,4,2
		DC.W 4,2,4,0
		DC.W 4,0,5,0
		DC.W 5,0,5,1
		DC.W 5,1,3,1
		DC.W 3,1,3,4
		DC.W 3,4,5,4
		DC.W 5,4,5,5
		DC.W 5,5,4,5
		DC.W 4,5,4,3
		DC.W 4,3,2,3
		DC.W 2,3,2,5
		DC.W 2,5,0,5
		DC.W 5,5,0,0

		DC.W 5,3,4,1
		DC.W 4,1,3,4
		DC.W 3,4,3,0
		DC.W 2,4,2,2
		DC.W 1,1,2,1
		DC.W 4,1,4,0
		DC.W 5,5,0,5
		DC.W 0,5,2,1
		DC.W 3,1,4,1
		DC.W 2,1,2,2

		DC.W 2,0,5,3
		DC.W 5,3,4,1
		DC.W 4,1,3,4
		DC.W 3,4,3,0
		DC.W 2,4,2,2
		DC.W 1,1,2,1
		DC.W 4,1,4,0
		DC.W 5,5,0,5
		DC.W 0,5,2,1
		DC.W 3,1,4,1
		DC.W 2,1,2,2
		DC.W 1,0,0,3

		DC.W 5,3,4,1
		DC.W 4,1,3,4
		DC.W 3,4,3,0
		DC.W 2,4,2,2
		DC.W 1,1,2,1
		DC.W 4,1,4,0
		DC.W 5,5,0,5
		DC.W 0,5,2,1
		DC.W 3,1,4,1
		DC.W 2,1,2,2

	INCLUDE	"sincosin_table.i"	; VALUES

FONT:		DC.L 0,0		; SPACE CHAR
		INCBIN "nintendo_font.raw",0
		EVEN
TEXT:		INCLUDE "textscroller.i"
		INCLUDE "med/MED_PlayRoutine.i"
	;#######################################################
	SECTION	ChipData,DATA_C	;declared data that must be in chipmem
MED_MODULE:	INCBIN "med/KETAMUSkOLAR_2020FIX6.med"
_chipzero:	DC.L 0
_MED_MODULE:

PAT_CHAOS:	INCBIN "pattern_chaos.raw"
BG_DITHER:	INCBIN "bg_dither1.raw"

COPPER:
	DC.W $1FC,0	; Slow fetch mode, remove if AGA demo.
	DC.W $8E,$2C81	; 238h display window top, left | DIWSTRT - 11.393
	DC.W $90,$2CC1	; and bottom, right.	| DIWSTOP - 11.457
	DC.W $92,$38	; Standard bitplane dma fetch start
	DC.W $94,$D0	; and stop for standard screen.
	DC.W $106,$0C00	; (AGA compat. if any Dual Playf. mode)
	DC.W $108,0	; BPL1MOD	 Bitplane modulo (odd planes)
	DC.W $10A,0	; BPL2MOD Bitplane modulo (even planes)
	DC.W $102,0	; SCROLL REGISTER (AND PLAYFIELD PRI)

	.Palette:
	DC.W $0180,$0344,$0182,$0222,$0184,$0433,$0186,$0444
	DC.W $0188,$0655,$018A,$0455,$018C,$0667,$018E,$0777

	DC.W $0190,$0111,$0192,$0212,$0194,$0110,$0196,$0112
	DC.W $0198,$0334,$019A,$0444,$019C,$0000,$019E,$0334

	DC.W $01A0,$0CCC,$01A2,$0F00,$01A4,$0EEE,$01A6,$00CC
	DC.W $01A8,$0F00,$01AA,$0FFF,$01AC,$0DDD,$01AE,$0FFF

	DC.W $01B0,$00DD,$01B2,$0223,$01B4,$0121,$01B6,$0122
	DC.W $01B8,$0332,$01BA,$00FF,$01BC,$0F00,$01BE,$0FFF

	.SpritePointers:
	DC.W $120,0,$122,0	; 0
	DC.W $124,0,$126,0	; 1
	DC.W $128,0,$12A,0	; 2
	DC.W $12C,0,$12E,0	; 3
	DC.W $130,0,$132,0	; 4
	DC.W $134,0,$136,0	; 5
	DC.W $138,0,$13A,0	; 6
	DC.W $13C,0,$13E,0	; 7

	.BplPtrs:
	DC.W $E0,0
	DC.W $E2,0
	DC.W $E4,0
	DC.W $E6,0
	DC.W $E8,0
	DC.W $EA,0
	DC.W $EC,0
	DC.W $EE,0
	DC.W $F0,0
	DC.W $F2,0
	DC.W $F4,0
	DC.W $F6,0		;full 6 ptrs, in case you increase bpls
	;DC.W $100,bpls*$1000+$200	;enable bitplanes
	DC.W $100,%0101001000000000	;enable bitplanes

	.COPPERWAITS:
	DC.W $3801,$FF00		; ## START ##
	.BplPtrs2:
	DC.W $E0,0
	DC.W $E2,0
	DC.W $E4,0
	DC.W $E6,0
	DC.W $E8,0
	DC.W $EA,0
	DC.W $EC,0
	DC.W $EE,0
	DC.W $F0,0
	DC.W $F2,0
	DC.W $F4,0
	DC.W $F6,0

	DC.W $FFDF,$FFFE		; allow VPOS>$ff
	DC.W $2101,$FF00		; ## START ##
	.BplPtrs3:
	DC.W $E0,0
	DC.W $E2,0
	DC.W $E4,0
	DC.W $E6,0
	DC.W $E8,0
	DC.W $EA,0
	DC.W $EC,0
	DC.W $EE,0
	DC.W $F0,0
	DC.W $F2,0
	DC.W $F4,0
	DC.W $F6,0

	DC.W $2201,$FF00		; ## START ##
	DC.W $100,%1100001000000000	; MED RES FROM HERE
	DC.W $019E,$0DDD
	DC.W $3501,$FF00		; ## RASTER END ## #$12C?
	DC.W $009A,$0010		; CLEAR RASTER BUSY FLAG

	DC.W $FFFF,$FFFE		; magic value to end copperlist
	._COPPER:

	SECTION ChipBuffers,BSS_C	; BSS doesn't count toward exe size

BPL_PRECALC:	DS.W bpl*1	; Precalculated offsets
BLEED0:		DS.B 64*bpl
PLANE0:		DS.B h*bpl
BLEED1:		DS.B 64*bpl
PLANE1:		DS.B h*bpl
BLEED2:		DS.B 64*bpl
PLANE3:		DS.B h*bpl	; FOR 3D
BLEED3:		DS.B 64*bpl
GRADIENTPLANE:	DS.B h*bpl	; for CRT fx
GRADIENTPLANENEG:	DS.B h*bpl	; for CRT fx
DITHERPLANE:	DS.B h*bpl	; 1 plane
HEADER:		DS.B 12*bpl
FOOTER:		DS.B 11*bpl*2	; HI-RES
FOOTER_END:	DS.B 0		; ??
END
